Hyperlane CLI
✅ Loaded rebalancer config
WeightedStrategy created
Running in monitorOnly mode: no transactions will be executed.
Rebalancer started successfully 🚀
{
  chain: 'sepolia',
  tokenSymbol: 'MOFT',
  tokenAddress: '0x8f2a074421098E10ab7083e198E177D4d215a9A5'
} Cannot get bridged balance for a non-Hyperlane token
{
  chain: 'arbitrumsepolia',
  tokenSymbol: 'MOFT',
  tokenAddress: '0x5bbd1FC7b11AE8d5984e6B399C4c9BD04f61BdcF'
} Cannot get bridged balance for a non-Hyperlane token
{
  context: 'getRawBalances',
  chain: 'sepolia',
  tokenSymbol: 'MOFT',
  tokenAddress: '0x8f2a074421098E10ab7083e198E177D4d215a9A5'
} Skipping token: not collateralized or ineligible for rebalancing
{
  context: 'getRawBalances',
  chain: 'arbitrumsepolia',
  tokenSymbol: 'MOFT',
  tokenAddress: '0x5bbd1FC7b11AE8d5984e6B399C4c9BD04f61BdcF'
} Skipping token: not collateralized or ineligible for rebalancing
{ context: 'WeightedStrategy', rawBalances: {} } Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
Hyperlane CLI
Hyperlane CLI
✅ Loaded rebalancer config
WeightedStrategy created
Running in monitorOnly mode: no transactions will be executed.
Rebalancer started successfully 🚀
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
Error during monitor execution cycle: missing revert data in call exception; Transaction reverted without a reason string
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
Error during monitor execution cycle: timeout: RPC request failed. Check RPC validity. To override RPC URLs, see: https://docs.hyperlane.xyz/docs/deploy-hyperlane-troubleshooting#override-rpc-urls
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
Hyperlane CLI
✅ Loaded rebalancer config
WeightedStrategy created
Manual rebalance strategy selected. Origin: arbitrumsepolia, Destination: sepolia, Amount: 10
{ numberOfRoutes: 1 } Rebalance initiated
{ numRoutes: 1 } Preparing all rebalance transactions.
{
  origin: 'arbitrumsepolia',
  destination: 'sepolia',
  amount: 10000000000000000000n
} Preparing transaction for route
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  origin: 'arbitrumsepolia',
  destination: 'sepolia',
  amount: 10,
  tokenName: 'My OFT',
  tokenAddress: '0x5bbd1FC7b11AE8d5984e6B399C4c9BD04f61BdcF',
  signerAddress: '0x368ABEe52D223BFF3DD7116a1BB31Ad899Eb9fd5'
} Route validation failed: Signer is not a rebalancer.
{
  preparationFailures: 1,
  gasEstimationFailures: 0,
  transactionFailures: 0
} A rebalance stage failed.
{
  err: Error: ❌ Some rebalance transaction failed
      at Rebalancer.rebalance (file:///Users/vlaca/Documents/blocktopus/kurtosis-packages/hyperlane-monorepo/typescript/cli/cli-bundle/index.js:638295:19)
      at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
      at async WithSemaphore.rebalance (file:///Users/vlaca/Documents/blocktopus/kurtosis-packages/hyperlane-monorepo/typescript/cli/cli-bundle/index.js:638579:13)
      at async RebalancerRunner.runManual (file:///Users/vlaca/Documents/blocktopus/kurtosis-packages/hyperlane-monorepo/typescript/cli/cli-bundle/index.js:639864:13)
      at async RebalancerRunner.run (file:///Users/vlaca/Documents/blocktopus/kurtosis-packages/hyperlane-monorepo/typescript/cli/cli-bundle/index.js:639846:13)
      at async Object.handler (file:///Users/vlaca/Documents/blocktopus/kurtosis-packages/hyperlane-monorepo/typescript/cli/cli-bundle/index.js:640503:13)
} ❌ Manual rebalance from arbitrumsepolia to sepolia failed.
Rebalancer error: Error: ❌ Some rebalance transaction failed
    at Rebalancer.rebalance (file:///Users/vlaca/Documents/blocktopus/kurtosis-packages/hyperlane-monorepo/typescript/cli/cli-bundle/index.js:638295:19)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async WithSemaphore.rebalance (file:///Users/vlaca/Documents/blocktopus/kurtosis-packages/hyperlane-monorepo/typescript/cli/cli-bundle/index.js:638579:13)
    at async RebalancerRunner.runManual (file:///Users/vlaca/Documents/blocktopus/kurtosis-packages/hyperlane-monorepo/typescript/cli/cli-bundle/index.js:639864:13)
    at async RebalancerRunner.run (file:///Users/vlaca/Documents/blocktopus/kurtosis-packages/hyperlane-monorepo/typescript/cli/cli-bundle/index.js:639846:13)
    at async Object.handler (file:///Users/vlaca/Documents/blocktopus/kurtosis-packages/hyperlane-monorepo/typescript/cli/cli-bundle/index.js:640503:13)
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
Hyperlane CLI
✅ Loaded rebalancer config
WeightedStrategy created
Rebalancer started successfully 🚀
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
{
  context: 'WeightedStrategy',
  rawBalances: { sepolia: 0n, arbitrumsepolia: 0n }
} Input rawBalances
{ context: 'WeightedStrategy' } Calculating rebalancing routes
{ context: 'WeightedStrategy', numberOfRoutes: 0 } Found rebalancing routes
No routes to execute. Assuming rebalance is complete. Resetting semaphore timer.
Rebalancer completed a cycle successfully.
Gracefully shutting down rebalancer...
Gracefully shutting down rebalancer...
Stopping monitor...
Stopping monitor...
Monitor stopped
Rebalancer shutdown complete.
Monitor stopped
Rebalancer shutdown complete.
