#include "imports/stdlib.fc";
#include "imports/op_codes.fc";
#include "imports/errors.fc";
#include "imports/ton_msg.fc";
#include "imports/delivery.lib.fc";

global int g::initiated?;
global int g::message_id;
global slice g::mailbox_addr;

() load_globals() impure {
  var ds = get_data().begin_parse();
  g::initiated? = ds~load_uint(1);
  g::message_id = ds~load_uint(256);
  g::mailbox_addr = ds~load_msg_addr();
  ds.end_parse();
}

() store_globals() impure {
  builder data = begin_cell()
    .store_uint(g::initiated?, 1)
    .store_uint(g::message_id, 256)
    .store_slice(g::mailbox_addr);

  set_data(data.end_cell());
}

() op_handler::initialize(
  slice in_msg_body,
  int query_id,
  slice sender_address
) impure {
  g::initiated? = 1;

  cell msg_body = begin_cell()
    .store_uint(op::delivery::initialize::answer, 32)
    .store_uint(query_id, 64)
    .store_slice(in_msg_body)
    .end_cell();

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(sender_address)
    .store_coins(0)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(msg_body);

  raw_reserve(delivery::reserved_balance, 0);
  send_raw_message(msg.end_cell(), send_mode::carry_remaining_balance);
}

() recv_internal(
  cell in_msg_full, 
  slice in_msg_body
) impure {
  if ( in_msg_body.slice_empty?() ) { ;; accept simple transfer
    return ();
  }
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if ( flags & 1 ) { ;; ignore all bounced messages
    return ();
  }

  slice sender_address = cs~load_msg_addr();
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  if ( op == op::delivery::initialize ) {
    load_globals();
    throw_if(error::contract_already_initiated, g::initiated?);
    throw_unless(
      error::unauthorized_sender,
      equal_slices(sender_address, g::mailbox_addr)
    );

    op_handler::initialize(in_msg_body, query_id, sender_address);

    return store_globals();
  }

  throw(error::unknown_op);
}

cell get_state() method_id {
  return get_data();
}
