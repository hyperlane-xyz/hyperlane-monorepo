#include "imports/stdlib.fc";
#include "imports/op_codes.fc";
#include "imports/errors.fc";
#include "imports/events.fc";
#include "imports/ton_msg.fc";
#include "imports/signing_utils.fc";

global int g::local_domain;
global int g::mailbox;
global cell g::storage_locations;
global cell g::replay_protection;

() store_globals() impure inline_ref {
    cell data = begin_cell()
        .store_uint(g::local_domain, 32)
        .store_uint(g::mailbox, 256)
        .store_dict(g::storage_locations)
        .store_dict(g::replay_protection)
        .end_cell();
    set_data(data);
}

() load_globals() impure inline_ref {
    slice ds = get_data().begin_parse();
    g::local_domain = ds~load_uint(32);
    g::mailbox = ds~load_uint(256);
    g::storage_locations = ds~load_dict();
    g::replay_protection = ds~load_dict();
}

() store_location(
    int id,
    int validator_addr,
    cell dict,
    cell storage_location
) impure inline_ref {
    dict~udict_set_ref(256, id, storage_location);
    g::storage_locations~udict_set_ref(256, validator_addr, dict);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if ( in_msg_body.slice_empty?() ) { ;; accept simple transfer
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if ( flags & 1 ) { ;; ignore all bounced messages
        return ();
    }

    slice msg_sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_globals();

    if (op == op::announce) {
        int validator_addr = in_msg_body~load_uint(256);
        cell storage_location = in_msg_body~load_ref();
        cell signature = in_msg_body~load_ref();

        int replay_id = keccak256(
            begin_cell()
                .store_uint(validator_addr, 256)
                .store_slice(storage_location.begin_parse())
                .end_cell()
                .begin_parse()
        );


        (_, int replay_found?) = g::replay_protection.udict_get_ref?(256, replay_id);
        throw_if(error::replay, replay_found?);
        g::replay_protection~udict_set_ref(256, replay_id, begin_cell().end_cell());

        int domain_hash = keccak256(
            begin_cell()
                .store_uint(g::local_domain, 32)
                .store_uint(g::mailbox, 256)
                .store_slice("HYPERLANE_ANNOUNCEMENT")
                .end_cell()
                .begin_parse()
        );

        cell announcement_digest = begin_cell()
            .store_uint(domain_hash, 256)
            .store_slice(storage_location.begin_parse())
            .end_cell();
        int hash = to_eth_signed_message_hash(keccak256(announcement_digest.begin_parse()));

        (int h, int x1, int x2, int status) = get_ecdsa_pub_key(hash, signature.begin_parse());
        throw_unless(error::pubkey_recovery, status);

        int recovered_address = calc_address(x1, x2);
        throw_unless(error::wrong_validator, recovered_address == validator_addr);

        cell dict = null();
        (dict, int v_found?) = g::storage_locations.udict_get_ref?(256, validator_addr);
        store_location(replay_id, validator_addr, dict, storage_location);

        builder data = begin_cell().store_int(validator_addr, 256).store_ref(storage_location);
        send_event(event::validator_announcement, data);
        return store_globals();
    }

    throw(error::unknown_op);
}

cell get_announced_storage_locations(cell validators) method_id {
    load_globals();
    int len = 256;
    cell output = new_dict();
    slice vs = validators.begin_parse();
    while (vs.slice_bits() >= len) {
        int validator = vs~load_uint(len);
        (cell storage_locations, int found?) = g::storage_locations.udict_get_ref?(len, validator);
        if(found?) {
            output~udict_set_ref(len, validator, storage_locations);
        }
        (int bits, int refs) = vs.slice_bits_refs();
        if ((bits < len) & (refs > 0)) {
          vs = vs~load_ref().begin_parse();
        }
    }
    return output;
}
