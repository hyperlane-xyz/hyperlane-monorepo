
const int TREE_DEPTH = 32;
const int MAX_LEAVES = 4294967295;
const int KEY_LEN = 8;

(int, cell) insert_into_tree(int node, int count, cell tree) impure inline {
    throw_unless(
        error::merkle_tree_full,
        count < MAX_LEAVES
    );
    count += 1;
    int size = count;
    int i = 0;
    repeat(TREE_DEPTH) {
        if ((size & 1) == 1) {
            tree~udict_set_builder(KEY_LEN, i, begin_cell().store_uint(node, 256));
            return (count, tree);
        }
        (slice s, _) = tree.udict_get?(KEY_LEN, i);
        node = keccak256_builder(
            begin_cell()
                .store_slice(s)
                .store_uint(node, 256)
        );
        size /= 2;
        i += 1;
    }
    return (count, tree);
}

int root_w_ctx(cell zeroes, int count, cell tree) impure inline {
    int index = count;
    int i = 0;
    int current = 0;
    repeat(TREE_DEPTH) {
        int iht_bit = (index >> i) & 1;
        (slice next, _) = tree.udict_get?(KEY_LEN, i);
        if (iht_bit == 1) {
            current = keccak256_builder(
                begin_cell().store_slice(next).store_uint(current, 256)
            );
        } else {
            (slice zero, _) = zeroes.udict_get?(KEY_LEN, i);
            current = keccak256_builder(
                begin_cell().store_uint(current, 256).store_slice(zero)
            );
        }
        i += 1;
    }
    return current;
}

const slice Z_0 = "0000000000000000000000000000000000000000000000000000000000000000"s;
const slice Z_1 = "ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5"s;
const slice Z_2 = "b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30"s;
const slice Z_3 = "21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85"s;
const slice Z_4 = "e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344"s;
const slice Z_5 = "0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d"s;
const slice Z_6 = "887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968"s;
const slice Z_7 = "ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83"s;
const slice Z_8 = "9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af"s;
const slice Z_9 = "cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0"s;
const slice Z_10 = "f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5"s;
const slice Z_11 = "f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892"s;
const slice Z_12 = "3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c"s;
const slice Z_13 = "c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb"s;
const slice Z_14 = "5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc"s;
const slice Z_15 = "da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2"s;
const slice Z_16 = "2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f"s;
const slice Z_17 = "e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a"s;
const slice Z_18 = "5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0"s;
const slice Z_19 = "b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0"s;
const slice Z_20 = "c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2"s;
const slice Z_21 = "f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9"s;
const slice Z_22 = "5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377"s;
const slice Z_23 = "4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652"s;
const slice Z_24 = "cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef"s;
const slice Z_25 = "0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d"s;
const slice Z_26 = "b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0"s;
const slice Z_27 = "838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e"s;
const slice Z_28 = "662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e"s;
const slice Z_29 = "388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322"s;
const slice Z_30 = "93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735"s;
const slice Z_31 = "8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9"s;

(cell) zero_hashes() inline {
    cell zeroes = new_dict();
    zeroes~udict_set(KEY_LEN, 0, Z_0);
    zeroes~udict_set(KEY_LEN, 1, Z_1);
    zeroes~udict_set(KEY_LEN, 2, Z_2);
    zeroes~udict_set(KEY_LEN, 3, Z_3);
    zeroes~udict_set(KEY_LEN, 4, Z_4);
    zeroes~udict_set(KEY_LEN, 5, Z_5);
    zeroes~udict_set(KEY_LEN, 6, Z_6);
    zeroes~udict_set(KEY_LEN, 7, Z_7);
    zeroes~udict_set(KEY_LEN, 8, Z_8);
    zeroes~udict_set(KEY_LEN, 9, Z_9);
    zeroes~udict_set(KEY_LEN, 10, Z_10);
    zeroes~udict_set(KEY_LEN, 11, Z_11);
    zeroes~udict_set(KEY_LEN, 12, Z_12);
    zeroes~udict_set(KEY_LEN, 13, Z_13);
    zeroes~udict_set(KEY_LEN, 14, Z_14);
    zeroes~udict_set(KEY_LEN, 15, Z_15);
    zeroes~udict_set(KEY_LEN, 16, Z_16);
    zeroes~udict_set(KEY_LEN, 17, Z_17);
    zeroes~udict_set(KEY_LEN, 18, Z_18);
    zeroes~udict_set(KEY_LEN, 19, Z_19);
    zeroes~udict_set(KEY_LEN, 20, Z_20);
    zeroes~udict_set(KEY_LEN, 21, Z_21);
    zeroes~udict_set(KEY_LEN, 22, Z_22);
    zeroes~udict_set(KEY_LEN, 23, Z_23);
    zeroes~udict_set(KEY_LEN, 24, Z_24);
    zeroes~udict_set(KEY_LEN, 25, Z_25);
    zeroes~udict_set(KEY_LEN, 26, Z_26);
    zeroes~udict_set(KEY_LEN, 27, Z_27);
    zeroes~udict_set(KEY_LEN, 28, Z_28);
    zeroes~udict_set(KEY_LEN, 29, Z_29);
    zeroes~udict_set(KEY_LEN, 30, Z_30);
    zeroes~udict_set(KEY_LEN, 31, Z_31);
    return zeroes;
}