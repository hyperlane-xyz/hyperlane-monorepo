#include "imports/stdlib.fc";
#include "imports/op_codes.fc";
#include "imports/errors.fc";
#include "imports/send_mode.fc";
#include "imports/ton_msg.fc";
#include "imports/events.fc";

global slice g::ism_addr;

() store_globals() impure inline_ref {
    cell data = begin_cell()
        .store_slice(g::ism_addr)
        .end_cell();
    set_data(data);
}

() load_globals() impure inline_ref {
    slice ds = get_data().begin_parse();
    g::ism_addr = ds~load_msg_addr();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if ( in_msg_body.slice_empty?() ) { ;; accept simple transfer
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if ( flags & 1 ) { ;; ignore all bounced messages
        return ();
    }

    slice msg_sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_globals();
    if (op == op::recipient::get_ism) {
        
        cell body = begin_cell()
            .store_uint(op::recipient::get_ism::answer, 32)
            .store_uint(query_id, 64)
            .store_slice(g::ism_addr)
            .store_slice(in_msg_body)
            .end_cell();
        
        builder msg = build_message(msg_sender, 0, true, null(), body);
        send_raw_message(msg.end_cell(), send_mode::carry_remaining_value);
        return store_globals();
    }

    if (op == op::recipient::handle) {
        int origin_domain = in_msg_body~load_uint(32);
        int sender = in_msg_body~load_uint(256);
        slice relayer_addr = in_msg_body~load_msg_addr();
        cell message_body = in_msg_body~load_ref();
        builder data = begin_cell()
            .store_uint(origin_domain, 32)
            .store_uint(sender, 256)
            .store_ref(message_body);
        send_event(event::handle, data);
        send_change(relayer_addr, op, query_id, send_mode::carry_remaining_value);
        return store_globals();
    }
    throw(error::unknown_op);
}

slice get_ism() method_id {
    load_globals();
    return g::ism_addr;
}
