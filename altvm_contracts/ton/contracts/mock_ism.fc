#include "imports/stdlib.fc";
#include "imports/op_codes.fc";
#include "imports/errors.fc";
#include "imports/send_mode.fc";
#include "imports/ton_msg.fc";

global int g::module_type;

() store_globals() impure inline_ref {
    cell data = begin_cell()
        .end_cell();
    set_data(data);
}

() load_globals() impure inline_ref {
    slice ds = get_data().begin_parse();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if ( in_msg_body.slice_empty?() ) { ;; accept simple transfer
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if ( flags & 1 ) { ;; ignore all bounced messages
        return ();
    }

    slice msg_sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_globals();

    if (op == op::ism::verify) {
        cell body = begin_cell()
            .store_uint(op::ism::verify::answer, 32)
            .store_uint(query_id, 64)
            .store_int(true, 1)
            .store_slice(in_msg_body)
            .end_cell();

        builder msg = build_message(msg_sender, 0, true, null(), body);
        send_raw_message(msg.end_cell(), send_mode::carry_remaining_value);
        return store_globals();
    }

}

(cell, int) get_validators_and_threshhold() method_id {
    load_globals();
    cell data = begin_cell().end_cell();
    return (data, 0);
}

int get_module_type() method_id {
    load_globals();
    return g::module_type;
}
