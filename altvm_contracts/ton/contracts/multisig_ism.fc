#include "imports/stdlib.fc";
#include "imports/op_codes.fc";
#include "imports/errors.fc";
#include "imports/send_mode.fc";
#include "imports/ton_msg.fc";
#include "imports/signing_utils.fc";

global int g::module_type;
global int g::threshold;
global cell g::validators;
global cell g::validators_set;
global slice g::owner;

() store_globals() impure inline_ref {
    cell data = begin_cell()
        .store_uint(g::module_type, 16)
        .store_uint(g::threshold, 8)
        .store_slice(g::owner)
        .store_dict(g::validators)
        .store_dict(g::validators_set)
        .end_cell();
    set_data(data);
}

() load_globals() impure inline_ref {
    slice ds = get_data().begin_parse();
    g::module_type = ds~load_uint(16);
    g::threshold = ds~load_uint(8);
    g::owner = ds~load_msg_addr();
    g::validators = ds~load_dict();
    g::validators_set = ds~load_dict();
}

int digest(
    int origin,
    int merkle_tree_hook,
    int checkpoint_root,
    int checkpoint_index,
    int message_id
) inline {
    int domain_hash = keccak256_builder(
        begin_cell()
            .store_uint(origin, 32)
            .store_uint(merkle_tree_hook, 256)
            .store_slice("HYPERLANE")
    );
    return to_eth_signed_message_hash(keccak256_builder(
        begin_cell()
            .store_uint(domain_hash, 256)
            .store_uint(checkpoint_root, 256)
            .store_uint(checkpoint_index, 32)
            .store_uint(message_id, 256)
    ));

}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if ( in_msg_body.slice_empty?() ) { ;; accept simple transfer
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if ( flags & 1 ) { ;; ignore all bounced messages
        return ();
    }

    slice msg_sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_globals();

    if (op == op::set_validators_and_threshold) {
        throw_unless(error::unauthorized_sender, equal_slices(msg_sender, g::owner));
        g::threshold = in_msg_body~load_uint(8);
        int domain = in_msg_body~load_uint(32);
        cell validators = in_msg_body~load_dict();
        
        g::validators~udict_set_ref(32, domain, validators);

        int key = -1;
        do {
            (key, slice vs, int v_found?) = validators.udict_get_next?(32, key);
            if (v_found?) {
                g::validators_set~udict_set_ref(256, vs~load_uint(256), begin_cell().end_cell());
            }
        } until (~ v_found?);
        return store_globals();
    }

    if (op == op::ism::verify) {
        slice body = in_msg_body;
        cell message = in_msg_body~load_ref();
        cell metadata = in_msg_body~load_ref();
        slice message_slice = message.begin_parse();
        int id = build_message_id(message_slice);
        
        message_slice~skip_bits(8 + 32); ;; skip bits to origin domain
        int origin_domain = message_slice~load_uint(32);
        int sender = message_slice~load_uint(256);

        slice metadata_slice = metadata.begin_parse();
        int merkle_tree_hook = metadata_slice~load_uint(256);
        int checkpoint_root = metadata_slice~load_uint(256);
        int checkpoint_index = metadata_slice~load_uint(32);        
        cell signatures = metadata_slice~load_dict();

        int digest = digest(
            origin_domain,
            merkle_tree_hook,
            checkpoint_root,
            checkpoint_index,
            id
        );
        (cell validators, int v_found?) = g::validators.udict_get_ref?(32, origin_domain);
        throw_unless(error::domain_validators_not_found, v_found?);
        int sig_count = 0;
        int key = -1;
        do {
            (key, slice signature, int sig_found?) = signatures.udict_get_next?(32, key);
            if (sig_found?) {
                (int h, int x1, int x2, int status) = get_ecdsa_pub_key(digest, signature);
                
                if (status) {
                    int address = calc_address(x1, x2);
                    (_, int v_found?) = g::validators_set.udict_get_ref?(256, address);

                    if (v_found?) {
                        sig_count += 1;
                    }
                }
            }
        } until (~ sig_found?);

        builder body = begin_cell()
            .store_uint(op::ism::verify::answer, 32)
            .store_uint(query_id, 64)
            .store_int(sig_count >= g::threshold, 1)
            .store_slice(body);

        builder msg = build_message(msg_sender, 0, false, null(), body.end_cell());
        send_raw_message(msg.end_cell(), send_mode::carry_remaining_value);
        return store_globals();
    }

}

int get_module_type() method_id {
    load_globals();
    return g::module_type;
}

(int, cell) get_validators_and_threshold(int origin_domain) method_id {
    load_globals();
    (cell validators, int f?) = g::validators.udict_get_ref?(32, origin_domain);
    return (g::threshold, validators);
}

int get_test() method_id {
    return 11;
}