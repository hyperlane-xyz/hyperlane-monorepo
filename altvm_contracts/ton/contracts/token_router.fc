
#include "imports/stdlib.fc";
#include "imports/send_mode.fc";
#include "imports/reserve_mode.fc";
#include "imports/errors.fc";
#include "imports/ton_msg.fc";
#include "imports/op_codes.fc";
#include "imports/metadata.fc";
#include "imports/dispatch.fc";
#include "router_state.fc";

() store_globals() impure inline_ref {
    cell data = begin_cell()
        .store_slice(g::ism_addr)
        .store_slice(g::jetton_addr)
        .store_slice(g::mailbox_addr)
        .store_dict(g::routers)
        .store_maybe_ref(g::jetton_wallet_code)
        .store_ref(begin_cell().store_slice(g::owner_addr).end_cell())
        .end_cell();
    set_data(data);
}

() load_globals() impure inline_ref {
    slice ds = get_data().begin_parse();
    g::ism_addr = ds~load_msg_addr();
    g::jetton_addr = ds~load_msg_addr();
    g::mailbox_addr = ds~load_msg_addr();
    g::routers = ds~load_dict();
    g::jetton_wallet_code = ds~load_maybe_ref();
    slice ds = ds~load_ref_slice();
    g::owner_addr = ds~load_msg_addr();
}

cell get_storage() method_id {
    return get_data();
}

int routers::must_get(cell routers, int domain) impure inline {
    (slice value, int found?) = routers.udict_get?(32, domain);
    throw_unless(error::router_not_found, found?);
    return value~load_uint(256);
}

() validate_origin_sender(int origin, int sender) impure inline {
    int router_addr = g::routers.routers::must_get(origin);
    throw_unless(
        error::unknown_router,
        sender == router_addr
    );
}

(int, slice, slice) handle_params::unpack_checked(slice in_msg_body) impure inline {
    int origin = in_msg_body~load_uint(32);
    int sender = in_msg_body~load_uint(256);
    slice response_addr = in_msg_body~load_msg_addr();
    validate_origin_sender(origin, sender);
    slice message_body = in_msg_body~load_ref_slice();
    slice recipient_addr = build_addr(0, message_body~load_uint(256));
    int amount = message_body~load_uint(256);
    in_msg_body.end_parse();
    return (amount, recipient_addr, response_addr);
 }

(int,
 int,
 int,
 cell,
 cell,
 slice
) burn_params::unpack_checked(slice in_msg_body) impure inline {
    int amount = in_msg_body~load_coins();
    slice sender_addr = in_msg_body~load_msg_addr();
    slice hyp_payload = in_msg_body~load_ref_slice();
    in_msg_body.end_parse();

    int destination = hyp_payload~load_uint(32);
    int recipient = hyp_payload~load_uint(256);
    cell hook_metadata = hyp_payload~load_ref();
    hyp_payload.end_parse();

    cell hook_addr = null();
    return (destination, recipient, amount, hook_metadata, hook_addr, sender_addr);
}

(int,
 int,
 int,
 cell,
 cell,
 slice
) transfer_params::unpack_checked(slice in_msg_body) impure inline {
    int amount = in_msg_body~load_coins();
    slice sender_addr = in_msg_body~load_msg_addr();
    throw_unless(error::invalid_body, in_msg_body~load_uint(1));
    slice payload = in_msg_body~load_ref_slice();
    in_msg_body.end_parse();

    int destination = payload~load_uint(32);
    int recipient = payload~load_uint(256);
    cell hook_metadata = payload~load_maybe_ref();
    cell hook_addr = payload~load_maybe_ref();
    payload.end_parse();
    return (destination, recipient, amount, hook_metadata, hook_addr, sender_addr);
}

() op_handler::manage_routers(
    int op, 
    slice in_msg_body
) impure inline {
    if (op == op::set_router) {
        throw_unless(
            error::unauthorized_sender, 
            equal_slices(g::msg_sender, g::owner_addr)
        );
        int domain = in_msg_body~load_uint(32);
        int router_addr = in_msg_body~load_uint(256);
        in_msg_body.end_parse();
        g::routers~udict_set_builder(32, domain, begin_cell().store_uint(router_addr, 256));
        send_change(g::msg_sender, op::set_router, g::query_id, send_mode::carry_remaining_value);
        store_globals();
        throw(0);
    }
}

() op_handler::get_ism(
    int op, 
    slice in_msg_body
) impure inline {
    if (op == op::recipient::get_ism) {
        
        cell body = begin_cell()
            .store_uint(op::recipient::get_ism::answer, 32)
            .store_uint(g::query_id, 64)
            .store_slice(g::ism_addr)
            .store_slice(in_msg_body)
            .end_cell();
        
        builder msg = build_message(g::msg_sender, 0, true, null(), body);
        send_raw_message(msg.end_cell(), send_mode::carry_remaining_value);
        throw(0);
    }
}

() transfer_remote(
    int destination,
    int recipient,
    int amount,
    cell hook_metadata,
    cell hook_addr,
    int reserve_amount,
    slice response_addr
) impure inline_ref {
    if (null?(hook_metadata)) {
        hook_metadata = standard_metadata::new(destination, response_addr).end_cell();
    }
    cell token_message = token_message::new(recipient, amount);
    int router_addr = g::routers.routers::must_get(destination);
    cell dispatch_body = serialize_dispatch_body(
        g::query_id, destination, router_addr, token_message, hook_metadata);

    builder msg = build_message(
        g::mailbox_addr,
        0,
        true,
        null(),
        dispatch_body
    );
    raw_reserve(storagefee() + reserve_amount, reserve_mode::balance_plus_this_amount);
    send_raw_message(msg.end_cell(), send_mode::carry_remaining_balance);
}