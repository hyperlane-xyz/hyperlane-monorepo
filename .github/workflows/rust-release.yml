name: Rust Agent Release

on:
  push:
    branches:
      - main
    paths:
      - 'rust/main/**'
      - '.github/workflows/rust-release.yml'
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Create a pre-release instead of a stable release'
        required: false
        type: boolean
        default: false
      prerelease_suffix:
        description: 'Custom prerelease suffix (e.g., "beta.1", "rc.1", "alpha.2"). Leave empty to auto-generate.'
        required: false
        type: string
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  check-release-status:
    name: Check Release Status
    runs-on: depot-ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
      should_release: ${{ steps.check_version.outputs.should_release }}
      current_version: ${{ steps.check_version.outputs.current_version }}
      latest_version: ${{ steps.check_version.outputs.latest_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if there are changes since last release
        id: check_changes
        working-directory: ./rust/main
        run: |
          # Get latest agents-v* tag
          LATEST_TAG=$(git tag -l "agents-v*" --sort=-version:refname | grep -E "^agents-v[0-9]+\.[0-9]+\.[0-9]+$" | head -1)

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous release found"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            # Check if there are commits to rust/main since last release
            COMMITS_SINCE=$(git log "$LATEST_TAG"..HEAD --oneline -- . | wc -l)
            echo "Commits since $LATEST_TAG: $COMMITS_SINCE"

            if [ "$COMMITS_SINCE" -gt 0 ]; then
              echo "Found $COMMITS_SINCE commit(s) since last release"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "No commits since last release"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi
      - name: Check if version changed (for publish decision)
        id: check_version
        working-directory: ./rust/main
        run: |
          # Get current version from Cargo.toml workspace.package.version
          CURRENT_VERSION=$(grep -A 10 '^\[workspace\.package\]' Cargo.toml | grep '^version = ' | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current workspace version: $CURRENT_VERSION"

          # Get latest agents-v* tag
          LATEST_TAG=$(git tag -l "agents-v*" --sort=-version:refname | grep -E "^agents-v[0-9]+\.[0-9]+\.[0-9]+$" | head -1)

          if [ -z "$LATEST_TAG" ]; then
            echo "latest_version=" >> $GITHUB_OUTPUT
            echo "No previous release tag found, will create first release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/agents-v//')
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "Latest released version: $LATEST_VERSION"

            if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
              echo "Version has changed ($LATEST_VERSION -> $CURRENT_VERSION)"
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "Version unchanged"
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi

  release-pr:
    name: Update Release PR
    runs-on: depot-ubuntu-latest
    needs: check-release-status
    if: |
      (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !inputs.prerelease)) &&
      needs.check-release-status.outputs.has_changes == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable
      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff
      - name: Determine next version from conventional commits
        id: next_version
        working-directory: ./rust/main
        env:
          CURRENT_VERSION: ${{ needs.check-release-status.outputs.current_version }}
        run: |
          # Get commits since last release
          LATEST_TAG=$(git tag -l "agents-v*" --sort=-version:refname | grep -E "^agents-v[0-9]+\.[0-9]+\.[0-9]+$" | head -1)

          if [ -z "$LATEST_TAG" ]; then
            COMMITS=$(git log --oneline --no-merges -- .)
          else
            COMMITS=$(git log "${LATEST_TAG}..HEAD" --oneline --no-merges -- .)
          fi

          # Parse current version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Analyze commits for conventional commit types
          HAS_BREAKING=false
          HAS_FEAT=false
          HAS_FIX=false

          while IFS= read -r commit; do
            if echo "$commit" | grep -qE "^[a-f0-9]+ [a-z]+(\(.+\))?!:"; then
              HAS_BREAKING=true
            elif echo "$commit" | grep -qE "^[a-f0-9]+ feat(\(.+\))?:"; then
              HAS_FEAT=true
            elif echo "$commit" | grep -qE "^[a-f0-9]+ fix(\(.+\))?:"; then
              HAS_FIX=true
            fi

            # Check commit body for BREAKING CHANGE
            COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
            if git show -s --format=%B "$COMMIT_HASH" | grep -q "BREAKING CHANGE:"; then
              HAS_BREAKING=true
            fi
          done <<< "$COMMITS"

          # Determine version bump
          if [ "$HAS_BREAKING" = true ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            BUMP_TYPE="major"
          elif [ "$HAS_FEAT" = true ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
            BUMP_TYPE="minor"
          elif [ "$HAS_FIX" = true ]; then
            PATCH=$((PATCH + 1))
            BUMP_TYPE="patch"
          else
            # Default to patch for any other changes
            PATCH=$((PATCH + 1))
            BUMP_TYPE="patch"
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Next version: $NEW_VERSION ($BUMP_TYPE bump from $CURRENT_VERSION)"
      - name: Generate changelog
        id: changelog
        working-directory: ./rust/main
        env:
          NEW_VERSION: ${{ steps.next_version.outputs.new_version }}
        run: |
          # Generate changelog for commits since last release
          LATEST_TAG=$(git tag -l "agents-v*" --sort=-version:refname | grep -E "^agents-v[0-9]+\.[0-9]+\.[0-9]+$" | head -1)

          if [ -z "$LATEST_TAG" ]; then
            CHANGELOG=$(git-cliff --config cliff.toml --unreleased --strip all)
          else
            CHANGELOG=$(git-cliff --config cliff.toml "${LATEST_TAG}..HEAD" --strip all)
          fi

          # Save changelog to file for PR body
          echo "$CHANGELOG" > /tmp/changelog.md

          # Also output for GitHub Actions
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
      - name: Update version files
        working-directory: ./rust/main
        env:
          NEW_VERSION: ${{ steps.next_version.outputs.new_version }}
        run: |
          # Update workspace version in Cargo.toml
          # Use awk to find [workspace.package] section and update version within it
          awk -v new_version="$NEW_VERSION" '
            /^\[workspace\.package\]/ { in_workspace=1 }
            /^\[/ && !/^\[workspace\.package\]/ { in_workspace=0 }
            in_workspace && /^version = / {
              print "version = \"" new_version "\""
              next
            }
            { print }
          ' Cargo.toml > Cargo.toml.new
          mv Cargo.toml.new Cargo.toml
          echo "Updated Cargo.toml workspace version to $NEW_VERSION"

          # Update Cargo.lock in rust/main
          cargo update --workspace --offline 2>/dev/null || cargo update --workspace
          echo "Updated rust/main/Cargo.lock"

          # Update Cargo.lock in rust/sealevel
          cd ../sealevel
          cargo update --workspace --offline 2>/dev/null || cargo update --workspace
          echo "Updated rust/sealevel/Cargo.lock"
          cd ../main

          # Prepend new version to CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            CURRENT_CHANGELOG=$(cat CHANGELOG.md)
          else
            CURRENT_CHANGELOG=""
          fi

          cat > CHANGELOG.md <<EOF
          # Changelog

          ## [$NEW_VERSION] - $(date +%Y-%m-%d)

          $(cat /tmp/changelog.md)

          $CURRENT_CHANGELOG
          EOF

          echo "Updated CHANGELOG.md"
      - name: Create or update release PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.next_version.outputs.new_version }}
          BUMP_TYPE: ${{ steps.next_version.outputs.bump_type }}
          CHANGELOG: ${{ steps.changelog.outputs.changelog }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          BRANCH_NAME="release-agents-v${NEW_VERSION}"

          # Create branch from current HEAD (which is main)
          git checkout -B "$BRANCH_NAME"

          # Stage changes
          git add rust/main/CHANGELOG.md rust/main/Cargo.toml rust/main/Cargo.lock rust/sealevel/Cargo.lock

          # Commit changes
          git commit -m "release: agents v${NEW_VERSION}

          This is a $BUMP_TYPE version bump for the Hyperlane agents.

          Changes will be released as agents-v${NEW_VERSION} after this PR is merged."

          # Force push to obliterate any existing branch
          git push -f origin "$BRANCH_NAME"

          # Create or update PR
          PR_BODY="## Release agents v${NEW_VERSION}

          This PR prepares the release of Hyperlane agents version **${NEW_VERSION}** (${BUMP_TYPE} bump).

          ### What's Changed

          ${CHANGELOG}

          ---

          Once this PR is merged, the [\`rust-release.yml\`](https://github.com/${{ github.repository }}/blob/main/.github/workflows/rust-release.yml) workflow will automatically:
          - Create a GitHub release with tag \`agents-v${NEW_VERSION}\`
          - Trigger the build of release binaries

          🤖 This PR was automatically created by the release workflow."

          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number' 2>/dev/null || echo "")

          if [ -n "$EXISTING_PR" ]; then
            echo "Updating existing PR #$EXISTING_PR"
            gh pr edit "$EXISTING_PR" \
              --title "release: agents v${NEW_VERSION}" \
              --body "$PR_BODY"
            echo "Updated PR: $(gh pr view $EXISTING_PR --json url --jq .url)"
          else
            echo "Creating new draft PR"
            gh pr create \
              --title "release: agents v${NEW_VERSION}" \
              --body "$PR_BODY" \
              --base main \
              --head "$BRANCH_NAME" \
              --label "release" \
              --draft
            PR_URL=$(gh pr list --head "$BRANCH_NAME" --json url --jq '.[0].url')
            echo "Created draft PR: $PR_URL"
          fi
      - name: Summary
        if: always()
        env:
          NEW_VERSION: ${{ steps.next_version.outputs.new_version }}
        run: |
          echo "### Release PR for agents v${NEW_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release PR has been created/updated." >> $GITHUB_STEP_SUMMARY
          echo "Once merged, the release will be published automatically." >> $GITHUB_STEP_SUMMARY

  publish:
    name: Publish Release
    runs-on: depot-ubuntu-latest
    needs: check-release-status
    if: |
      github.ref == 'refs/heads/main' &&
      ((github.event_name == 'workflow_dispatch' && inputs.prerelease) ||
       (github.event_name == 'push' && needs.check-release-status.outputs.should_release == 'true'))
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff
      - name: Determine version and create release
        working-directory: ./rust/main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IS_PRERELEASE: ${{ github.event_name == 'workflow_dispatch' && inputs.prerelease }}
          PRERELEASE_SUFFIX: ${{ inputs.prerelease_suffix }}
          BASE_VERSION: ${{ needs.check-release-status.outputs.current_version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Determine final version based on release type
          if [ "$IS_PRERELEASE" = "true" ]; then
            # Pre-release: append suffix
            if [ -n "$PRERELEASE_SUFFIX" ]; then
              SUFFIX="$PRERELEASE_SUFFIX"
            else
              # Auto-generate beta.N
              LAST_BETA=$(git tag -l "agents-v${BASE_VERSION}-beta.*" | sort -V | tail -1)
              if [ -z "$LAST_BETA" ]; then
                SUFFIX="beta.1"
              else
                BETA_NUM=$(echo "$LAST_BETA" | sed 's/.*beta\.\([0-9]*\)/\1/')
                SUFFIX="beta.$((BETA_NUM + 1))"
              fi
            fi
            VERSION="${BASE_VERSION}-${SUFFIX}"
            TITLE="Agents $VERSION (Pre-release)"
            PRERELEASE_FLAG="--prerelease"
            RELEASE_TYPE="Pre-release"
          else
            # Stable release
            VERSION="$BASE_VERSION"
            TITLE="Agents $VERSION"
            PRERELEASE_FLAG=""
            RELEASE_TYPE="Release"
          fi

          TAG_NAME="agents-v${VERSION}"
          echo "Creating $RELEASE_TYPE: $TAG_NAME"

          # Generate changelog
          PREV_TAG=$(git describe --tags --abbrev=0 --match "agents-v*" 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git-cliff --config cliff.toml --unreleased --strip all)
          else
            CHANGELOG=$(git-cliff --config cliff.toml --latest --strip all)
          fi

          # Add warning for pre-releases
          if [ "$IS_PRERELEASE" = "true" ]; then
            CHANGELOG="⚠️ **This is a pre-release version.**"$'\n\n'"${CHANGELOG}"
          fi

          # Create tag and GitHub release
          git tag -a "$TAG_NAME" -m "$RELEASE_TYPE $TAG_NAME"
          git push origin "$TAG_NAME"

          gh release create "$TAG_NAME" \
            --title "$TITLE" \
            --notes "$CHANGELOG" \
            $PRERELEASE_FLAG \
            --repo "${{ github.repository }}"

          echo "$RELEASE_TYPE $TAG_NAME published successfully!" >> $GITHUB_STEP_SUMMARY
          [ "$IS_PRERELEASE" = "true" ] && echo "This is marked as a pre-release on GitHub." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Binary artifacts will be built automatically by the agent-release-artifacts workflow." >> $GITHUB_STEP_SUMMARY
