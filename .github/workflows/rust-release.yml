name: Rust Agent Release

on:
  push:
    branches:
      - main
    paths:
      - 'rust/main/**'
      - '.github/workflows/rust-release.yml'
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Create a pre-release instead of a stable release'
        required: false
        type: boolean
        default: false
      prerelease_suffix:
        description: 'Custom prerelease suffix (e.g., "beta.1", "rc.1", "alpha.2"). Leave empty to auto-generate.'
        required: false
        type: string
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  release-pr:
    name: Update Release PR
    runs-on: depot-ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !inputs.prerelease)
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: ~/.cargo/registry/index
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-registry-
      - name: Install release-plz
        run: cargo install release-plz --locked
      - name: Run release-plz
        working-directory: ./rust/main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          release-plz release-pr \
            --git-token "$GITHUB_TOKEN" \
            --backend github \
            --repo-url "${{ github.repository }}"
      - name: Summary
        if: always()
        run: |
          echo "Release PR workflow completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "If a release PR was created, it will appear in the Pull Requests tab." >> $GITHUB_STEP_SUMMARY
          echo "Once merged, the release will be published automatically." >> $GITHUB_STEP_SUMMARY

  publish:
    name: Publish Release
    runs-on: depot-ubuntu-latest
    if: |
      (github.event_name == 'push' &&
       github.ref == 'refs/heads/main' &&
       contains(github.event.head_commit.message, 'chore: release')) ||
      (github.event_name == 'workflow_dispatch' && inputs.prerelease)
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: ~/.cargo/registry/index
          key: cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-registry-
      - name: Install git-cliff
        run: cargo install git-cliff --locked
      - name: Determine version and create release
        working-directory: ./rust/main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IS_PRERELEASE: ${{ github.event_name == 'workflow_dispatch' && inputs.prerelease }}
          PRERELEASE_SUFFIX: ${{ inputs.prerelease_suffix }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Get base version from Cargo.toml
          BASE_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')

          # Determine final version based on release type
          if [ "$IS_PRERELEASE" = "true" ]; then
            # Pre-release: append suffix
            if [ -n "$PRERELEASE_SUFFIX" ]; then
              SUFFIX="$PRERELEASE_SUFFIX"
            else
              # Auto-generate beta.N
              LAST_BETA=$(git tag -l "agents-v${BASE_VERSION}-beta.*" | sort -V | tail -1)
              if [ -z "$LAST_BETA" ]; then
                SUFFIX="beta.1"
              else
                BETA_NUM=$(echo "$LAST_BETA" | sed 's/.*beta\.\([0-9]*\)/\1/')
                SUFFIX="beta.$((BETA_NUM + 1))"
              fi
            fi
            VERSION="${BASE_VERSION}-${SUFFIX}"
            TITLE="Agents $VERSION (Pre-release)"
            PRERELEASE_FLAG="--prerelease"
            RELEASE_TYPE="Pre-release"
          else
            # Stable release
            VERSION="$BASE_VERSION"
            TITLE="Agents $VERSION"
            PRERELEASE_FLAG=""
            RELEASE_TYPE="Release"
          fi

          TAG_NAME="agents-v${VERSION}"
          echo "Creating $RELEASE_TYPE: $TAG_NAME"

          # Generate changelog
          PREV_TAG=$(git describe --tags --abbrev=0 --match "agents-v*" 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git-cliff --config cliff.toml --unreleased --strip all)
          else
            CHANGELOG=$(git-cliff --config cliff.toml --latest --strip all)
          fi

          # Add warning for pre-releases
          if [ "$IS_PRERELEASE" = "true" ]; then
            CHANGELOG="⚠️ **This is a pre-release version.**"$'\n\n'"${CHANGELOG}"
          fi

          # Create tag and GitHub release
          git tag -a "$TAG_NAME" -m "$RELEASE_TYPE $TAG_NAME"
          git push origin "$TAG_NAME"

          gh release create "$TAG_NAME" \
            --title "$TITLE" \
            --notes "$CHANGELOG" \
            $PRERELEASE_FLAG \
            --repo "${{ github.repository }}"

          echo "$RELEASE_TYPE $TAG_NAME published successfully!" >> $GITHUB_STEP_SUMMARY
          [ "$IS_PRERELEASE" = "true" ] && echo "This is marked as a pre-release on GitHub." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Binary artifacts will be built automatically by the agent-release-artifacts workflow." >> $GITHUB_STEP_SUMMARY
