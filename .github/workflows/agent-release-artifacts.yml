name: Agent Release Artifacts

on:
  release:
    types: [published]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: agent-release-artifacts-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag_date: ${{ steps.taggen.outputs.TAG_DATE }}
      tag_sha: ${{ steps.taggen.outputs.TAG_SHA }}
    steps:
      - name: generate tag data
        id: taggen
        run: |
          echo "TAG_DATE=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "TAG_SHA=$(echo '${{ github.sha }}' | cut -b 1-7)" >> $GITHUB_OUTPUT
  build:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - TARGET: x86_64-unknown-linux-gnu
            OS: depot-ubuntu-24.04-8
          - TARGET: x86_64-apple-darwin
            OS: depot-macos-latest
          - TARGET: aarch64-apple-darwin
            OS: depot-macos-latest
          - TARGET: x86_64-pc-windows-msvc
            OS: depot-windows-2022-4
    runs-on: ${{ matrix.OS }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: ubuntu setup
        if: ${{ matrix.OS == 'depot-ubuntu-24.04-8' }}
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf

          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          EOF
      - name: windows setup
        if: ${{ matrix.OS == 'depot-windows-2022-4' }}
        run: |
          choco install llvm -y
          $llvmPath = 'C:\Program Files\LLVM\bin'
          echo "LIBCLANG_PATH=$llvmPath" >> $env:GITHUB_ENV
      - name: setup rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.TARGET }}
      - name: setup target
        run: rustup target add ${{ matrix.TARGET }}
        working-directory: ./rust/main
      - name: build
        run: cargo build --release --target ${{ matrix.TARGET }} --bin relayer --bin scraper --bin validator
        working-directory: ./rust/main
      - name: make executable
        if: ${{ matrix.OS == 'depot-ubuntu-24.04-8' || matrix.OS == 'depot-macos-latest' }}
        run: chmod ug+x,-w relayer scraper validator
        working-directory: rust/main/target/${{ matrix.TARGET }}/release
      - name: upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.TARGET }}-${{ needs.prepare.outputs.tag_sha }}-${{ needs.prepare.outputs.tag_date }}
          path: |
            rust/main/target/${{ matrix.TARGET }}/release/relayer
            rust/main/target/${{ matrix.TARGET }}/release/relayer.exe
            rust/main/target/${{ matrix.TARGET }}/release/scraper
            rust/main/target/${{ matrix.TARGET }}/release/scraper.exe
            rust/main/target/${{ matrix.TARGET }}/release/validator
            rust/main/target/${{ matrix.TARGET }}/release/validator.exe
          if-no-files-found: error
