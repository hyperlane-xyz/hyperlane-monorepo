/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../../common.js';

export interface FxBaseRootTunnelInterface extends utils.Interface {
  functions: {
    'SEND_MESSAGE_EVENT_SIG()': FunctionFragment;
    'checkpointManager()': FunctionFragment;
    'fxChildTunnel()': FunctionFragment;
    'fxRoot()': FunctionFragment;
    'processedExits(bytes32)': FunctionFragment;
    'receiveMessage(bytes)': FunctionFragment;
    'setFxChildTunnel(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'SEND_MESSAGE_EVENT_SIG'
      | 'SEND_MESSAGE_EVENT_SIG()'
      | 'checkpointManager'
      | 'checkpointManager()'
      | 'fxChildTunnel'
      | 'fxChildTunnel()'
      | 'fxRoot'
      | 'fxRoot()'
      | 'processedExits'
      | 'processedExits(bytes32)'
      | 'receiveMessage'
      | 'receiveMessage(bytes)'
      | 'setFxChildTunnel'
      | 'setFxChildTunnel(address)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'SEND_MESSAGE_EVENT_SIG',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'SEND_MESSAGE_EVENT_SIG()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpointManager',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpointManager()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'fxChildTunnel',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'fxChildTunnel()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'fxRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fxRoot()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'processedExits',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'processedExits(bytes32)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveMessage',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveMessage(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setFxChildTunnel',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setFxChildTunnel(address)',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'SEND_MESSAGE_EVENT_SIG',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'SEND_MESSAGE_EVENT_SIG()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'checkpointManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'checkpointManager()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'fxChildTunnel',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'fxChildTunnel()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'fxRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fxRoot()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'processedExits',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'processedExits(bytes32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveMessage(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFxChildTunnel',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFxChildTunnel(address)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface FxBaseRootTunnel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FxBaseRootTunnelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<[string]>;

    'SEND_MESSAGE_EVENT_SIG()'(overrides?: CallOverrides): Promise<[string]>;

    checkpointManager(overrides?: CallOverrides): Promise<[string]>;

    'checkpointManager()'(overrides?: CallOverrides): Promise<[string]>;

    fxChildTunnel(overrides?: CallOverrides): Promise<[string]>;

    'fxChildTunnel()'(overrides?: CallOverrides): Promise<[string]>;

    fxRoot(overrides?: CallOverrides): Promise<[string]>;

    'fxRoot()'(overrides?: CallOverrides): Promise<[string]>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'processedExits(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'receiveMessage(bytes)'(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setFxChildTunnel(address)'(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

  'SEND_MESSAGE_EVENT_SIG()'(overrides?: CallOverrides): Promise<string>;

  checkpointManager(overrides?: CallOverrides): Promise<string>;

  'checkpointManager()'(overrides?: CallOverrides): Promise<string>;

  fxChildTunnel(overrides?: CallOverrides): Promise<string>;

  'fxChildTunnel()'(overrides?: CallOverrides): Promise<string>;

  fxRoot(overrides?: CallOverrides): Promise<string>;

  'fxRoot()'(overrides?: CallOverrides): Promise<string>;

  processedExits(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  'processedExits(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  receiveMessage(
    inputData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'receiveMessage(bytes)'(
    inputData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setFxChildTunnel(
    _fxChildTunnel: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setFxChildTunnel(address)'(
    _fxChildTunnel: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

    'SEND_MESSAGE_EVENT_SIG()'(overrides?: CallOverrides): Promise<string>;

    checkpointManager(overrides?: CallOverrides): Promise<string>;

    'checkpointManager()'(overrides?: CallOverrides): Promise<string>;

    fxChildTunnel(overrides?: CallOverrides): Promise<string>;

    'fxChildTunnel()'(overrides?: CallOverrides): Promise<string>;

    fxRoot(overrides?: CallOverrides): Promise<string>;

    'fxRoot()'(overrides?: CallOverrides): Promise<string>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'processedExits(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'receiveMessage(bytes)'(
      inputData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setFxChildTunnel(address)'(
      _fxChildTunnel: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    'SEND_MESSAGE_EVENT_SIG()'(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointManager(overrides?: CallOverrides): Promise<BigNumber>;

    'checkpointManager()'(overrides?: CallOverrides): Promise<BigNumber>;

    fxChildTunnel(overrides?: CallOverrides): Promise<BigNumber>;

    'fxChildTunnel()'(overrides?: CallOverrides): Promise<BigNumber>;

    fxRoot(overrides?: CallOverrides): Promise<BigNumber>;

    'fxRoot()'(overrides?: CallOverrides): Promise<BigNumber>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'processedExits(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'receiveMessage(bytes)'(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setFxChildTunnel(address)'(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SEND_MESSAGE_EVENT_SIG(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'SEND_MESSAGE_EVENT_SIG()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    checkpointManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'checkpointManager()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    fxChildTunnel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'fxChildTunnel()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'fxRoot()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'processedExits(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'receiveMessage(bytes)'(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setFxChildTunnel(address)'(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
