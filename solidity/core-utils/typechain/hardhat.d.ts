/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import * as Contracts from '.';
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types';
import { ethers } from 'ethers';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'IBridge',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: 'IOutbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IOutbox__factory>;
    getContractFactory(
      name: 'IOwnable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: 'ArbSys',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ArbSys__factory>;
    getContractFactory(
      name: 'CCIPReceiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CCIPReceiver__factory>;
    getContractFactory(
      name: 'IAny2EVMMessageReceiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAny2EVMMessageReceiver__factory>;
    getContractFactory(
      name: 'IRouterClient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IRouterClient__factory>;
    getContractFactory(
      name: 'Client',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Client__factory>;
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: 'ILayerZeroEndpointV2',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ILayerZeroEndpointV2__factory>;
    getContractFactory(
      name: 'IMessageLibManager',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMessageLibManager__factory>;
    getContractFactory(
      name: 'IMessagingChannel',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMessagingChannel__factory>;
    getContractFactory(
      name: 'IMessagingComposer',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMessagingComposer__factory>;
    getContractFactory(
      name: 'IMessagingContext',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMessagingContext__factory>;
    getContractFactory(
      name: 'ILayerZeroEndpoint',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ILayerZeroEndpoint__factory>;
    getContractFactory(
      name: 'ILayerZeroUserApplicationConfig',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ILayerZeroUserApplicationConfig__factory>;
    getContractFactory(
      name: 'Ownable2StepUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Ownable2StepUpgradeable__factory>;
    getContractFactory(
      name: 'OwnableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: 'IERC1271Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1271Upgradeable__factory>;
    getContractFactory(
      name: 'IERC4906Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC4906Upgradeable__factory>;
    getContractFactory(
      name: 'Initializable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: 'ERC20Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: 'IERC20MetadataUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: 'IERC20Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: 'ERC721Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: 'ERC721EnumerableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: 'ERC721URIStorageUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC721URIStorageUpgradeable__factory>;
    getContractFactory(
      name: 'IERC721EnumerableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: 'IERC721MetadataUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: 'IERC721ReceiverUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: 'IERC721Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: 'ContextUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: 'ERC165Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: 'IERC165Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: 'AccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: 'IAccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: 'CrossChainEnabledPolygonChild',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CrossChainEnabledPolygonChild__factory>;
    getContractFactory(
      name: 'TimelockController',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TimelockController__factory>;
    getContractFactory(
      name: 'IERC1822Proxiable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: 'IERC1967',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: 'IERC4626',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC4626__factory>;
    getContractFactory(
      name: 'IBeacon',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: 'ERC1967Proxy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: 'ERC1967Upgrade',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: 'Proxy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: 'ProxyAdmin',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: 'ITransparentUpgradeableProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ITransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: 'TransparentUpgradeableProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: 'Pausable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: 'IERC1155Receiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: 'ERC4626',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC4626__factory>;
    getContractFactory(
      name: 'IERC20Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: 'IERC20Permit',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'ERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: 'ERC721Enumerable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: 'IERC721Enumerable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: 'IERC721Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: 'IERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: 'IERC721Receiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: 'IBridge',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: 'IOutbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IOutbox__factory>;
    getContractFactory(
      name: 'ICrossDomainMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICrossDomainMessenger__factory>;
    getContractFactory(
      name: 'IFxMessageProcessor',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IFxMessageProcessor__factory>;
    getContractFactory(
      name: 'AttributeCheckpointFraud',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AttributeCheckpointFraud__factory>;
    getContractFactory(
      name: 'ECDSAServiceManagerBase',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ECDSAServiceManagerBase__factory>;
    getContractFactory(
      name: 'ECDSAStakeRegistry',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ECDSAStakeRegistry__factory>;
    getContractFactory(
      name: 'ECDSAStakeRegistryStorage',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ECDSAStakeRegistryStorage__factory>;
    getContractFactory(
      name: 'HyperlaneServiceManager',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HyperlaneServiceManager__factory>;
    getContractFactory(
      name: 'CheckpointFraudProofs',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CheckpointFraudProofs__factory>;
    getContractFactory(
      name: 'GasRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.GasRouter__factory>;
    getContractFactory(
      name: 'MailboxClient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MailboxClient__factory>;
    getContractFactory(
      name: 'Router',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: 'ERC5164Hook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC5164Hook__factory>;
    getContractFactory(
      name: 'StaticAggregationHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticAggregationHook__factory>;
    getContractFactory(
      name: 'StaticAggregationHookFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticAggregationHookFactory__factory>;
    getContractFactory(
      name: 'ArbL2ToL1Hook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ArbL2ToL1Hook__factory>;
    getContractFactory(
      name: 'CCIPHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CCIPHook__factory>;
    getContractFactory(
      name: 'DefaultHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DefaultHook__factory>;
    getContractFactory(
      name: 'InterchainGasPaymaster',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.InterchainGasPaymaster__factory>;
    getContractFactory(
      name: 'StorageGasOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StorageGasOracle__factory>;
    getContractFactory(
      name: 'LayerZeroV1Hook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LayerZeroV1Hook__factory>;
    getContractFactory(
      name: 'LayerZeroV2Hook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LayerZeroV2Hook__factory>;
    getContractFactory(
      name: 'AbstractMessageIdAuthHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractMessageIdAuthHook__factory>;
    getContractFactory(
      name: 'AbstractPostDispatchHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractPostDispatchHook__factory>;
    getContractFactory(
      name: 'StandardHookMetadata',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StandardHookMetadata__factory>;
    getContractFactory(
      name: 'MerkleTreeHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MerkleTreeHook__factory>;
    getContractFactory(
      name: 'OPL2ToL1Hook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OPL2ToL1Hook__factory>;
    getContractFactory(
      name: 'OPStackHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OPStackHook__factory>;
    getContractFactory(
      name: 'PausableHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PausableHook__factory>;
    getContractFactory(
      name: 'PolygonPosHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PolygonPosHook__factory>;
    getContractFactory(
      name: 'ProtocolFee',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ProtocolFee__factory>;
    getContractFactory(
      name: 'AmountRoutingHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AmountRoutingHook__factory>;
    getContractFactory(
      name: 'DestinationRecipientRoutingHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DestinationRecipientRoutingHook__factory>;
    getContractFactory(
      name: 'DomainRoutingHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DomainRoutingHook__factory>;
    getContractFactory(
      name: 'FallbackDomainRoutingHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.FallbackDomainRoutingHook__factory>;
    getContractFactory(
      name: 'RateLimitedHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.RateLimitedHook__factory>;
    getContractFactory(
      name: 'IRemoteChallenger',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IRemoteChallenger__factory>;
    getContractFactory(
      name: 'IAVSDirectory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAVSDirectory__factory>;
    getContractFactory(
      name: 'IDelegationManager',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IDelegationManager__factory>;
    getContractFactory(
      name: 'IECDSAStakeRegistryEventsAndErrors',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IECDSAStakeRegistryEventsAndErrors__factory>;
    getContractFactory(
      name: 'IPaymentCoordinator',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IPaymentCoordinator__factory>;
    getContractFactory(
      name: 'IServiceManager',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IServiceManager__factory>;
    getContractFactory(
      name: 'IServiceManagerUI',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IServiceManagerUI__factory>;
    getContractFactory(
      name: 'ISlasher',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISlasher__factory>;
    getContractFactory(
      name: 'IStrategy',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: 'IMessageDispatcher',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMessageDispatcher__factory>;
    getContractFactory(
      name: 'IPostDispatchHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IPostDispatchHook__factory>;
    getContractFactory(
      name: 'IGasOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IGasOracle__factory>;
    getContractFactory(
      name: 'IInterchainGasPaymaster',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IInterchainGasPaymaster__factory>;
    getContractFactory(
      name: 'IInterchainSecurityModule',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IInterchainSecurityModule__factory>;
    getContractFactory(
      name: 'ISpecifiesInterchainSecurityModule',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISpecifiesInterchainSecurityModule__factory>;
    getContractFactory(
      name: 'ILiquidityLayerMessageRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ILiquidityLayerMessageRecipient__factory>;
    getContractFactory(
      name: 'ILiquidityLayerRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ILiquidityLayerRouter__factory>;
    getContractFactory(
      name: 'IMailbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMailbox__factory>;
    getContractFactory(
      name: 'IMessageRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMessageRecipient__factory>;
    getContractFactory(
      name: 'IRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IRouter__factory>;
    getContractFactory(
      name: 'IAggregationIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAggregationIsm__factory>;
    getContractFactory(
      name: 'ICcipReadIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICcipReadIsm__factory>;
    getContractFactory(
      name: 'IMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMultisigIsm__factory>;
    getContractFactory(
      name: 'IRoutingIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IRoutingIsm__factory>;
    getContractFactory(
      name: 'IStaticWeightedMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IStaticWeightedMultisigIsm__factory>;
    getContractFactory(
      name: 'IThresholdAddressFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IThresholdAddressFactory__factory>;
    getContractFactory(
      name: 'IValidatorAnnounce',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IValidatorAnnounce__factory>;
    getContractFactory(
      name: 'ICrossDomainMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICrossDomainMessenger__factory>;
    getContractFactory(
      name: 'IL1CrossDomainMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IL1CrossDomainMessenger__factory>;
    getContractFactory(
      name: 'IL2CrossDomainMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IL2CrossDomainMessenger__factory>;
    getContractFactory(
      name: 'IOptimismPortal',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IOptimismPortal__factory>;
    getContractFactory(
      name: 'AbstractAggregationIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractAggregationIsm__factory>;
    getContractFactory(
      name: 'StaticAggregationIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticAggregationIsm__factory>;
    getContractFactory(
      name: 'StaticAggregationIsmFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticAggregationIsmFactory__factory>;
    getContractFactory(
      name: 'StorageAggregationIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StorageAggregationIsm__factory>;
    getContractFactory(
      name: 'StorageAggregationIsmFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StorageAggregationIsmFactory__factory>;
    getContractFactory(
      name: 'AbstractCcipReadIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractCcipReadIsm__factory>;
    getContractFactory(
      name: 'TestCcipReadIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestCcipReadIsm__factory>;
    getContractFactory(
      name: 'AbstractMessageIdAuthorizedIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractMessageIdAuthorizedIsm__factory>;
    getContractFactory(
      name: 'ArbL2ToL1Ism',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ArbL2ToL1Ism__factory>;
    getContractFactory(
      name: 'CCIPIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CCIPIsm__factory>;
    getContractFactory(
      name: 'ERC5164Ism',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC5164Ism__factory>;
    getContractFactory(
      name: 'LayerZeroV2Ism',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LayerZeroV2Ism__factory>;
    getContractFactory(
      name: 'OPL2ToL1Ism',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OPL2ToL1Ism__factory>;
    getContractFactory(
      name: 'OPStackIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OPStackIsm__factory>;
    getContractFactory(
      name: 'PolygonPosIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PolygonPosIsm__factory>;
    getContractFactory(
      name: 'AbstractMerkleRootMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractMerkleRootMultisigIsm__factory>;
    getContractFactory(
      name: 'AbstractMessageIdMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractMessageIdMultisigIsm__factory>;
    getContractFactory(
      name: 'AbstractMultisig',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractMultisig__factory>;
    getContractFactory(
      name: 'AbstractMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractMultisigIsm__factory>;
    getContractFactory(
      name: 'AbstractStaticWeightedMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractStaticWeightedMultisigIsm__factory>;
    getContractFactory(
      name: 'AbstractMetaProxyMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractMetaProxyMultisigIsm__factory>;
    getContractFactory(
      name: 'StaticMerkleRootMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticMerkleRootMultisigIsm__factory>;
    getContractFactory(
      name: 'StaticMerkleRootMultisigIsmFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticMerkleRootMultisigIsmFactory__factory>;
    getContractFactory(
      name: 'StaticMessageIdMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticMessageIdMultisigIsm__factory>;
    getContractFactory(
      name: 'StaticMessageIdMultisigIsmFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticMessageIdMultisigIsmFactory__factory>;
    getContractFactory(
      name: 'AbstractStorageMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractStorageMultisigIsm__factory>;
    getContractFactory(
      name: 'StorageMerkleRootMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StorageMerkleRootMultisigIsm__factory>;
    getContractFactory(
      name: 'StorageMerkleRootMultisigIsmFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StorageMerkleRootMultisigIsmFactory__factory>;
    getContractFactory(
      name: 'StorageMessageIdMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StorageMessageIdMultisigIsm__factory>;
    getContractFactory(
      name: 'StorageMessageIdMultisigIsmFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StorageMessageIdMultisigIsmFactory__factory>;
    getContractFactory(
      name: 'StorageMultisigIsmFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StorageMultisigIsmFactory__factory>;
    getContractFactory(
      name: 'ValidatorAnnounce',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ValidatorAnnounce__factory>;
    getContractFactory(
      name: 'AbstractMetaProxyWeightedMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractMetaProxyWeightedMultisigIsm__factory>;
    getContractFactory(
      name: 'StaticMerkleRootWeightedMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticMerkleRootWeightedMultisigIsm__factory>;
    getContractFactory(
      name: 'StaticMerkleRootWeightedMultisigIsmFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticMerkleRootWeightedMultisigIsmFactory__factory>;
    getContractFactory(
      name: 'StaticMessageIdWeightedMultisigIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticMessageIdWeightedMultisigIsm__factory>;
    getContractFactory(
      name: 'StaticMessageIdWeightedMultisigIsmFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticMessageIdWeightedMultisigIsmFactory__factory>;
    getContractFactory(
      name: 'NoopIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.NoopIsm__factory>;
    getContractFactory(
      name: 'PausableIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PausableIsm__factory>;
    getContractFactory(
      name: 'AbstractRoutingIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractRoutingIsm__factory>;
    getContractFactory(
      name: 'DefaultFallbackRoutingIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DefaultFallbackRoutingIsm__factory>;
    getContractFactory(
      name: 'DomainRoutingIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DomainRoutingIsm__factory>;
    getContractFactory(
      name: 'AbstractDomainRoutingIsmFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AbstractDomainRoutingIsmFactory__factory>;
    getContractFactory(
      name: 'DomainRoutingIsmFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DomainRoutingIsmFactory__factory>;
    getContractFactory(
      name: 'InterchainAccountIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.InterchainAccountIsm__factory>;
    getContractFactory(
      name: 'TrustedRelayerIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TrustedRelayerIsm__factory>;
    getContractFactory(
      name: 'AmountRoutingIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AmountRoutingIsm__factory>;
    getContractFactory(
      name: 'RateLimitedIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.RateLimitedIsm__factory>;
    getContractFactory(
      name: 'EnumerableMapEnrollment',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.EnumerableMapEnrollment__factory>;
    getContractFactory(
      name: 'Indexed',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Indexed__factory>;
    getContractFactory(
      name: 'RateLimited',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.RateLimited__factory>;
    getContractFactory(
      name: 'StaticAddressSetFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticAddressSetFactory__factory>;
    getContractFactory(
      name: 'StaticThresholdAddressSetFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticThresholdAddressSetFactory__factory>;
    getContractFactory(
      name: 'StaticWeightedValidatorSetFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.StaticWeightedValidatorSetFactory__factory>;
    getContractFactory(
      name: 'Mailbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Mailbox__factory>;
    getContractFactory(
      name: 'InterchainAccountRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.InterchainAccountRouter__factory>;
    getContractFactory(
      name: 'InterchainQueryRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.InterchainQueryRouter__factory>;
    getContractFactory(
      name: 'OwnableMulticall',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.OwnableMulticall__factory>;
    getContractFactory(
      name: 'CircleBridgeAdapter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CircleBridgeAdapter__factory>;
    getContractFactory(
      name: 'PortalAdapter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PortalAdapter__factory>;
    getContractFactory(
      name: 'ICircleMessageTransmitter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICircleMessageTransmitter__factory>;
    getContractFactory(
      name: 'ITokenMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ITokenMessenger__factory>;
    getContractFactory(
      name: 'ILiquidityLayerAdapter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ILiquidityLayerAdapter__factory>;
    getContractFactory(
      name: 'IPortalTokenBridge',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IPortalTokenBridge__factory>;
    getContractFactory(
      name: 'LiquidityLayerRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LiquidityLayerRouter__factory>;
    getContractFactory(
      name: 'MockArbBridge',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockArbBridge__factory>;
    getContractFactory(
      name: 'MockArbSys',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockArbSys__factory>;
    getContractFactory(
      name: 'MockCircleMessageTransmitter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockCircleMessageTransmitter__factory>;
    getContractFactory(
      name: 'MockCircleTokenMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockCircleTokenMessenger__factory>;
    getContractFactory(
      name: 'MockERC4626YieldSharing',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockERC4626YieldSharing__factory>;
    getContractFactory(
      name: 'MockMessageDispatcher',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockMessageDispatcher__factory>;
    getContractFactory(
      name: 'MockMessageExecutor',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockMessageExecutor__factory>;
    getContractFactory(
      name: 'MockHyperlaneEnvironment',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockHyperlaneEnvironment__factory>;
    getContractFactory(
      name: 'MockMailbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockMailbox__factory>;
    getContractFactory(
      name: 'MockOptimismMessenger',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockOptimismMessenger__factory>;
    getContractFactory(
      name: 'MockOptimismPortal',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockOptimismPortal__factory>;
    getContractFactory(
      name: 'MockPortalBridge',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockPortalBridge__factory>;
    getContractFactory(
      name: 'MockToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: 'PackageVersioned',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PackageVersioned__factory>;
    getContractFactory(
      name: 'TestAVSDirectory',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestAVSDirectory__factory>;
    getContractFactory(
      name: 'TestDelegationManager',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestDelegationManager__factory>;
    getContractFactory(
      name: 'TestHyperlaneServiceManager',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestHyperlaneServiceManager__factory>;
    getContractFactory(
      name: 'TestPaymentCoordinator',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestPaymentCoordinator__factory>;
    getContractFactory(
      name: 'TestSlasher',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestSlasher__factory>;
    getContractFactory(
      name: 'ERC20Test',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20Test__factory>;
    getContractFactory(
      name: 'FiatTokenTest',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.FiatTokenTest__factory>;
    getContractFactory(
      name: 'XERC20LockboxTest',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.XERC20LockboxTest__factory>;
    getContractFactory(
      name: 'XERC20Test',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.XERC20Test__factory>;
    getContractFactory(
      name: 'XERC20VSTest',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.XERC20VSTest__factory>;
    getContractFactory(
      name: 'ERC4626Test',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC4626Test__factory>;
    getContractFactory(
      name: 'ERC721Test',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC721Test__factory>;
    getContractFactory(
      name: 'LightTestRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LightTestRecipient__factory>;
    getContractFactory(
      name: 'TestGasRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestGasRouter__factory>;
    getContractFactory(
      name: 'TestInterchainGasPaymaster',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestInterchainGasPaymaster__factory>;
    getContractFactory(
      name: 'TestIsm',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestIsm__factory>;
    getContractFactory(
      name: 'LayerZeroTreasuryMock',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LayerZeroTreasuryMock__factory>;
    getContractFactory(
      name: 'TestLiquidityLayerMessageRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestLiquidityLayerMessageRecipient__factory>;
    getContractFactory(
      name: 'TestMailbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestMailbox__factory>;
    getContractFactory(
      name: 'TestMerkle',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestMerkle__factory>;
    getContractFactory(
      name: 'TestMerkleTreeHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestMerkleTreeHook__factory>;
    getContractFactory(
      name: 'TestMessage',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestMessage__factory>;
    getContractFactory(
      name: 'TestPostDispatchHook',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestPostDispatchHook__factory>;
    getContractFactory(
      name: 'TestQuery',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestQuery__factory>;
    getContractFactory(
      name: 'TestQuerySender',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestQuerySender__factory>;
    getContractFactory(
      name: 'TestRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestRecipient__factory>;
    getContractFactory(
      name: 'TestRemoteChallenger',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestRemoteChallenger__factory>;
    getContractFactory(
      name: 'TestRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestRouter__factory>;
    getContractFactory(
      name: 'TestSendReceiver',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestSendReceiver__factory>;
    getContractFactory(
      name: 'TestTokenRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TestTokenRecipient__factory>;
    getContractFactory(
      name: 'HypERC4626',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypERC4626__factory>;
    getContractFactory(
      name: 'HypERC4626Collateral',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypERC4626Collateral__factory>;
    getContractFactory(
      name: 'HypERC4626OwnerCollateral',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypERC4626OwnerCollateral__factory>;
    getContractFactory(
      name: 'HypERC721URICollateral',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypERC721URICollateral__factory>;
    getContractFactory(
      name: 'HypERC721URIStorage',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypERC721URIStorage__factory>;
    getContractFactory(
      name: 'HypFiatToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypFiatToken__factory>;
    getContractFactory(
      name: 'HypXERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypXERC20__factory>;
    getContractFactory(
      name: 'HypXERC20Lockbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypXERC20Lockbox__factory>;
    getContractFactory(
      name: 'WHypERC4626',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.WHypERC4626__factory>;
    getContractFactory(
      name: 'HypERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypERC20__factory>;
    getContractFactory(
      name: 'HypERC20Collateral',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypERC20Collateral__factory>;
    getContractFactory(
      name: 'HypERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypERC721__factory>;
    getContractFactory(
      name: 'HypERC721Collateral',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypERC721Collateral__factory>;
    getContractFactory(
      name: 'HypNative',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.HypNative__factory>;
    getContractFactory(
      name: 'IFiatToken',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IFiatToken__factory>;
    getContractFactory(
      name: 'IXERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IXERC20__factory>;
    getContractFactory(
      name: 'IXERC20Lockbox',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IXERC20Lockbox__factory>;
    getContractFactory(
      name: 'IXERC20VS',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IXERC20VS__factory>;
    getContractFactory(
      name: 'AmountPartition',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AmountPartition__factory>;
    getContractFactory(
      name: 'FungibleTokenRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.FungibleTokenRouter__factory>;
    getContractFactory(
      name: 'TokenRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TokenRouter__factory>;
    getContractFactory(
      name: 'Versioned',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Versioned__factory>;
    getContractFactory(
      name: 'FxBaseRootTunnel',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.FxBaseRootTunnel__factory>;
    getContractFactory(
      name: 'ICheckpointManager',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICheckpointManager__factory>;
    getContractFactory(
      name: 'IFxStateSender',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IFxStateSender__factory>;

    getContractAt(
      name: 'IBridge',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: 'IOutbox',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IOutbox>;
    getContractAt(
      name: 'IOwnable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: 'ArbSys',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ArbSys>;
    getContractAt(
      name: 'CCIPReceiver',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.CCIPReceiver>;
    getContractAt(
      name: 'IAny2EVMMessageReceiver',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAny2EVMMessageReceiver>;
    getContractAt(
      name: 'IRouterClient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IRouterClient>;
    getContractAt(
      name: 'Client',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Client>;
    getContractAt(
      name: 'IERC165',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: 'ILayerZeroEndpointV2',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ILayerZeroEndpointV2>;
    getContractAt(
      name: 'IMessageLibManager',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMessageLibManager>;
    getContractAt(
      name: 'IMessagingChannel',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMessagingChannel>;
    getContractAt(
      name: 'IMessagingComposer',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMessagingComposer>;
    getContractAt(
      name: 'IMessagingContext',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMessagingContext>;
    getContractAt(
      name: 'ILayerZeroEndpoint',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ILayerZeroEndpoint>;
    getContractAt(
      name: 'ILayerZeroUserApplicationConfig',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ILayerZeroUserApplicationConfig>;
    getContractAt(
      name: 'Ownable2StepUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Ownable2StepUpgradeable>;
    getContractAt(
      name: 'OwnableUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: 'IERC1271Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1271Upgradeable>;
    getContractAt(
      name: 'IERC4906Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC4906Upgradeable>;
    getContractAt(
      name: 'Initializable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: 'ERC20Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: 'IERC20MetadataUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: 'IERC20Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: 'ERC721Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: 'ERC721EnumerableUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    getContractAt(
      name: 'ERC721URIStorageUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC721URIStorageUpgradeable>;
    getContractAt(
      name: 'IERC721EnumerableUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    getContractAt(
      name: 'IERC721MetadataUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: 'IERC721ReceiverUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: 'IERC721Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: 'ContextUpgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: 'ERC165Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: 'IERC165Upgradeable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: 'AccessControl',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: 'IAccessControl',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: 'Ownable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: 'CrossChainEnabledPolygonChild',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.CrossChainEnabledPolygonChild>;
    getContractAt(
      name: 'TimelockController',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TimelockController>;
    getContractAt(
      name: 'IERC1822Proxiable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: 'IERC1967',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: 'IERC4626',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC4626>;
    getContractAt(
      name: 'IBeacon',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: 'ERC1967Proxy',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: 'ERC1967Upgrade',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: 'Proxy',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: 'ProxyAdmin',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: 'ITransparentUpgradeableProxy',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    getContractAt(
      name: 'TransparentUpgradeableProxy',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: 'Pausable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: 'IERC1155Receiver',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: 'ERC20',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: 'ERC4626',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC4626>;
    getContractAt(
      name: 'IERC20Metadata',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: 'IERC20Permit',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: 'ERC721',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: 'ERC721Enumerable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: 'IERC721Enumerable',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: 'IERC721Metadata',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: 'IERC721',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: 'IERC721Receiver',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: 'ERC165',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: 'IERC165',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: 'IBridge',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: 'IOutbox',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IOutbox>;
    getContractAt(
      name: 'ICrossDomainMessenger',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ICrossDomainMessenger>;
    getContractAt(
      name: 'IFxMessageProcessor',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IFxMessageProcessor>;
    getContractAt(
      name: 'AttributeCheckpointFraud',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AttributeCheckpointFraud>;
    getContractAt(
      name: 'ECDSAServiceManagerBase',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ECDSAServiceManagerBase>;
    getContractAt(
      name: 'ECDSAStakeRegistry',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ECDSAStakeRegistry>;
    getContractAt(
      name: 'ECDSAStakeRegistryStorage',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ECDSAStakeRegistryStorage>;
    getContractAt(
      name: 'HyperlaneServiceManager',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HyperlaneServiceManager>;
    getContractAt(
      name: 'CheckpointFraudProofs',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.CheckpointFraudProofs>;
    getContractAt(
      name: 'GasRouter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.GasRouter>;
    getContractAt(
      name: 'MailboxClient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MailboxClient>;
    getContractAt(
      name: 'Router',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Router>;
    getContractAt(
      name: 'ERC5164Hook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC5164Hook>;
    getContractAt(
      name: 'StaticAggregationHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticAggregationHook>;
    getContractAt(
      name: 'StaticAggregationHookFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticAggregationHookFactory>;
    getContractAt(
      name: 'ArbL2ToL1Hook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ArbL2ToL1Hook>;
    getContractAt(
      name: 'CCIPHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.CCIPHook>;
    getContractAt(
      name: 'DefaultHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.DefaultHook>;
    getContractAt(
      name: 'InterchainGasPaymaster',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.InterchainGasPaymaster>;
    getContractAt(
      name: 'StorageGasOracle',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StorageGasOracle>;
    getContractAt(
      name: 'LayerZeroV1Hook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LayerZeroV1Hook>;
    getContractAt(
      name: 'LayerZeroV2Hook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LayerZeroV2Hook>;
    getContractAt(
      name: 'AbstractMessageIdAuthHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractMessageIdAuthHook>;
    getContractAt(
      name: 'AbstractPostDispatchHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractPostDispatchHook>;
    getContractAt(
      name: 'StandardHookMetadata',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StandardHookMetadata>;
    getContractAt(
      name: 'MerkleTreeHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MerkleTreeHook>;
    getContractAt(
      name: 'OPL2ToL1Hook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.OPL2ToL1Hook>;
    getContractAt(
      name: 'OPStackHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.OPStackHook>;
    getContractAt(
      name: 'PausableHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.PausableHook>;
    getContractAt(
      name: 'PolygonPosHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.PolygonPosHook>;
    getContractAt(
      name: 'ProtocolFee',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ProtocolFee>;
    getContractAt(
      name: 'AmountRoutingHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AmountRoutingHook>;
    getContractAt(
      name: 'DestinationRecipientRoutingHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.DestinationRecipientRoutingHook>;
    getContractAt(
      name: 'DomainRoutingHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.DomainRoutingHook>;
    getContractAt(
      name: 'FallbackDomainRoutingHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.FallbackDomainRoutingHook>;
    getContractAt(
      name: 'RateLimitedHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.RateLimitedHook>;
    getContractAt(
      name: 'IRemoteChallenger',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IRemoteChallenger>;
    getContractAt(
      name: 'IAVSDirectory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAVSDirectory>;
    getContractAt(
      name: 'IDelegationManager',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IDelegationManager>;
    getContractAt(
      name: 'IECDSAStakeRegistryEventsAndErrors',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IECDSAStakeRegistryEventsAndErrors>;
    getContractAt(
      name: 'IPaymentCoordinator',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IPaymentCoordinator>;
    getContractAt(
      name: 'IServiceManager',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IServiceManager>;
    getContractAt(
      name: 'IServiceManagerUI',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IServiceManagerUI>;
    getContractAt(
      name: 'ISlasher',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ISlasher>;
    getContractAt(
      name: 'IStrategy',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: 'IMessageDispatcher',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMessageDispatcher>;
    getContractAt(
      name: 'IPostDispatchHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IPostDispatchHook>;
    getContractAt(
      name: 'IGasOracle',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IGasOracle>;
    getContractAt(
      name: 'IInterchainGasPaymaster',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IInterchainGasPaymaster>;
    getContractAt(
      name: 'IInterchainSecurityModule',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IInterchainSecurityModule>;
    getContractAt(
      name: 'ISpecifiesInterchainSecurityModule',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ISpecifiesInterchainSecurityModule>;
    getContractAt(
      name: 'ILiquidityLayerMessageRecipient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ILiquidityLayerMessageRecipient>;
    getContractAt(
      name: 'ILiquidityLayerRouter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ILiquidityLayerRouter>;
    getContractAt(
      name: 'IMailbox',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMailbox>;
    getContractAt(
      name: 'IMessageRecipient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMessageRecipient>;
    getContractAt(
      name: 'IRouter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IRouter>;
    getContractAt(
      name: 'IAggregationIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAggregationIsm>;
    getContractAt(
      name: 'ICcipReadIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ICcipReadIsm>;
    getContractAt(
      name: 'IMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IMultisigIsm>;
    getContractAt(
      name: 'IRoutingIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IRoutingIsm>;
    getContractAt(
      name: 'IStaticWeightedMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IStaticWeightedMultisigIsm>;
    getContractAt(
      name: 'IThresholdAddressFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IThresholdAddressFactory>;
    getContractAt(
      name: 'IValidatorAnnounce',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IValidatorAnnounce>;
    getContractAt(
      name: 'ICrossDomainMessenger',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ICrossDomainMessenger>;
    getContractAt(
      name: 'IL1CrossDomainMessenger',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IL1CrossDomainMessenger>;
    getContractAt(
      name: 'IL2CrossDomainMessenger',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IL2CrossDomainMessenger>;
    getContractAt(
      name: 'IOptimismPortal',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IOptimismPortal>;
    getContractAt(
      name: 'AbstractAggregationIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractAggregationIsm>;
    getContractAt(
      name: 'StaticAggregationIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticAggregationIsm>;
    getContractAt(
      name: 'StaticAggregationIsmFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticAggregationIsmFactory>;
    getContractAt(
      name: 'StorageAggregationIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StorageAggregationIsm>;
    getContractAt(
      name: 'StorageAggregationIsmFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StorageAggregationIsmFactory>;
    getContractAt(
      name: 'AbstractCcipReadIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractCcipReadIsm>;
    getContractAt(
      name: 'TestCcipReadIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestCcipReadIsm>;
    getContractAt(
      name: 'AbstractMessageIdAuthorizedIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractMessageIdAuthorizedIsm>;
    getContractAt(
      name: 'ArbL2ToL1Ism',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ArbL2ToL1Ism>;
    getContractAt(
      name: 'CCIPIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.CCIPIsm>;
    getContractAt(
      name: 'ERC5164Ism',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC5164Ism>;
    getContractAt(
      name: 'LayerZeroV2Ism',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LayerZeroV2Ism>;
    getContractAt(
      name: 'OPL2ToL1Ism',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.OPL2ToL1Ism>;
    getContractAt(
      name: 'OPStackIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.OPStackIsm>;
    getContractAt(
      name: 'PolygonPosIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.PolygonPosIsm>;
    getContractAt(
      name: 'AbstractMerkleRootMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractMerkleRootMultisigIsm>;
    getContractAt(
      name: 'AbstractMessageIdMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractMessageIdMultisigIsm>;
    getContractAt(
      name: 'AbstractMultisig',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractMultisig>;
    getContractAt(
      name: 'AbstractMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractMultisigIsm>;
    getContractAt(
      name: 'AbstractStaticWeightedMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractStaticWeightedMultisigIsm>;
    getContractAt(
      name: 'AbstractMetaProxyMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractMetaProxyMultisigIsm>;
    getContractAt(
      name: 'StaticMerkleRootMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticMerkleRootMultisigIsm>;
    getContractAt(
      name: 'StaticMerkleRootMultisigIsmFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticMerkleRootMultisigIsmFactory>;
    getContractAt(
      name: 'StaticMessageIdMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticMessageIdMultisigIsm>;
    getContractAt(
      name: 'StaticMessageIdMultisigIsmFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticMessageIdMultisigIsmFactory>;
    getContractAt(
      name: 'AbstractStorageMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractStorageMultisigIsm>;
    getContractAt(
      name: 'StorageMerkleRootMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StorageMerkleRootMultisigIsm>;
    getContractAt(
      name: 'StorageMerkleRootMultisigIsmFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StorageMerkleRootMultisigIsmFactory>;
    getContractAt(
      name: 'StorageMessageIdMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StorageMessageIdMultisigIsm>;
    getContractAt(
      name: 'StorageMessageIdMultisigIsmFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StorageMessageIdMultisigIsmFactory>;
    getContractAt(
      name: 'StorageMultisigIsmFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StorageMultisigIsmFactory>;
    getContractAt(
      name: 'ValidatorAnnounce',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ValidatorAnnounce>;
    getContractAt(
      name: 'AbstractMetaProxyWeightedMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractMetaProxyWeightedMultisigIsm>;
    getContractAt(
      name: 'StaticMerkleRootWeightedMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticMerkleRootWeightedMultisigIsm>;
    getContractAt(
      name: 'StaticMerkleRootWeightedMultisigIsmFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticMerkleRootWeightedMultisigIsmFactory>;
    getContractAt(
      name: 'StaticMessageIdWeightedMultisigIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticMessageIdWeightedMultisigIsm>;
    getContractAt(
      name: 'StaticMessageIdWeightedMultisigIsmFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticMessageIdWeightedMultisigIsmFactory>;
    getContractAt(
      name: 'NoopIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.NoopIsm>;
    getContractAt(
      name: 'PausableIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.PausableIsm>;
    getContractAt(
      name: 'AbstractRoutingIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractRoutingIsm>;
    getContractAt(
      name: 'DefaultFallbackRoutingIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.DefaultFallbackRoutingIsm>;
    getContractAt(
      name: 'DomainRoutingIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.DomainRoutingIsm>;
    getContractAt(
      name: 'AbstractDomainRoutingIsmFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AbstractDomainRoutingIsmFactory>;
    getContractAt(
      name: 'DomainRoutingIsmFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.DomainRoutingIsmFactory>;
    getContractAt(
      name: 'InterchainAccountIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.InterchainAccountIsm>;
    getContractAt(
      name: 'TrustedRelayerIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TrustedRelayerIsm>;
    getContractAt(
      name: 'AmountRoutingIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AmountRoutingIsm>;
    getContractAt(
      name: 'RateLimitedIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.RateLimitedIsm>;
    getContractAt(
      name: 'EnumerableMapEnrollment',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.EnumerableMapEnrollment>;
    getContractAt(
      name: 'Indexed',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Indexed>;
    getContractAt(
      name: 'RateLimited',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.RateLimited>;
    getContractAt(
      name: 'StaticAddressSetFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticAddressSetFactory>;
    getContractAt(
      name: 'StaticThresholdAddressSetFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticThresholdAddressSetFactory>;
    getContractAt(
      name: 'StaticWeightedValidatorSetFactory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.StaticWeightedValidatorSetFactory>;
    getContractAt(
      name: 'Mailbox',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Mailbox>;
    getContractAt(
      name: 'InterchainAccountRouter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.InterchainAccountRouter>;
    getContractAt(
      name: 'InterchainQueryRouter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.InterchainQueryRouter>;
    getContractAt(
      name: 'OwnableMulticall',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.OwnableMulticall>;
    getContractAt(
      name: 'CircleBridgeAdapter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.CircleBridgeAdapter>;
    getContractAt(
      name: 'PortalAdapter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.PortalAdapter>;
    getContractAt(
      name: 'ICircleMessageTransmitter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ICircleMessageTransmitter>;
    getContractAt(
      name: 'ITokenMessenger',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ITokenMessenger>;
    getContractAt(
      name: 'ILiquidityLayerAdapter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ILiquidityLayerAdapter>;
    getContractAt(
      name: 'IPortalTokenBridge',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IPortalTokenBridge>;
    getContractAt(
      name: 'LiquidityLayerRouter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LiquidityLayerRouter>;
    getContractAt(
      name: 'MockArbBridge',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockArbBridge>;
    getContractAt(
      name: 'MockArbSys',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockArbSys>;
    getContractAt(
      name: 'MockCircleMessageTransmitter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockCircleMessageTransmitter>;
    getContractAt(
      name: 'MockCircleTokenMessenger',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockCircleTokenMessenger>;
    getContractAt(
      name: 'MockERC4626YieldSharing',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockERC4626YieldSharing>;
    getContractAt(
      name: 'MockMessageDispatcher',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockMessageDispatcher>;
    getContractAt(
      name: 'MockMessageExecutor',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockMessageExecutor>;
    getContractAt(
      name: 'MockHyperlaneEnvironment',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockHyperlaneEnvironment>;
    getContractAt(
      name: 'MockMailbox',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockMailbox>;
    getContractAt(
      name: 'MockOptimismMessenger',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockOptimismMessenger>;
    getContractAt(
      name: 'MockOptimismPortal',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockOptimismPortal>;
    getContractAt(
      name: 'MockPortalBridge',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockPortalBridge>;
    getContractAt(
      name: 'MockToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MockToken>;
    getContractAt(
      name: 'PackageVersioned',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.PackageVersioned>;
    getContractAt(
      name: 'TestAVSDirectory',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestAVSDirectory>;
    getContractAt(
      name: 'TestDelegationManager',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestDelegationManager>;
    getContractAt(
      name: 'TestHyperlaneServiceManager',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestHyperlaneServiceManager>;
    getContractAt(
      name: 'TestPaymentCoordinator',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestPaymentCoordinator>;
    getContractAt(
      name: 'TestSlasher',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestSlasher>;
    getContractAt(
      name: 'ERC20Test',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20Test>;
    getContractAt(
      name: 'FiatTokenTest',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.FiatTokenTest>;
    getContractAt(
      name: 'XERC20LockboxTest',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.XERC20LockboxTest>;
    getContractAt(
      name: 'XERC20Test',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.XERC20Test>;
    getContractAt(
      name: 'XERC20VSTest',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.XERC20VSTest>;
    getContractAt(
      name: 'ERC4626Test',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC4626Test>;
    getContractAt(
      name: 'ERC721Test',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC721Test>;
    getContractAt(
      name: 'LightTestRecipient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LightTestRecipient>;
    getContractAt(
      name: 'TestGasRouter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestGasRouter>;
    getContractAt(
      name: 'TestInterchainGasPaymaster',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestInterchainGasPaymaster>;
    getContractAt(
      name: 'TestIsm',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestIsm>;
    getContractAt(
      name: 'LayerZeroTreasuryMock',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.LayerZeroTreasuryMock>;
    getContractAt(
      name: 'TestLiquidityLayerMessageRecipient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestLiquidityLayerMessageRecipient>;
    getContractAt(
      name: 'TestMailbox',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestMailbox>;
    getContractAt(
      name: 'TestMerkle',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestMerkle>;
    getContractAt(
      name: 'TestMerkleTreeHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestMerkleTreeHook>;
    getContractAt(
      name: 'TestMessage',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestMessage>;
    getContractAt(
      name: 'TestPostDispatchHook',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestPostDispatchHook>;
    getContractAt(
      name: 'TestQuery',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestQuery>;
    getContractAt(
      name: 'TestQuerySender',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestQuerySender>;
    getContractAt(
      name: 'TestRecipient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestRecipient>;
    getContractAt(
      name: 'TestRemoteChallenger',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestRemoteChallenger>;
    getContractAt(
      name: 'TestRouter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestRouter>;
    getContractAt(
      name: 'TestSendReceiver',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestSendReceiver>;
    getContractAt(
      name: 'TestTokenRecipient',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TestTokenRecipient>;
    getContractAt(
      name: 'HypERC4626',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypERC4626>;
    getContractAt(
      name: 'HypERC4626Collateral',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypERC4626Collateral>;
    getContractAt(
      name: 'HypERC4626OwnerCollateral',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypERC4626OwnerCollateral>;
    getContractAt(
      name: 'HypERC721URICollateral',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypERC721URICollateral>;
    getContractAt(
      name: 'HypERC721URIStorage',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypERC721URIStorage>;
    getContractAt(
      name: 'HypFiatToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypFiatToken>;
    getContractAt(
      name: 'HypXERC20',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypXERC20>;
    getContractAt(
      name: 'HypXERC20Lockbox',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypXERC20Lockbox>;
    getContractAt(
      name: 'WHypERC4626',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.WHypERC4626>;
    getContractAt(
      name: 'HypERC20',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypERC20>;
    getContractAt(
      name: 'HypERC20Collateral',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypERC20Collateral>;
    getContractAt(
      name: 'HypERC721',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypERC721>;
    getContractAt(
      name: 'HypERC721Collateral',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypERC721Collateral>;
    getContractAt(
      name: 'HypNative',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.HypNative>;
    getContractAt(
      name: 'IFiatToken',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IFiatToken>;
    getContractAt(
      name: 'IXERC20',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IXERC20>;
    getContractAt(
      name: 'IXERC20Lockbox',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IXERC20Lockbox>;
    getContractAt(
      name: 'IXERC20VS',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IXERC20VS>;
    getContractAt(
      name: 'AmountPartition',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AmountPartition>;
    getContractAt(
      name: 'FungibleTokenRouter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.FungibleTokenRouter>;
    getContractAt(
      name: 'TokenRouter',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.TokenRouter>;
    getContractAt(
      name: 'Versioned',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.Versioned>;
    getContractAt(
      name: 'FxBaseRootTunnel',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.FxBaseRootTunnel>;
    getContractAt(
      name: 'ICheckpointManager',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ICheckpointManager>;
    getContractAt(
      name: 'IFxStateSender',
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IFxStateSender>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer,
    ): Promise<ethers.Contract>;
  }
}
