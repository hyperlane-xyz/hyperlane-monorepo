/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export type StrategyParamsStruct = {
  strategy: string;
  multiplier: BigNumberish;
};

export type StrategyParamsStructOutput = [string, BigNumber] & {
  strategy: string;
  multiplier: BigNumber;
};

export type QuorumStruct = { strategies: StrategyParamsStruct[] };

export type QuorumStructOutput = [StrategyParamsStructOutput[]] & {
  strategies: StrategyParamsStructOutput[];
};

export declare namespace ISignatureUtils {
  export type SignatureWithSaltAndExpiryStruct = {
    signature: BytesLike;
    salt: BytesLike;
    expiry: BigNumberish;
  };

  export type SignatureWithSaltAndExpiryStructOutput = [
    string,
    string,
    BigNumber,
  ] & { signature: string; salt: string; expiry: BigNumber };
}

export interface ECDSAStakeRegistryInterface extends utils.Interface {
  functions: {
    'PACKAGE_VERSION()': FunctionFragment;
    'deregisterOperator()': FunctionFragment;
    'getLastCheckpointOperatorWeight(address)': FunctionFragment;
    'getLastCheckpointThresholdWeight()': FunctionFragment;
    'getLastCheckpointThresholdWeightAtBlock(uint32)': FunctionFragment;
    'getLastCheckpointTotalWeight()': FunctionFragment;
    'getLastCheckpointTotalWeightAtBlock(uint32)': FunctionFragment;
    'getLastestOperatorSigningKey(address)': FunctionFragment;
    'getOperatorSigningKeyAtBlock(address,uint256)': FunctionFragment;
    'getOperatorWeight(address)': FunctionFragment;
    'getOperatorWeightAtBlock(address,uint32)': FunctionFragment;
    'initialize(address,uint256,((address,uint96)[]))': FunctionFragment;
    'isValidSignature(bytes32,bytes)': FunctionFragment;
    'minimumWeight()': FunctionFragment;
    'operatorRegistered(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'quorum()': FunctionFragment;
    'registerOperatorWithSignature((bytes,bytes32,uint256),address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateMinimumWeight(uint256,address[])': FunctionFragment;
    'updateOperatorSigningKey(address)': FunctionFragment;
    'updateOperators(address[])': FunctionFragment;
    'updateOperatorsForQuorum(address[][],bytes)': FunctionFragment;
    'updateQuorumConfig(((address,uint96)[]),address[])': FunctionFragment;
    'updateStakeThreshold(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'deregisterOperator'
      | 'deregisterOperator()'
      | 'getLastCheckpointOperatorWeight'
      | 'getLastCheckpointOperatorWeight(address)'
      | 'getLastCheckpointThresholdWeight'
      | 'getLastCheckpointThresholdWeight()'
      | 'getLastCheckpointThresholdWeightAtBlock'
      | 'getLastCheckpointThresholdWeightAtBlock(uint32)'
      | 'getLastCheckpointTotalWeight'
      | 'getLastCheckpointTotalWeight()'
      | 'getLastCheckpointTotalWeightAtBlock'
      | 'getLastCheckpointTotalWeightAtBlock(uint32)'
      | 'getLastestOperatorSigningKey'
      | 'getLastestOperatorSigningKey(address)'
      | 'getOperatorSigningKeyAtBlock'
      | 'getOperatorSigningKeyAtBlock(address,uint256)'
      | 'getOperatorWeight'
      | 'getOperatorWeight(address)'
      | 'getOperatorWeightAtBlock'
      | 'getOperatorWeightAtBlock(address,uint32)'
      | 'initialize'
      | 'initialize(address,uint256,((address,uint96)[]))'
      | 'isValidSignature'
      | 'isValidSignature(bytes32,bytes)'
      | 'minimumWeight'
      | 'minimumWeight()'
      | 'operatorRegistered'
      | 'operatorRegistered(address)'
      | 'owner'
      | 'owner()'
      | 'quorum'
      | 'quorum()'
      | 'registerOperatorWithSignature'
      | 'registerOperatorWithSignature((bytes,bytes32,uint256),address)'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'transferOwnership'
      | 'transferOwnership(address)'
      | 'updateMinimumWeight'
      | 'updateMinimumWeight(uint256,address[])'
      | 'updateOperatorSigningKey'
      | 'updateOperatorSigningKey(address)'
      | 'updateOperators'
      | 'updateOperators(address[])'
      | 'updateOperatorsForQuorum'
      | 'updateOperatorsForQuorum(address[][],bytes)'
      | 'updateQuorumConfig'
      | 'updateQuorumConfig(((address,uint96)[]),address[])'
      | 'updateStakeThreshold'
      | 'updateStakeThreshold(uint256)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deregisterOperator',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deregisterOperator()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastCheckpointOperatorWeight',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastCheckpointOperatorWeight(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastCheckpointThresholdWeight',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastCheckpointThresholdWeight()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastCheckpointThresholdWeightAtBlock',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastCheckpointThresholdWeightAtBlock(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastCheckpointTotalWeight',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastCheckpointTotalWeight()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastCheckpointTotalWeightAtBlock',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastCheckpointTotalWeightAtBlock(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastestOperatorSigningKey',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLastestOperatorSigningKey(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOperatorSigningKeyAtBlock',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOperatorSigningKeyAtBlock(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOperatorWeight',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOperatorWeight(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOperatorWeightAtBlock',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOperatorWeightAtBlock(address,uint32)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, BigNumberish, QuorumStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize(address,uint256,((address,uint96)[]))',
    values: [string, BigNumberish, QuorumStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidSignature',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidSignature(bytes32,bytes)',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'minimumWeight',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'minimumWeight()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'operatorRegistered',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'operatorRegistered(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'quorum', values?: undefined): string;
  encodeFunctionData(functionFragment: 'quorum()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'registerOperatorWithSignature',
    values: [ISignatureUtils.SignatureWithSaltAndExpiryStruct, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerOperatorWithSignature((bytes,bytes32,uint256),address)',
    values: [ISignatureUtils.SignatureWithSaltAndExpiryStruct, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateMinimumWeight',
    values: [BigNumberish, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateMinimumWeight(uint256,address[])',
    values: [BigNumberish, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateOperatorSigningKey',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateOperatorSigningKey(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateOperators',
    values: [string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateOperators(address[])',
    values: [string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateOperatorsForQuorum',
    values: [string[][], BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateOperatorsForQuorum(address[][],bytes)',
    values: [string[][], BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateQuorumConfig',
    values: [QuorumStruct, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateQuorumConfig(((address,uint96)[]),address[])',
    values: [QuorumStruct, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateStakeThreshold',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateStakeThreshold(uint256)',
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deregisterOperator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deregisterOperator()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCheckpointOperatorWeight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCheckpointOperatorWeight(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCheckpointThresholdWeight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCheckpointThresholdWeight()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCheckpointThresholdWeightAtBlock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCheckpointThresholdWeightAtBlock(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCheckpointTotalWeight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCheckpointTotalWeight()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCheckpointTotalWeightAtBlock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastCheckpointTotalWeightAtBlock(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastestOperatorSigningKey',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getLastestOperatorSigningKey(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOperatorSigningKeyAtBlock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOperatorSigningKeyAtBlock(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOperatorWeight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOperatorWeight(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOperatorWeightAtBlock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOperatorWeightAtBlock(address,uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initialize(address,uint256,((address,uint96)[]))',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isValidSignature',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isValidSignature(bytes32,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'minimumWeight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'minimumWeight()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'operatorRegistered',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'operatorRegistered(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quorum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quorum()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'registerOperatorWithSignature',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerOperatorWithSignature((bytes,bytes32,uint256),address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateMinimumWeight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateMinimumWeight(uint256,address[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateOperatorSigningKey',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateOperatorSigningKey(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateOperators',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateOperators(address[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateOperatorsForQuorum',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateOperatorsForQuorum(address[][],bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateQuorumConfig',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateQuorumConfig(((address,uint96)[]),address[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateStakeThreshold',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateStakeThreshold(uint256)',
    data: BytesLike,
  ): Result;

  events: {
    'Initialized(uint8)': EventFragment;
    'MinimumWeightUpdated(uint256,uint256)': EventFragment;
    'OperatorDeregistered(address,address)': EventFragment;
    'OperatorRegistered(address,address)': EventFragment;
    'OperatorWeightUpdated(address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'QuorumUpdated(((address,uint96)[]),((address,uint96)[]))': EventFragment;
    'SigningKeyUpdate(address,uint256,address,address)': EventFragment;
    'ThresholdWeightUpdated(uint256)': EventFragment;
    'TotalWeightUpdated(uint256,uint256)': EventFragment;
    'UpdateMinimumWeight(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized(uint8)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinimumWeightUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'MinimumWeightUpdated(uint256,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorDeregistered'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OperatorDeregistered(address,address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorRegistered'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OperatorRegistered(address,address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorWeightUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OperatorWeightUpdated(address,uint256,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuorumUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'QuorumUpdated(((address,uint96)[]),((address,uint96)[]))',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SigningKeyUpdate'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'SigningKeyUpdate(address,uint256,address,address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ThresholdWeightUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ThresholdWeightUpdated(uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TotalWeightUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'TotalWeightUpdated(uint256,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateMinimumWeight'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'UpdateMinimumWeight(uint256,uint256)',
  ): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MinimumWeightUpdatedEventObject {
  _old: BigNumber;
  _new: BigNumber;
}
export type MinimumWeightUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinimumWeightUpdatedEventObject
>;

export type MinimumWeightUpdatedEventFilter =
  TypedEventFilter<MinimumWeightUpdatedEvent>;

export interface OperatorDeregisteredEventObject {
  _operator: string;
  _avs: string;
}
export type OperatorDeregisteredEvent = TypedEvent<
  [string, string],
  OperatorDeregisteredEventObject
>;

export type OperatorDeregisteredEventFilter =
  TypedEventFilter<OperatorDeregisteredEvent>;

export interface OperatorRegisteredEventObject {
  _operator: string;
  _avs: string;
}
export type OperatorRegisteredEvent = TypedEvent<
  [string, string],
  OperatorRegisteredEventObject
>;

export type OperatorRegisteredEventFilter =
  TypedEventFilter<OperatorRegisteredEvent>;

export interface OperatorWeightUpdatedEventObject {
  _operator: string;
  oldWeight: BigNumber;
  newWeight: BigNumber;
}
export type OperatorWeightUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OperatorWeightUpdatedEventObject
>;

export type OperatorWeightUpdatedEventFilter =
  TypedEventFilter<OperatorWeightUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface QuorumUpdatedEventObject {
  _old: QuorumStructOutput;
  _new: QuorumStructOutput;
}
export type QuorumUpdatedEvent = TypedEvent<
  [QuorumStructOutput, QuorumStructOutput],
  QuorumUpdatedEventObject
>;

export type QuorumUpdatedEventFilter = TypedEventFilter<QuorumUpdatedEvent>;

export interface SigningKeyUpdateEventObject {
  operator: string;
  updateBlock: BigNumber;
  newSigningKey: string;
  oldSigningKey: string;
}
export type SigningKeyUpdateEvent = TypedEvent<
  [string, BigNumber, string, string],
  SigningKeyUpdateEventObject
>;

export type SigningKeyUpdateEventFilter =
  TypedEventFilter<SigningKeyUpdateEvent>;

export interface ThresholdWeightUpdatedEventObject {
  _thresholdWeight: BigNumber;
}
export type ThresholdWeightUpdatedEvent = TypedEvent<
  [BigNumber],
  ThresholdWeightUpdatedEventObject
>;

export type ThresholdWeightUpdatedEventFilter =
  TypedEventFilter<ThresholdWeightUpdatedEvent>;

export interface TotalWeightUpdatedEventObject {
  oldTotalWeight: BigNumber;
  newTotalWeight: BigNumber;
}
export type TotalWeightUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TotalWeightUpdatedEventObject
>;

export type TotalWeightUpdatedEventFilter =
  TypedEventFilter<TotalWeightUpdatedEvent>;

export interface UpdateMinimumWeightEventObject {
  oldMinimumWeight: BigNumber;
  newMinimumWeight: BigNumber;
}
export type UpdateMinimumWeightEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateMinimumWeightEventObject
>;

export type UpdateMinimumWeightEventFilter =
  TypedEventFilter<UpdateMinimumWeightEvent>;

export interface ECDSAStakeRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ECDSAStakeRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    deregisterOperator(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'deregisterOperator()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getLastCheckpointOperatorWeight(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'getLastCheckpointOperatorWeight(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getLastCheckpointThresholdWeight(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'getLastCheckpointThresholdWeight()'(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getLastCheckpointThresholdWeightAtBlock(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'getLastCheckpointThresholdWeightAtBlock(uint32)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getLastCheckpointTotalWeight(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'getLastCheckpointTotalWeight()'(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getLastCheckpointTotalWeightAtBlock(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'getLastCheckpointTotalWeightAtBlock(uint32)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getLastestOperatorSigningKey(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'getLastestOperatorSigningKey(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getOperatorSigningKeyAtBlock(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'getOperatorSigningKeyAtBlock(address,uint256)'(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getOperatorWeight(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'getOperatorWeight(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getOperatorWeightAtBlock(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'getOperatorWeightAtBlock(address,uint32)'(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    initialize(
      _serviceManager: string,
      _thresholdWeight: BigNumberish,
      _quorum: QuorumStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'initialize(address,uint256,((address,uint96)[]))'(
      _serviceManager: string,
      _thresholdWeight: BigNumberish,
      _quorum: QuorumStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    isValidSignature(
      _dataHash: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'isValidSignature(bytes32,bytes)'(
      _dataHash: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    minimumWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    'minimumWeight()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorRegistered(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'operatorRegistered(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    quorum(overrides?: CallOverrides): Promise<[QuorumStructOutput]>;

    'quorum()'(overrides?: CallOverrides): Promise<[QuorumStructOutput]>;

    registerOperatorWithSignature(
      _operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      _signingKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'registerOperatorWithSignature((bytes,bytes32,uint256),address)'(
      _operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      _signingKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateMinimumWeight(
      _newMinimumWeight: BigNumberish,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'updateMinimumWeight(uint256,address[])'(
      _newMinimumWeight: BigNumberish,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateOperatorSigningKey(
      _newSigningKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'updateOperatorSigningKey(address)'(
      _newSigningKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateOperators(
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'updateOperators(address[])'(
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'updateOperatorsForQuorum(address[][],bytes)'(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateQuorumConfig(
      _quorum: QuorumStruct,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'updateQuorumConfig(((address,uint96)[]),address[])'(
      _quorum: QuorumStruct,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateStakeThreshold(
      _thresholdWeight: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'updateStakeThreshold(uint256)'(
      _thresholdWeight: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  deregisterOperator(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'deregisterOperator()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getLastCheckpointOperatorWeight(
    _operator: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getLastCheckpointOperatorWeight(address)'(
    _operator: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLastCheckpointThresholdWeight(
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getLastCheckpointThresholdWeight()'(
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLastCheckpointThresholdWeightAtBlock(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getLastCheckpointThresholdWeightAtBlock(uint32)'(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLastCheckpointTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  'getLastCheckpointTotalWeight()'(
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLastCheckpointTotalWeightAtBlock(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getLastCheckpointTotalWeightAtBlock(uint32)'(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLastestOperatorSigningKey(
    _operator: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  'getLastestOperatorSigningKey(address)'(
    _operator: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  getOperatorSigningKeyAtBlock(
    _operator: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'getOperatorSigningKeyAtBlock(address,uint256)'(
    _operator: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  getOperatorWeight(
    _operator: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getOperatorWeight(address)'(
    _operator: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getOperatorWeightAtBlock(
    _operator: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getOperatorWeightAtBlock(address,uint32)'(
    _operator: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  initialize(
    _serviceManager: string,
    _thresholdWeight: BigNumberish,
    _quorum: QuorumStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'initialize(address,uint256,((address,uint96)[]))'(
    _serviceManager: string,
    _thresholdWeight: BigNumberish,
    _quorum: QuorumStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  isValidSignature(
    _dataHash: BytesLike,
    _signatureData: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  'isValidSignature(bytes32,bytes)'(
    _dataHash: BytesLike,
    _signatureData: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  minimumWeight(overrides?: CallOverrides): Promise<BigNumber>;

  'minimumWeight()'(overrides?: CallOverrides): Promise<BigNumber>;

  operatorRegistered(
    _operator: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'operatorRegistered(address)'(
    _operator: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  quorum(overrides?: CallOverrides): Promise<QuorumStructOutput>;

  'quorum()'(overrides?: CallOverrides): Promise<QuorumStructOutput>;

  registerOperatorWithSignature(
    _operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
    _signingKey: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'registerOperatorWithSignature((bytes,bytes32,uint256),address)'(
    _operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
    _signingKey: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateMinimumWeight(
    _newMinimumWeight: BigNumberish,
    _operators: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'updateMinimumWeight(uint256,address[])'(
    _newMinimumWeight: BigNumberish,
    _operators: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateOperatorSigningKey(
    _newSigningKey: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'updateOperatorSigningKey(address)'(
    _newSigningKey: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateOperators(
    _operators: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'updateOperators(address[])'(
    _operators: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateOperatorsForQuorum(
    operatorsPerQuorum: string[][],
    arg1: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'updateOperatorsForQuorum(address[][],bytes)'(
    operatorsPerQuorum: string[][],
    arg1: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateQuorumConfig(
    _quorum: QuorumStruct,
    _operators: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'updateQuorumConfig(((address,uint96)[]),address[])'(
    _quorum: QuorumStruct,
    _operators: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateStakeThreshold(
    _thresholdWeight: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'updateStakeThreshold(uint256)'(
    _thresholdWeight: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    deregisterOperator(overrides?: CallOverrides): Promise<void>;

    'deregisterOperator()'(overrides?: CallOverrides): Promise<void>;

    getLastCheckpointOperatorWeight(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getLastCheckpointOperatorWeight(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastCheckpointThresholdWeight(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getLastCheckpointThresholdWeight()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastCheckpointThresholdWeightAtBlock(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getLastCheckpointThresholdWeightAtBlock(uint32)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastCheckpointTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    'getLastCheckpointTotalWeight()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastCheckpointTotalWeightAtBlock(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getLastCheckpointTotalWeightAtBlock(uint32)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastestOperatorSigningKey(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    'getLastestOperatorSigningKey(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    getOperatorSigningKeyAtBlock(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'getOperatorSigningKeyAtBlock(address,uint256)'(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getOperatorWeight(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getOperatorWeight(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOperatorWeightAtBlock(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getOperatorWeightAtBlock(address,uint32)'(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _serviceManager: string,
      _thresholdWeight: BigNumberish,
      _quorum: QuorumStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    'initialize(address,uint256,((address,uint96)[]))'(
      _serviceManager: string,
      _thresholdWeight: BigNumberish,
      _quorum: QuorumStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    isValidSignature(
      _dataHash: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    'isValidSignature(bytes32,bytes)'(
      _dataHash: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    minimumWeight(overrides?: CallOverrides): Promise<BigNumber>;

    'minimumWeight()'(overrides?: CallOverrides): Promise<BigNumber>;

    operatorRegistered(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'operatorRegistered(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    quorum(overrides?: CallOverrides): Promise<QuorumStructOutput>;

    'quorum()'(overrides?: CallOverrides): Promise<QuorumStructOutput>;

    registerOperatorWithSignature(
      _operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      _signingKey: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'registerOperatorWithSignature((bytes,bytes32,uint256),address)'(
      _operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      _signingKey: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMinimumWeight(
      _newMinimumWeight: BigNumberish,
      _operators: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'updateMinimumWeight(uint256,address[])'(
      _newMinimumWeight: BigNumberish,
      _operators: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    updateOperatorSigningKey(
      _newSigningKey: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'updateOperatorSigningKey(address)'(
      _newSigningKey: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateOperators(
      _operators: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'updateOperators(address[])'(
      _operators: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'updateOperatorsForQuorum(address[][],bytes)'(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateQuorumConfig(
      _quorum: QuorumStruct,
      _operators: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'updateQuorumConfig(((address,uint96)[]),address[])'(
      _quorum: QuorumStruct,
      _operators: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    updateStakeThreshold(
      _thresholdWeight: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'updateStakeThreshold(uint256)'(
      _thresholdWeight: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'MinimumWeightUpdated(uint256,uint256)'(
      _old?: null,
      _new?: null,
    ): MinimumWeightUpdatedEventFilter;
    MinimumWeightUpdated(
      _old?: null,
      _new?: null,
    ): MinimumWeightUpdatedEventFilter;

    'OperatorDeregistered(address,address)'(
      _operator?: string | null,
      _avs?: string | null,
    ): OperatorDeregisteredEventFilter;
    OperatorDeregistered(
      _operator?: string | null,
      _avs?: string | null,
    ): OperatorDeregisteredEventFilter;

    'OperatorRegistered(address,address)'(
      _operator?: string | null,
      _avs?: string | null,
    ): OperatorRegisteredEventFilter;
    OperatorRegistered(
      _operator?: string | null,
      _avs?: string | null,
    ): OperatorRegisteredEventFilter;

    'OperatorWeightUpdated(address,uint256,uint256)'(
      _operator?: string | null,
      oldWeight?: null,
      newWeight?: null,
    ): OperatorWeightUpdatedEventFilter;
    OperatorWeightUpdated(
      _operator?: string | null,
      oldWeight?: null,
      newWeight?: null,
    ): OperatorWeightUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'QuorumUpdated(((address,uint96)[]),((address,uint96)[]))'(
      _old?: null,
      _new?: null,
    ): QuorumUpdatedEventFilter;
    QuorumUpdated(_old?: null, _new?: null): QuorumUpdatedEventFilter;

    'SigningKeyUpdate(address,uint256,address,address)'(
      operator?: string | null,
      updateBlock?: BigNumberish | null,
      newSigningKey?: string | null,
      oldSigningKey?: null,
    ): SigningKeyUpdateEventFilter;
    SigningKeyUpdate(
      operator?: string | null,
      updateBlock?: BigNumberish | null,
      newSigningKey?: string | null,
      oldSigningKey?: null,
    ): SigningKeyUpdateEventFilter;

    'ThresholdWeightUpdated(uint256)'(
      _thresholdWeight?: null,
    ): ThresholdWeightUpdatedEventFilter;
    ThresholdWeightUpdated(
      _thresholdWeight?: null,
    ): ThresholdWeightUpdatedEventFilter;

    'TotalWeightUpdated(uint256,uint256)'(
      oldTotalWeight?: null,
      newTotalWeight?: null,
    ): TotalWeightUpdatedEventFilter;
    TotalWeightUpdated(
      oldTotalWeight?: null,
      newTotalWeight?: null,
    ): TotalWeightUpdatedEventFilter;

    'UpdateMinimumWeight(uint256,uint256)'(
      oldMinimumWeight?: null,
      newMinimumWeight?: null,
    ): UpdateMinimumWeightEventFilter;
    UpdateMinimumWeight(
      oldMinimumWeight?: null,
      newMinimumWeight?: null,
    ): UpdateMinimumWeightEventFilter;
  };

  estimateGas: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    deregisterOperator(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'deregisterOperator()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getLastCheckpointOperatorWeight(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getLastCheckpointOperatorWeight(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastCheckpointThresholdWeight(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getLastCheckpointThresholdWeight()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastCheckpointThresholdWeightAtBlock(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getLastCheckpointThresholdWeightAtBlock(uint32)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastCheckpointTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    'getLastCheckpointTotalWeight()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastCheckpointTotalWeightAtBlock(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getLastCheckpointTotalWeightAtBlock(uint32)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastestOperatorSigningKey(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getLastestOperatorSigningKey(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOperatorSigningKeyAtBlock(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getOperatorSigningKeyAtBlock(address,uint256)'(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOperatorWeight(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getOperatorWeight(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOperatorWeightAtBlock(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getOperatorWeightAtBlock(address,uint32)'(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _serviceManager: string,
      _thresholdWeight: BigNumberish,
      _quorum: QuorumStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'initialize(address,uint256,((address,uint96)[]))'(
      _serviceManager: string,
      _thresholdWeight: BigNumberish,
      _quorum: QuorumStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    isValidSignature(
      _dataHash: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'isValidSignature(bytes32,bytes)'(
      _dataHash: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    minimumWeight(overrides?: CallOverrides): Promise<BigNumber>;

    'minimumWeight()'(overrides?: CallOverrides): Promise<BigNumber>;

    operatorRegistered(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'operatorRegistered(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    quorum(overrides?: CallOverrides): Promise<BigNumber>;

    'quorum()'(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperatorWithSignature(
      _operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      _signingKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'registerOperatorWithSignature((bytes,bytes32,uint256),address)'(
      _operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      _signingKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateMinimumWeight(
      _newMinimumWeight: BigNumberish,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'updateMinimumWeight(uint256,address[])'(
      _newMinimumWeight: BigNumberish,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateOperatorSigningKey(
      _newSigningKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'updateOperatorSigningKey(address)'(
      _newSigningKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateOperators(
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'updateOperators(address[])'(
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'updateOperatorsForQuorum(address[][],bytes)'(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateQuorumConfig(
      _quorum: QuorumStruct,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'updateQuorumConfig(((address,uint96)[]),address[])'(
      _quorum: QuorumStruct,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateStakeThreshold(
      _thresholdWeight: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'updateStakeThreshold(uint256)'(
      _thresholdWeight: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deregisterOperator(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'deregisterOperator()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getLastCheckpointOperatorWeight(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getLastCheckpointOperatorWeight(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLastCheckpointThresholdWeight(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getLastCheckpointThresholdWeight()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLastCheckpointThresholdWeightAtBlock(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getLastCheckpointThresholdWeightAtBlock(uint32)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLastCheckpointTotalWeight(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getLastCheckpointTotalWeight()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLastCheckpointTotalWeightAtBlock(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getLastCheckpointTotalWeightAtBlock(uint32)'(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLastestOperatorSigningKey(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getLastestOperatorSigningKey(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOperatorSigningKeyAtBlock(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getOperatorSigningKeyAtBlock(address,uint256)'(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOperatorWeight(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getOperatorWeight(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOperatorWeightAtBlock(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getOperatorWeightAtBlock(address,uint32)'(
      _operator: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _serviceManager: string,
      _thresholdWeight: BigNumberish,
      _quorum: QuorumStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'initialize(address,uint256,((address,uint96)[]))'(
      _serviceManager: string,
      _thresholdWeight: BigNumberish,
      _quorum: QuorumStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      _dataHash: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'isValidSignature(bytes32,bytes)'(
      _dataHash: BytesLike,
      _signatureData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    minimumWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'minimumWeight()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorRegistered(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'operatorRegistered(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'quorum()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOperatorWithSignature(
      _operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      _signingKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'registerOperatorWithSignature((bytes,bytes32,uint256),address)'(
      _operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      _signingKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateMinimumWeight(
      _newMinimumWeight: BigNumberish,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'updateMinimumWeight(uint256,address[])'(
      _newMinimumWeight: BigNumberish,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateOperatorSigningKey(
      _newSigningKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'updateOperatorSigningKey(address)'(
      _newSigningKey: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateOperators(
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'updateOperators(address[])'(
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateOperatorsForQuorum(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'updateOperatorsForQuorum(address[][],bytes)'(
      operatorsPerQuorum: string[][],
      arg1: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateQuorumConfig(
      _quorum: QuorumStruct,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'updateQuorumConfig(((address,uint96)[]),address[])'(
      _quorum: QuorumStruct,
      _operators: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateStakeThreshold(
      _thresholdWeight: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'updateStakeThreshold(uint256)'(
      _thresholdWeight: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
