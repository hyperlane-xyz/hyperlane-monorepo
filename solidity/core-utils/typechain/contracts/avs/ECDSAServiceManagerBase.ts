/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export declare namespace IPaymentCoordinator {
  export type StrategyAndMultiplierStruct = {
    strategy: string;
    multiplier: BigNumberish;
  };

  export type StrategyAndMultiplierStructOutput = [string, BigNumber] & {
    strategy: string;
    multiplier: BigNumber;
  };

  export type RangePaymentStruct = {
    strategiesAndMultipliers: IPaymentCoordinator.StrategyAndMultiplierStruct[];
    token: string;
    amount: BigNumberish;
    startTimestamp: BigNumberish;
    duration: BigNumberish;
  };

  export type RangePaymentStructOutput = [
    IPaymentCoordinator.StrategyAndMultiplierStructOutput[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    strategiesAndMultipliers: IPaymentCoordinator.StrategyAndMultiplierStructOutput[];
    token: string;
    amount: BigNumber;
    startTimestamp: BigNumber;
    duration: BigNumber;
  };
}

export declare namespace ISignatureUtils {
  export type SignatureWithSaltAndExpiryStruct = {
    signature: BytesLike;
    salt: BytesLike;
    expiry: BigNumberish;
  };

  export type SignatureWithSaltAndExpiryStructOutput = [
    string,
    string,
    BigNumber,
  ] & { signature: string; salt: string; expiry: BigNumber };
}

export interface ECDSAServiceManagerBaseInterface extends utils.Interface {
  functions: {
    'avsDirectory()': FunctionFragment;
    'deregisterOperatorFromAVS(address)': FunctionFragment;
    'getOperatorRestakedStrategies(address)': FunctionFragment;
    'getRestakeableStrategies()': FunctionFragment;
    'owner()': FunctionFragment;
    'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])': FunctionFragment;
    'registerOperatorToAVS(address,(bytes,bytes32,uint256))': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setPaymentCoordinator(address)': FunctionFragment;
    'stakeRegistry()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateAVSMetadataURI(string)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'avsDirectory'
      | 'avsDirectory()'
      | 'deregisterOperatorFromAVS'
      | 'deregisterOperatorFromAVS(address)'
      | 'getOperatorRestakedStrategies'
      | 'getOperatorRestakedStrategies(address)'
      | 'getRestakeableStrategies'
      | 'getRestakeableStrategies()'
      | 'owner'
      | 'owner()'
      | 'payForRange'
      | 'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])'
      | 'registerOperatorToAVS'
      | 'registerOperatorToAVS(address,(bytes,bytes32,uint256))'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'setPaymentCoordinator'
      | 'setPaymentCoordinator(address)'
      | 'stakeRegistry'
      | 'stakeRegistry()'
      | 'transferOwnership'
      | 'transferOwnership(address)'
      | 'updateAVSMetadataURI'
      | 'updateAVSMetadataURI(string)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'avsDirectory',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'avsDirectory()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deregisterOperatorFromAVS',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'deregisterOperatorFromAVS(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOperatorRestakedStrategies',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOperatorRestakedStrategies(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRestakeableStrategies',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getRestakeableStrategies()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'payForRange',
    values: [IPaymentCoordinator.RangePaymentStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])',
    values: [IPaymentCoordinator.RangePaymentStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerOperatorToAVS',
    values: [string, ISignatureUtils.SignatureWithSaltAndExpiryStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerOperatorToAVS(address,(bytes,bytes32,uint256))',
    values: [string, ISignatureUtils.SignatureWithSaltAndExpiryStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setPaymentCoordinator',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPaymentCoordinator(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeRegistry',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeRegistry()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateAVSMetadataURI',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateAVSMetadataURI(string)',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'avsDirectory',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'avsDirectory()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deregisterOperatorFromAVS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deregisterOperatorFromAVS(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOperatorRestakedStrategies',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOperatorRestakedStrategies(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRestakeableStrategies',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRestakeableStrategies()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'payForRange',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerOperatorToAVS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerOperatorToAVS(address,(bytes,bytes32,uint256))',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setPaymentCoordinator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setPaymentCoordinator(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stakeRegistry',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stakeRegistry()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateAVSMetadataURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateAVSMetadataURI(string)',
    data: BytesLike,
  ): Result;

  events: {
    'Initialized(uint8)': EventFragment;
    'OperatorDeregisteredFromAVS(address)': EventFragment;
    'OperatorRegisteredToAVS(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized(uint8)'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OperatorDeregisteredFromAVS',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OperatorDeregisteredFromAVS(address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorRegisteredToAVS'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OperatorRegisteredToAVS(address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OperatorDeregisteredFromAVSEventObject {
  operator: string;
}
export type OperatorDeregisteredFromAVSEvent = TypedEvent<
  [string],
  OperatorDeregisteredFromAVSEventObject
>;

export type OperatorDeregisteredFromAVSEventFilter =
  TypedEventFilter<OperatorDeregisteredFromAVSEvent>;

export interface OperatorRegisteredToAVSEventObject {
  operator: string;
}
export type OperatorRegisteredToAVSEvent = TypedEvent<
  [string],
  OperatorRegisteredToAVSEventObject
>;

export type OperatorRegisteredToAVSEventFilter =
  TypedEventFilter<OperatorRegisteredToAVSEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ECDSAServiceManagerBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ECDSAServiceManagerBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    avsDirectory(overrides?: CallOverrides): Promise<[string]>;

    'avsDirectory()'(overrides?: CallOverrides): Promise<[string]>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'deregisterOperatorFromAVS(address)'(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getOperatorRestakedStrategies(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<[string[]]>;

    'getOperatorRestakedStrategies(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<[string[]]>;

    getRestakeableStrategies(overrides?: CallOverrides): Promise<[string[]]>;

    'getRestakeableStrategies()'(
      overrides?: CallOverrides,
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    payForRange(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])'(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'registerOperatorToAVS(address,(bytes,bytes32,uint256))'(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setPaymentCoordinator(
      _paymentCoordinator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setPaymentCoordinator(address)'(
      _paymentCoordinator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    stakeRegistry(overrides?: CallOverrides): Promise<[string]>;

    'stakeRegistry()'(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateAVSMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'updateAVSMetadataURI(string)'(
      _metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  avsDirectory(overrides?: CallOverrides): Promise<string>;

  'avsDirectory()'(overrides?: CallOverrides): Promise<string>;

  deregisterOperatorFromAVS(
    operator: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'deregisterOperatorFromAVS(address)'(
    operator: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getOperatorRestakedStrategies(
    _operator: string,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  'getOperatorRestakedStrategies(address)'(
    _operator: string,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  getRestakeableStrategies(overrides?: CallOverrides): Promise<string[]>;

  'getRestakeableStrategies()'(overrides?: CallOverrides): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  payForRange(
    rangePayments: IPaymentCoordinator.RangePaymentStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])'(
    rangePayments: IPaymentCoordinator.RangePaymentStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  registerOperatorToAVS(
    operator: string,
    operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'registerOperatorToAVS(address,(bytes,bytes32,uint256))'(
    operator: string,
    operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setPaymentCoordinator(
    _paymentCoordinator: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setPaymentCoordinator(address)'(
    _paymentCoordinator: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  stakeRegistry(overrides?: CallOverrides): Promise<string>;

  'stakeRegistry()'(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateAVSMetadataURI(
    _metadataURI: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'updateAVSMetadataURI(string)'(
    _metadataURI: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    avsDirectory(overrides?: CallOverrides): Promise<string>;

    'avsDirectory()'(overrides?: CallOverrides): Promise<string>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'deregisterOperatorFromAVS(address)'(
      operator: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    getOperatorRestakedStrategies(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    'getOperatorRestakedStrategies(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    getRestakeableStrategies(overrides?: CallOverrides): Promise<string[]>;

    'getRestakeableStrategies()'(overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    payForRange(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])'(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    'registerOperatorToAVS(address,(bytes,bytes32,uint256))'(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    setPaymentCoordinator(
      _paymentCoordinator: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setPaymentCoordinator(address)'(
      _paymentCoordinator: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakeRegistry(overrides?: CallOverrides): Promise<string>;

    'stakeRegistry()'(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateAVSMetadataURI(
      _metadataURI: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'updateAVSMetadataURI(string)'(
      _metadataURI: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OperatorDeregisteredFromAVS(address)'(
      operator?: string | null,
    ): OperatorDeregisteredFromAVSEventFilter;
    OperatorDeregisteredFromAVS(
      operator?: string | null,
    ): OperatorDeregisteredFromAVSEventFilter;

    'OperatorRegisteredToAVS(address)'(
      operator?: string | null,
    ): OperatorRegisteredToAVSEventFilter;
    OperatorRegisteredToAVS(
      operator?: string | null,
    ): OperatorRegisteredToAVSEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    avsDirectory(overrides?: CallOverrides): Promise<BigNumber>;

    'avsDirectory()'(overrides?: CallOverrides): Promise<BigNumber>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'deregisterOperatorFromAVS(address)'(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getOperatorRestakedStrategies(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getOperatorRestakedStrategies(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRestakeableStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    'getRestakeableStrategies()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    payForRange(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])'(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'registerOperatorToAVS(address,(bytes,bytes32,uint256))'(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setPaymentCoordinator(
      _paymentCoordinator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setPaymentCoordinator(address)'(
      _paymentCoordinator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    stakeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    'stakeRegistry()'(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateAVSMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'updateAVSMetadataURI(string)'(
      _metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    avsDirectory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'avsDirectory()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'deregisterOperatorFromAVS(address)'(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getOperatorRestakedStrategies(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getOperatorRestakedStrategies(address)'(
      _operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRestakeableStrategies(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getRestakeableStrategies()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payForRange(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])'(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'registerOperatorToAVS(address,(bytes,bytes32,uint256))'(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setPaymentCoordinator(
      _paymentCoordinator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setPaymentCoordinator(address)'(
      _paymentCoordinator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    stakeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'stakeRegistry()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateAVSMetadataURI(
      _metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'updateAVSMetadataURI(string)'(
      _metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
