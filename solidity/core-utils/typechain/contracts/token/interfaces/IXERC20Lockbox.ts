/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export interface IXERC20LockboxInterface extends utils.Interface {
  functions: {
    'ERC20()': FunctionFragment;
    'XERC20()': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositNativeTo(address)': FunctionFragment;
    'depositTo(address,uint256)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawTo(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ERC20'
      | 'ERC20()'
      | 'XERC20'
      | 'XERC20()'
      | 'deposit'
      | 'deposit(uint256)'
      | 'depositNativeTo'
      | 'depositNativeTo(address)'
      | 'depositTo'
      | 'depositTo(address,uint256)'
      | 'withdraw'
      | 'withdraw(uint256)'
      | 'withdrawTo'
      | 'withdrawTo(address,uint256)',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ERC20', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ERC20()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'XERC20', values?: undefined): string;
  encodeFunctionData(functionFragment: 'XERC20()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositNativeTo',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositNativeTo(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositTo',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositTo(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawTo',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawTo(address,uint256)',
    values: [string, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'ERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ERC20()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'XERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'XERC20()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'deposit(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'depositNativeTo',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'depositNativeTo(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'depositTo', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositTo(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdraw(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdrawTo', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawTo(address,uint256)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface IXERC20Lockbox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IXERC20LockboxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC20(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'ERC20()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    XERC20(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'XERC20()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'deposit(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    depositNativeTo(
      _user: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'depositNativeTo(address)'(
      _user: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    depositTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'depositTo(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'withdraw(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    withdrawTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'withdrawTo(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  ERC20(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'ERC20()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  XERC20(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'XERC20()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'deposit(uint256)'(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  depositNativeTo(
    _user: string,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'depositNativeTo(address)'(
    _user: string,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  depositTo(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'depositTo(address,uint256)'(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'withdraw(uint256)'(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  withdrawTo(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'withdrawTo(address,uint256)'(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC20(overrides?: CallOverrides): Promise<string>;

    'ERC20()'(overrides?: CallOverrides): Promise<string>;

    XERC20(overrides?: CallOverrides): Promise<string>;

    'XERC20()'(overrides?: CallOverrides): Promise<string>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'deposit(uint256)'(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositNativeTo(_user: string, overrides?: CallOverrides): Promise<void>;

    'depositNativeTo(address)'(
      _user: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'depositTo(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdraw(uint256)'(
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'withdrawTo(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    ERC20(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    'ERC20()'(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    XERC20(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    'XERC20()'(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'deposit(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    depositNativeTo(
      _user: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'depositNativeTo(address)'(
      _user: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    depositTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'depositTo(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'withdraw(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    withdrawTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'withdrawTo(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC20(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'ERC20()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    XERC20(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'XERC20()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    depositNativeTo(
      _user: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'depositNativeTo(address)'(
      _user: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    depositTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'depositTo(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'withdrawTo(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
