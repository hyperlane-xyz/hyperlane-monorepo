/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export type RateLimitMidPointStruct = {
  rateLimitPerSecond: BigNumberish;
  bufferCap: BigNumberish;
  lastBufferUsedTime: BigNumberish;
  bufferStored: BigNumberish;
  midPoint: BigNumberish;
};

export type RateLimitMidPointStructOutput = [
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
] & {
  rateLimitPerSecond: BigNumber;
  bufferCap: BigNumber;
  lastBufferUsedTime: number;
  bufferStored: BigNumber;
  midPoint: BigNumber;
};

export declare namespace IXERC20VS {
  export type RateLimitMidPointInfoStruct = {
    bufferCap: BigNumberish;
    rateLimitPerSecond: BigNumberish;
    bridge: string;
  };

  export type RateLimitMidPointInfoStructOutput = [
    BigNumber,
    BigNumber,
    string,
  ] & { bufferCap: BigNumber; rateLimitPerSecond: BigNumber; bridge: string };
}

export interface IXERC20VSInterface extends utils.Interface {
  functions: {
    'addBridge((uint112,uint128,address))': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burn(address,uint256)': FunctionFragment;
    'burningCurrentLimitOf(address)': FunctionFragment;
    'burningMaxLimitOf(address)': FunctionFragment;
    'lockbox()': FunctionFragment;
    'mint(address,uint256)': FunctionFragment;
    'mintingCurrentLimitOf(address)': FunctionFragment;
    'mintingMaxLimitOf(address)': FunctionFragment;
    'rateLimits(address)': FunctionFragment;
    'removeBridge(address)': FunctionFragment;
    'setBufferCap(address,uint256)': FunctionFragment;
    'setRateLimitPerSecond(address,uint128)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addBridge'
      | 'addBridge((uint112,uint128,address))'
      | 'allowance'
      | 'allowance(address,address)'
      | 'approve'
      | 'approve(address,uint256)'
      | 'balanceOf'
      | 'balanceOf(address)'
      | 'burn'
      | 'burn(address,uint256)'
      | 'burningCurrentLimitOf'
      | 'burningCurrentLimitOf(address)'
      | 'burningMaxLimitOf'
      | 'burningMaxLimitOf(address)'
      | 'lockbox'
      | 'lockbox()'
      | 'mint'
      | 'mint(address,uint256)'
      | 'mintingCurrentLimitOf'
      | 'mintingCurrentLimitOf(address)'
      | 'mintingMaxLimitOf'
      | 'mintingMaxLimitOf(address)'
      | 'rateLimits'
      | 'rateLimits(address)'
      | 'removeBridge'
      | 'removeBridge(address)'
      | 'setBufferCap'
      | 'setBufferCap(address,uint256)'
      | 'setRateLimitPerSecond'
      | 'setRateLimitPerSecond(address,uint128)'
      | 'totalSupply'
      | 'totalSupply()'
      | 'transfer'
      | 'transfer(address,uint256)'
      | 'transferFrom'
      | 'transferFrom(address,address,uint256)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addBridge',
    values: [IXERC20VS.RateLimitMidPointInfoStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'addBridge((uint112,uint128,address))',
    values: [IXERC20VS.RateLimitMidPointInfoStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance(address,address)',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'balanceOf(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'burn',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'burn(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'burningCurrentLimitOf',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'burningCurrentLimitOf(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'burningMaxLimitOf',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'burningMaxLimitOf(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'lockbox', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockbox()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintingCurrentLimitOf',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintingCurrentLimitOf(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintingMaxLimitOf',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintingMaxLimitOf(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'rateLimits', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'rateLimits(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeBridge',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeBridge(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBufferCap',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBufferCap(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRateLimitPerSecond',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRateLimitPerSecond(address,uint128)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom(address,address,uint256)',
    values: [string, string, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'addBridge', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'addBridge((uint112,uint128,address))',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'allowance(address,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'approve(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOf(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'burn(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burningCurrentLimitOf',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burningCurrentLimitOf(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burningMaxLimitOf',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burningMaxLimitOf(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lockbox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockbox()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'mint(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintingCurrentLimitOf',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintingCurrentLimitOf(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintingMaxLimitOf',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintingMaxLimitOf(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'rateLimits', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rateLimits(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeBridge',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeBridge(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBufferCap',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBufferCap(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRateLimitPerSecond',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRateLimitPerSecond(address,uint128)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transfer(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom(address,address,uint256)',
    data: BytesLike,
  ): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'BridgeLimitsSet(address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Approval(address,address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BridgeLimitsSet'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'BridgeLimitsSet(address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Transfer(address,address,uint256)',
  ): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BridgeLimitsSetEventObject {
  _bridge: string;
  _bufferCap: BigNumber;
}
export type BridgeLimitsSetEvent = TypedEvent<
  [string, BigNumber],
  BridgeLimitsSetEventObject
>;

export type BridgeLimitsSetEventFilter = TypedEventFilter<BridgeLimitsSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface IXERC20VS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IXERC20VSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBridge(
      _newBridge: IXERC20VS.RateLimitMidPointInfoStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'addBridge((uint112,uint128,address))'(
      _newBridge: IXERC20VS.RateLimitMidPointInfoStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    burn(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'burn(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    burningCurrentLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _limit: BigNumber }>;

    'burningCurrentLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _limit: BigNumber }>;

    burningMaxLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _limit: BigNumber }>;

    'burningMaxLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _limit: BigNumber }>;

    lockbox(overrides?: CallOverrides): Promise<[string]>;

    'lockbox()'(overrides?: CallOverrides): Promise<[string]>;

    mint(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'mint(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    mintingCurrentLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _limit: BigNumber }>;

    'mintingCurrentLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _limit: BigNumber }>;

    mintingMaxLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _limit: BigNumber }>;

    'mintingMaxLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _limit: BigNumber }>;

    rateLimits(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<
      [RateLimitMidPointStructOutput] & {
        _rateLimit: RateLimitMidPointStructOutput;
      }
    >;

    'rateLimits(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<
      [RateLimitMidPointStructOutput] & {
        _rateLimit: RateLimitMidPointStructOutput;
      }
    >;

    removeBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'removeBridge(address)'(
      _bridge: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setBufferCap(
      _bridge: string,
      _newBufferCap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setBufferCap(address,uint256)'(
      _bridge: string,
      _newBufferCap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setRateLimitPerSecond(
      _bridge: string,
      _newRateLimitPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setRateLimitPerSecond(address,uint128)'(
      _bridge: string,
      _newRateLimitPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transfer(address,uint256)'(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  addBridge(
    _newBridge: IXERC20VS.RateLimitMidPointInfoStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'addBridge((uint112,uint128,address))'(
    _newBridge: IXERC20VS.RateLimitMidPointInfoStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  burn(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'burn(address,uint256)'(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  burningCurrentLimitOf(
    _bridge: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'burningCurrentLimitOf(address)'(
    _bridge: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  burningMaxLimitOf(
    _bridge: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'burningMaxLimitOf(address)'(
    _bridge: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  lockbox(overrides?: CallOverrides): Promise<string>;

  'lockbox()'(overrides?: CallOverrides): Promise<string>;

  mint(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'mint(address,uint256)'(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  mintingCurrentLimitOf(
    _bridge: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'mintingCurrentLimitOf(address)'(
    _bridge: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  mintingMaxLimitOf(
    _bridge: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'mintingMaxLimitOf(address)'(
    _bridge: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  rateLimits(
    _bridge: string,
    overrides?: CallOverrides,
  ): Promise<RateLimitMidPointStructOutput>;

  'rateLimits(address)'(
    _bridge: string,
    overrides?: CallOverrides,
  ): Promise<RateLimitMidPointStructOutput>;

  removeBridge(
    _bridge: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'removeBridge(address)'(
    _bridge: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setBufferCap(
    _bridge: string,
    _newBufferCap: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setBufferCap(address,uint256)'(
    _bridge: string,
    _newBufferCap: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setRateLimitPerSecond(
    _bridge: string,
    _newRateLimitPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setRateLimitPerSecond(address,uint128)'(
    _bridge: string,
    _newRateLimitPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transfer(address,uint256)'(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferFrom(address,address,uint256)'(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    addBridge(
      _newBridge: IXERC20VS.RateLimitMidPointInfoStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    'addBridge((uint112,uint128,address))'(
      _newBridge: IXERC20VS.RateLimitMidPointInfoStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burn(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'burn(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    burningCurrentLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'burningCurrentLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burningMaxLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'burningMaxLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lockbox(overrides?: CallOverrides): Promise<string>;

    'lockbox()'(overrides?: CallOverrides): Promise<string>;

    mint(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'mint(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    mintingCurrentLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'mintingCurrentLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintingMaxLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'mintingMaxLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rateLimits(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<RateLimitMidPointStructOutput>;

    'rateLimits(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<RateLimitMidPointStructOutput>;

    removeBridge(_bridge: string, overrides?: CallOverrides): Promise<void>;

    'removeBridge(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBufferCap(
      _bridge: string,
      _newBufferCap: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setBufferCap(address,uint256)'(
      _bridge: string,
      _newBufferCap: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRateLimitPerSecond(
      _bridge: string,
      _newRateLimitPerSecond: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setRateLimitPerSecond(address,uint128)'(
      _bridge: string,
      _newRateLimitPerSecond: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'transfer(address,uint256)'(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;

    'BridgeLimitsSet(address,uint256)'(
      _bridge?: string | null,
      _bufferCap?: null,
    ): BridgeLimitsSetEventFilter;
    BridgeLimitsSet(
      _bridge?: string | null,
      _bufferCap?: null,
    ): BridgeLimitsSetEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    addBridge(
      _newBridge: IXERC20VS.RateLimitMidPointInfoStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'addBridge((uint112,uint128,address))'(
      _newBridge: IXERC20VS.RateLimitMidPointInfoStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burn(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'burn(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    burningCurrentLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'burningCurrentLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burningMaxLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'burningMaxLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lockbox(overrides?: CallOverrides): Promise<BigNumber>;

    'lockbox()'(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'mint(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    mintingCurrentLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'mintingCurrentLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintingMaxLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'mintingMaxLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rateLimits(_bridge: string, overrides?: CallOverrides): Promise<BigNumber>;

    'rateLimits(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'removeBridge(address)'(
      _bridge: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setBufferCap(
      _bridge: string,
      _newBufferCap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setBufferCap(address,uint256)'(
      _bridge: string,
      _newBufferCap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setRateLimitPerSecond(
      _bridge: string,
      _newRateLimitPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setRateLimitPerSecond(address,uint128)'(
      _bridge: string,
      _newRateLimitPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transfer(address,uint256)'(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBridge(
      _newBridge: IXERC20VS.RateLimitMidPointInfoStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'addBridge((uint112,uint128,address))'(
      _newBridge: IXERC20VS.RateLimitMidPointInfoStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burn(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'burn(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    burningCurrentLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'burningCurrentLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burningMaxLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'burningMaxLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lockbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lockbox()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'mint(address,uint256)'(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    mintingCurrentLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'mintingCurrentLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    mintingMaxLimitOf(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'mintingMaxLimitOf(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rateLimits(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'rateLimits(address)'(
      _bridge: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    removeBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'removeBridge(address)'(
      _bridge: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setBufferCap(
      _bridge: string,
      _newBufferCap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setBufferCap(address,uint256)'(
      _bridge: string,
      _newBufferCap: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setRateLimitPerSecond(
      _bridge: string,
      _newRateLimitPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setRateLimitPerSecond(address,uint128)'(
      _bridge: string,
      _newRateLimitPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transfer(address,uint256)'(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
