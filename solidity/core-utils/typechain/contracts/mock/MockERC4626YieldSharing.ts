/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface MockERC4626YieldSharingInterface extends utils.Interface {
  functions: {
    'SCALE()': FunctionFragment;
    'accumulatedFees()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'fee()': FunctionFragment;
    'getClaimableFees()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'lastVaultBalance()': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setFee(uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'SCALE'
      | 'SCALE()'
      | 'accumulatedFees'
      | 'accumulatedFees()'
      | 'allowance'
      | 'allowance(address,address)'
      | 'approve'
      | 'approve(address,uint256)'
      | 'asset'
      | 'asset()'
      | 'balanceOf'
      | 'balanceOf(address)'
      | 'convertToAssets'
      | 'convertToAssets(uint256)'
      | 'convertToShares'
      | 'convertToShares(uint256)'
      | 'decimals'
      | 'decimals()'
      | 'decreaseAllowance'
      | 'decreaseAllowance(address,uint256)'
      | 'deposit'
      | 'deposit(uint256,address)'
      | 'fee'
      | 'fee()'
      | 'getClaimableFees'
      | 'getClaimableFees()'
      | 'increaseAllowance'
      | 'increaseAllowance(address,uint256)'
      | 'lastVaultBalance'
      | 'lastVaultBalance()'
      | 'maxDeposit'
      | 'maxDeposit(address)'
      | 'maxMint'
      | 'maxMint(address)'
      | 'maxRedeem'
      | 'maxRedeem(address)'
      | 'maxWithdraw'
      | 'maxWithdraw(address)'
      | 'mint'
      | 'mint(uint256,address)'
      | 'name'
      | 'name()'
      | 'owner'
      | 'owner()'
      | 'previewDeposit'
      | 'previewDeposit(uint256)'
      | 'previewMint'
      | 'previewMint(uint256)'
      | 'previewRedeem'
      | 'previewRedeem(uint256)'
      | 'previewWithdraw'
      | 'previewWithdraw(uint256)'
      | 'redeem'
      | 'redeem(uint256,address,address)'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'setFee'
      | 'setFee(uint256)'
      | 'symbol'
      | 'symbol()'
      | 'totalAssets'
      | 'totalAssets()'
      | 'totalSupply'
      | 'totalSupply()'
      | 'transfer'
      | 'transfer(address,uint256)'
      | 'transferFrom'
      | 'transferFrom(address,address,uint256)'
      | 'transferOwnership'
      | 'transferOwnership(address)'
      | 'withdraw'
      | 'withdraw(uint256,address,address)',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'SCALE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SCALE()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'accumulatedFees',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'accumulatedFees()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance(address,address)',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'asset()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'balanceOf(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToAssets',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToAssets(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToShares',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'convertToShares(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decimals()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256,address)',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'fee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fee()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getClaimableFees',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getClaimableFees()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'lastVaultBalance',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastVaultBalance()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'maxDeposit(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'maxMint', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'maxMint(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'maxRedeem', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'maxRedeem(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'maxWithdraw(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint(uint256,address)',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewDeposit(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewMint(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [BigNumberish, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem(uint256,address,address)',
    values: [BigNumberish, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setFee',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setFee(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalAssets',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalAssets()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom(address,address,uint256)',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw(uint256,address,address)',
    values: [BigNumberish, string, string],
  ): string;

  decodeFunctionResult(functionFragment: 'SCALE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SCALE()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'accumulatedFees',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'accumulatedFees()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'allowance(address,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'approve(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOf(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToAssets',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToAssets(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToShares',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'convertToShares(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'deposit(uint256,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'fee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fee()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getClaimableFees',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getClaimableFees()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastVaultBalance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastVaultBalance()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxDeposit(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxMint(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'maxRedeem(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxWithdraw',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxWithdraw(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'mint(uint256,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'previewDeposit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewDeposit(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewMint',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewMint(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewRedeem',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewRedeem(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdraw',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'previewWithdraw(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'redeem(uint256,address,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setFee', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setFee(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalAssets()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transfer(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom(address,address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdraw(uint256,address,address)',
    data: BytesLike,
  ): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Approval(address,address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Deposit(address,address,uint256,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Transfer(address,address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Withdraw(address,address,address,uint256,uint256)',
  ): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  sender: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  sender: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface MockERC4626YieldSharing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockERC4626YieldSharingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    'SCALE()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    accumulatedFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    'accumulatedFees()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    'asset()'(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'convertToAssets(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'convertToShares(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    'decimals()'(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    deposit(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'deposit(uint256,address)'(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    'fee()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimableFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    'getClaimableFees()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    lastVaultBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    'lastVaultBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'maxDeposit(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'maxMint(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'maxRedeem(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'maxWithdraw(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'mint(uint256,address)'(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    'name()'(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'previewDeposit(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'previewMint(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'previewRedeem(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'previewWithdraw(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'redeem(uint256,address,address)'(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setFee(uint256)'(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    'symbol()'(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalAssets()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transfer(address,uint256)'(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'withdraw(uint256,address,address)'(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  'SCALE()'(overrides?: CallOverrides): Promise<BigNumber>;

  accumulatedFees(overrides?: CallOverrides): Promise<BigNumber>;

  'accumulatedFees()'(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  'asset()'(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  convertToAssets(
    shares: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'convertToAssets(uint256)'(
    shares: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  convertToShares(
    assets: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'convertToShares(uint256)'(
    assets: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  'decimals()'(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  deposit(
    assets: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'deposit(uint256,address)'(
    assets: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  'fee()'(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimableFees(overrides?: CallOverrides): Promise<BigNumber>;

  'getClaimableFees()'(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  lastVaultBalance(overrides?: CallOverrides): Promise<BigNumber>;

  'lastVaultBalance()'(overrides?: CallOverrides): Promise<BigNumber>;

  maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'maxDeposit(address)'(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'maxMint(address)'(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  'maxRedeem(address)'(
    owner: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  'maxWithdraw(address)'(
    owner: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  mint(
    shares: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'mint(uint256,address)'(
    shares: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  'name()'(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  previewDeposit(
    assets: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'previewDeposit(uint256)'(
    assets: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  previewMint(
    shares: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'previewMint(uint256)'(
    shares: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  previewRedeem(
    shares: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'previewRedeem(uint256)'(
    shares: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'previewWithdraw(uint256)'(
    assets: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  redeem(
    shares: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'redeem(uint256,address,address)'(
    shares: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setFee(uint256)'(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  'symbol()'(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  'totalAssets()'(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transfer(address,uint256)'(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferFrom(address,address,uint256)'(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  withdraw(
    assets: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'withdraw(uint256,address,address)'(
    assets: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    'SCALE()'(overrides?: CallOverrides): Promise<BigNumber>;

    accumulatedFees(overrides?: CallOverrides): Promise<BigNumber>;

    'accumulatedFees()'(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    'asset()'(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'convertToAssets(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'convertToShares(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    'decimals()'(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deposit(
      assets: BigNumberish,
      receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'deposit(uint256,address)'(
      assets: BigNumberish,
      receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    'fee()'(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableFees(overrides?: CallOverrides): Promise<BigNumber>;

    'getClaimableFees()'(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    lastVaultBalance(overrides?: CallOverrides): Promise<BigNumber>;

    'lastVaultBalance()'(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'maxDeposit(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'maxMint(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    'maxRedeem(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    'maxWithdraw(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'mint(uint256,address)'(
      shares: BigNumberish,
      receiver: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    'name()'(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'previewDeposit(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'previewMint(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'previewRedeem(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'previewWithdraw(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'redeem(uint256,address,address)'(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    setFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'setFee(uint256)'(
      newFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    'symbol()'(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    'totalAssets()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'transfer(address,uint256)'(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'withdraw(uint256,address,address)'(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      sender?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null,
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null,
    ): DepositEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;
    Withdraw(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    'SCALE()'(overrides?: CallOverrides): Promise<BigNumber>;

    accumulatedFees(overrides?: CallOverrides): Promise<BigNumber>;

    'accumulatedFees()'(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    'asset()'(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'convertToAssets(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'convertToShares(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    deposit(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'deposit(uint256,address)'(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    'fee()'(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableFees(overrides?: CallOverrides): Promise<BigNumber>;

    'getClaimableFees()'(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    lastVaultBalance(overrides?: CallOverrides): Promise<BigNumber>;

    'lastVaultBalance()'(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'maxDeposit(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'maxMint(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    'maxRedeem(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    'maxWithdraw(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'mint(uint256,address)'(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    'name()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'previewDeposit(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'previewMint(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'previewRedeem(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'previewWithdraw(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'redeem(uint256,address,address)'(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setFee(uint256)'(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    'totalAssets()'(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transfer(address,uint256)'(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'withdraw(uint256,address,address)'(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'SCALE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accumulatedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'accumulatedFees()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'asset()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'convertToAssets(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'convertToShares(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    deposit(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256,address)'(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'fee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimableFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getClaimableFees()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    lastVaultBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastVaultBalance()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxDeposit(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'maxDeposit(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxMint(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'maxMint(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'maxRedeem(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'maxWithdraw(address)'(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'mint(uint256,address)'(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'previewDeposit(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'previewMint(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'previewRedeem(uint256)'(
      shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'previewWithdraw(uint256)'(
      assets: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'redeem(uint256,address,address)'(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setFee(uint256)'(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalAssets()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transfer(address,uint256)'(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256,address,address)'(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
