/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface MockHyperlaneEnvironmentInterface extends utils.Interface {
  functions: {
    'destinationDomain()': FunctionFragment;
    'igps(uint32)': FunctionFragment;
    'isms(uint32)': FunctionFragment;
    'mailboxes(uint32)': FunctionFragment;
    'originDomain()': FunctionFragment;
    'processNextPendingMessage()': FunctionFragment;
    'processNextPendingMessageFromDestination()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'destinationDomain'
      | 'destinationDomain()'
      | 'igps'
      | 'igps(uint32)'
      | 'isms'
      | 'isms(uint32)'
      | 'mailboxes'
      | 'mailboxes(uint32)'
      | 'originDomain'
      | 'originDomain()'
      | 'processNextPendingMessage'
      | 'processNextPendingMessage()'
      | 'processNextPendingMessageFromDestination'
      | 'processNextPendingMessageFromDestination()',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'destinationDomain',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'destinationDomain()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'igps', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'igps(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'isms', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'isms(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'mailboxes',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'mailboxes(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'originDomain',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'originDomain()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'processNextPendingMessage',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'processNextPendingMessage()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'processNextPendingMessageFromDestination',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'processNextPendingMessageFromDestination()',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'destinationDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'destinationDomain()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'igps', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'igps(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'isms', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isms(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'mailboxes', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'mailboxes(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'originDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'originDomain()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'processNextPendingMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'processNextPendingMessage()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'processNextPendingMessageFromDestination',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'processNextPendingMessageFromDestination()',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface MockHyperlaneEnvironment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockHyperlaneEnvironmentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    destinationDomain(overrides?: CallOverrides): Promise<[number]>;

    'destinationDomain()'(overrides?: CallOverrides): Promise<[number]>;

    igps(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    'igps(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    'isms(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    mailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    'mailboxes(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    originDomain(overrides?: CallOverrides): Promise<[number]>;

    'originDomain()'(overrides?: CallOverrides): Promise<[number]>;

    processNextPendingMessage(
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'processNextPendingMessage()'(
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    processNextPendingMessageFromDestination(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'processNextPendingMessageFromDestination()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  destinationDomain(overrides?: CallOverrides): Promise<number>;

  'destinationDomain()'(overrides?: CallOverrides): Promise<number>;

  igps(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'igps(uint32)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'isms(uint32)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  mailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'mailboxes(uint32)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  originDomain(overrides?: CallOverrides): Promise<number>;

  'originDomain()'(overrides?: CallOverrides): Promise<number>;

  processNextPendingMessage(
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'processNextPendingMessage()'(
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  processNextPendingMessageFromDestination(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'processNextPendingMessageFromDestination()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    destinationDomain(overrides?: CallOverrides): Promise<number>;

    'destinationDomain()'(overrides?: CallOverrides): Promise<number>;

    igps(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'igps(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'isms(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    mailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'mailboxes(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    originDomain(overrides?: CallOverrides): Promise<number>;

    'originDomain()'(overrides?: CallOverrides): Promise<number>;

    processNextPendingMessage(overrides?: CallOverrides): Promise<void>;

    'processNextPendingMessage()'(overrides?: CallOverrides): Promise<void>;

    processNextPendingMessageFromDestination(
      overrides?: CallOverrides,
    ): Promise<void>;

    'processNextPendingMessageFromDestination()'(
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    destinationDomain(overrides?: CallOverrides): Promise<BigNumber>;

    'destinationDomain()'(overrides?: CallOverrides): Promise<BigNumber>;

    igps(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'igps(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'isms(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mailboxes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'mailboxes(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    originDomain(overrides?: CallOverrides): Promise<BigNumber>;

    'originDomain()'(overrides?: CallOverrides): Promise<BigNumber>;

    processNextPendingMessage(
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'processNextPendingMessage()'(
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    processNextPendingMessageFromDestination(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'processNextPendingMessageFromDestination()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    destinationDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'destinationDomain()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    igps(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'igps(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isms(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'isms(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    mailboxes(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'mailboxes(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    originDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'originDomain()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processNextPendingMessage(
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'processNextPendingMessage()'(
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    processNextPendingMessageFromDestination(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'processNextPendingMessageFromDestination()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
