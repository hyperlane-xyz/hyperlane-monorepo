/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface MockCircleMessageTransmitterInterface extends utils.Interface {
  functions: {
    'hashSourceAndNonce(uint32,uint64)': FunctionFragment;
    'process(bytes32,address,uint256)': FunctionFragment;
    'receiveMessage(bytes,bytes)': FunctionFragment;
    'usedNonces(bytes32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'hashSourceAndNonce'
      | 'hashSourceAndNonce(uint32,uint64)'
      | 'process'
      | 'process(bytes32,address,uint256)'
      | 'receiveMessage'
      | 'receiveMessage(bytes,bytes)'
      | 'usedNonces'
      | 'usedNonces(bytes32)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'hashSourceAndNonce',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'hashSourceAndNonce(uint32,uint64)',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'process',
    values: [BytesLike, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'process(bytes32,address,uint256)',
    values: [BytesLike, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveMessage',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveMessage(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'usedNonces',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'usedNonces(bytes32)',
    values: [BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'hashSourceAndNonce',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'hashSourceAndNonce(uint32,uint64)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'process', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'process(bytes32,address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveMessage(bytes,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'usedNonces', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'usedNonces(bytes32)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface MockCircleMessageTransmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockCircleMessageTransmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hashSourceAndNonce(
      _source: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'hashSourceAndNonce(uint32,uint64)'(
      _source: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    process(
      _nonceId: BytesLike,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'process(bytes32,address,uint256)'(
      _nonceId: BytesLike,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    receiveMessage(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { success: boolean }>;

    'receiveMessage(bytes,bytes)'(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { success: boolean }>;

    usedNonces(
      _nonceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'usedNonces(bytes32)'(
      _nonceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;
  };

  hashSourceAndNonce(
    _source: BigNumberish,
    _nonce: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'hashSourceAndNonce(uint32,uint64)'(
    _source: BigNumberish,
    _nonce: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  process(
    _nonceId: BytesLike,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'process(bytes32,address,uint256)'(
    _nonceId: BytesLike,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  receiveMessage(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'receiveMessage(bytes,bytes)'(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  usedNonces(_nonceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  'usedNonces(bytes32)'(
    _nonceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  callStatic: {
    hashSourceAndNonce(
      _source: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'hashSourceAndNonce(uint32,uint64)'(
      _source: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    process(
      _nonceId: BytesLike,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'process(bytes32,address,uint256)'(
      _nonceId: BytesLike,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    receiveMessage(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'receiveMessage(bytes,bytes)'(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    usedNonces(
      _nonceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'usedNonces(bytes32)'(
      _nonceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    hashSourceAndNonce(
      _source: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'hashSourceAndNonce(uint32,uint64)'(
      _source: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    process(
      _nonceId: BytesLike,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'process(bytes32,address,uint256)'(
      _nonceId: BytesLike,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    receiveMessage(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'receiveMessage(bytes,bytes)'(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    usedNonces(
      _nonceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'usedNonces(bytes32)'(
      _nonceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hashSourceAndNonce(
      _source: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'hashSourceAndNonce(uint32,uint64)'(
      _source: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    process(
      _nonceId: BytesLike,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'process(bytes32,address,uint256)'(
      _nonceId: BytesLike,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    receiveMessage(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'receiveMessage(bytes,bytes)'(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    usedNonces(
      _nonceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'usedNonces(bytes32)'(
      _nonceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
