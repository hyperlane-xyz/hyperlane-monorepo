/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export interface MockArbBridgeInterface extends utils.Interface {
  functions: {
    'activeOutbox()': FunctionFragment;
    'bridge()': FunctionFragment;
    'executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)': FunctionFragment;
    'l2ToL1Sender()': FunctionFragment;
    'setL2ToL1Sender(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'activeOutbox'
      | 'activeOutbox()'
      | 'bridge'
      | 'bridge()'
      | 'executeTransaction'
      | 'executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)'
      | 'l2ToL1Sender'
      | 'l2ToL1Sender()'
      | 'setL2ToL1Sender'
      | 'setL2ToL1Sender(address)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'activeOutbox',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'activeOutbox()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'bridge', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bridge()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'executeTransaction',
    values: [
      BytesLike[],
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)',
    values: [
      BytesLike[],
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'l2ToL1Sender',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'l2ToL1Sender()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setL2ToL1Sender',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setL2ToL1Sender(address)',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'activeOutbox',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'activeOutbox()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'bridge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bridge()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'executeTransaction',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'l2ToL1Sender',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'l2ToL1Sender()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setL2ToL1Sender',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setL2ToL1Sender(address)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface MockArbBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockArbBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeOutbox(overrides?: CallOverrides): Promise<[string]>;

    'activeOutbox()'(overrides?: CallOverrides): Promise<[string]>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    'bridge()'(overrides?: CallOverrides): Promise<[string]>;

    executeTransaction(
      arg0: BytesLike[],
      arg1: BigNumberish,
      arg2: string,
      to: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)'(
      arg0: BytesLike[],
      arg1: BigNumberish,
      arg2: string,
      to: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    l2ToL1Sender(overrides?: CallOverrides): Promise<[string]>;

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<[string]>;

    setL2ToL1Sender(
      _sender: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setL2ToL1Sender(address)'(
      _sender: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  activeOutbox(overrides?: CallOverrides): Promise<string>;

  'activeOutbox()'(overrides?: CallOverrides): Promise<string>;

  bridge(overrides?: CallOverrides): Promise<string>;

  'bridge()'(overrides?: CallOverrides): Promise<string>;

  executeTransaction(
    arg0: BytesLike[],
    arg1: BigNumberish,
    arg2: string,
    to: string,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)'(
    arg0: BytesLike[],
    arg1: BigNumberish,
    arg2: string,
    to: string,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  l2ToL1Sender(overrides?: CallOverrides): Promise<string>;

  'l2ToL1Sender()'(overrides?: CallOverrides): Promise<string>;

  setL2ToL1Sender(
    _sender: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setL2ToL1Sender(address)'(
    _sender: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    activeOutbox(overrides?: CallOverrides): Promise<string>;

    'activeOutbox()'(overrides?: CallOverrides): Promise<string>;

    bridge(overrides?: CallOverrides): Promise<string>;

    'bridge()'(overrides?: CallOverrides): Promise<string>;

    executeTransaction(
      arg0: BytesLike[],
      arg1: BigNumberish,
      arg2: string,
      to: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)'(
      arg0: BytesLike[],
      arg1: BigNumberish,
      arg2: string,
      to: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    l2ToL1Sender(overrides?: CallOverrides): Promise<string>;

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<string>;

    setL2ToL1Sender(_sender: string, overrides?: CallOverrides): Promise<void>;

    'setL2ToL1Sender(address)'(
      _sender: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    activeOutbox(overrides?: CallOverrides): Promise<BigNumber>;

    'activeOutbox()'(overrides?: CallOverrides): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    'bridge()'(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      arg0: BytesLike[],
      arg1: BigNumberish,
      arg2: string,
      to: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)'(
      arg0: BytesLike[],
      arg1: BigNumberish,
      arg2: string,
      to: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    l2ToL1Sender(overrides?: CallOverrides): Promise<BigNumber>;

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<BigNumber>;

    setL2ToL1Sender(
      _sender: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setL2ToL1Sender(address)'(
      _sender: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeOutbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'activeOutbox()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'bridge()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeTransaction(
      arg0: BytesLike[],
      arg1: BigNumberish,
      arg2: string,
      to: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'executeTransaction(bytes32[],uint256,address,address,uint256,uint256,uint256,uint256,bytes)'(
      arg0: BytesLike[],
      arg1: BigNumberish,
      arg2: string,
      to: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    l2ToL1Sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'l2ToL1Sender()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setL2ToL1Sender(
      _sender: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setL2ToL1Sender(address)'(
      _sender: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
