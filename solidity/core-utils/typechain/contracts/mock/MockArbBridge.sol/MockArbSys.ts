/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export interface MockArbSysInterface extends utils.Interface {
  functions: {
    'sendTxToL1(address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'sendTxToL1' | 'sendTxToL1(address,bytes)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'sendTxToL1',
    values: [string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendTxToL1(address,bytes)',
    values: [string, BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: 'sendTxToL1', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'sendTxToL1(address,bytes)',
    data: BytesLike,
  ): Result;

  events: {
    'L2ToL1Tx(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'L2ToL1Tx'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'L2ToL1Tx(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes)',
  ): EventFragment;
}

export interface L2ToL1TxEventObject {
  caller: string;
  destination: string;
  hash: BigNumber;
  position: BigNumber;
  arbBlockNum: BigNumber;
  ethBlockNum: BigNumber;
  timestamp: BigNumber;
  callvalue: BigNumber;
  data: string;
}
export type L2ToL1TxEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
  ],
  L2ToL1TxEventObject
>;

export type L2ToL1TxEventFilter = TypedEventFilter<L2ToL1TxEvent>;

export interface MockArbSys extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockArbSysInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    sendTxToL1(
      destination: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'sendTxToL1(address,bytes)'(
      destination: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  sendTxToL1(
    destination: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'sendTxToL1(address,bytes)'(
    destination: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    sendTxToL1(
      destination: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'sendTxToL1(address,bytes)'(
      destination: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'L2ToL1Tx(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes)'(
      caller?: null,
      destination?: string | null,
      hash?: BigNumberish | null,
      position?: BigNumberish | null,
      arbBlockNum?: null,
      ethBlockNum?: null,
      timestamp?: null,
      callvalue?: null,
      data?: null,
    ): L2ToL1TxEventFilter;
    L2ToL1Tx(
      caller?: null,
      destination?: string | null,
      hash?: BigNumberish | null,
      position?: BigNumberish | null,
      arbBlockNum?: null,
      ethBlockNum?: null,
      timestamp?: null,
      callvalue?: null,
      data?: null,
    ): L2ToL1TxEventFilter;
  };

  estimateGas: {
    sendTxToL1(
      destination: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'sendTxToL1(address,bytes)'(
      destination: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    sendTxToL1(
      destination: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'sendTxToL1(address,bytes)'(
      destination: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
