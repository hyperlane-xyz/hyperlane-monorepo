/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export declare namespace IPortalTokenBridge {
  export type TransferWithPayloadStruct = {
    payloadID: BigNumberish;
    amount: BigNumberish;
    tokenAddress: BytesLike;
    tokenChain: BigNumberish;
    to: BytesLike;
    toChain: BigNumberish;
    fromAddress: BytesLike;
    payload: BytesLike;
  };

  export type TransferWithPayloadStructOutput = [
    number,
    BigNumber,
    string,
    number,
    string,
    number,
    string,
    string,
  ] & {
    payloadID: number;
    amount: BigNumber;
    tokenAddress: string;
    tokenChain: number;
    to: string;
    toChain: number;
    fromAddress: string;
    payload: string;
  };
}

export interface MockPortalBridgeInterface extends utils.Interface {
  functions: {
    'adapterData(uint32,uint224,address)': FunctionFragment;
    'completeTransferWithPayload(bytes)': FunctionFragment;
    'isWrappedAsset(address)': FunctionFragment;
    'mockPortalVaa(uint32,uint224,uint256)': FunctionFragment;
    'parseTransferWithPayload(bytes)': FunctionFragment;
    'transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)': FunctionFragment;
    'wrappedAsset(uint16,bytes32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'adapterData'
      | 'adapterData(uint32,uint224,address)'
      | 'completeTransferWithPayload'
      | 'completeTransferWithPayload(bytes)'
      | 'isWrappedAsset'
      | 'isWrappedAsset(address)'
      | 'mockPortalVaa'
      | 'mockPortalVaa(uint32,uint224,uint256)'
      | 'parseTransferWithPayload'
      | 'parseTransferWithPayload(bytes)'
      | 'transferTokensWithPayload'
      | 'transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)'
      | 'wrappedAsset'
      | 'wrappedAsset(uint16,bytes32)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'adapterData',
    values: [BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'adapterData(uint32,uint224,address)',
    values: [BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'completeTransferWithPayload',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'completeTransferWithPayload(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isWrappedAsset',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'isWrappedAsset(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'mockPortalVaa',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'mockPortalVaa(uint32,uint224,uint256)',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'parseTransferWithPayload',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'parseTransferWithPayload(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTokensWithPayload',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'wrappedAsset',
    values: [BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'wrappedAsset(uint16,bytes32)',
    values: [BigNumberish, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'adapterData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'adapterData(uint32,uint224,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'completeTransferWithPayload',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'completeTransferWithPayload(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isWrappedAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isWrappedAsset(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mockPortalVaa',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mockPortalVaa(uint32,uint224,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'parseTransferWithPayload',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'parseTransferWithPayload(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferTokensWithPayload',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'wrappedAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'wrappedAsset(uint16,bytes32)',
    data: BytesLike,
  ): Result;

  events: {
    'ContractUpgraded(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ContractUpgraded'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ContractUpgraded(address,address)',
  ): EventFragment;
}

export interface ContractUpgradedEventObject {
  oldContract: string;
  newContract: string;
}
export type ContractUpgradedEvent = TypedEvent<
  [string, string],
  ContractUpgradedEventObject
>;

export type ContractUpgradedEventFilter =
  TypedEventFilter<ContractUpgradedEvent>;

export interface MockPortalBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockPortalBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adapterData(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'adapterData(uint32,uint224,address)'(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    completeTransferWithPayload(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'completeTransferWithPayload(bytes)'(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    isWrappedAsset(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    'isWrappedAsset(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    mockPortalVaa(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'mockPortalVaa(uint32,uint224,uint256)'(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    parseTransferWithPayload(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [IPortalTokenBridge.TransferWithPayloadStructOutput] & {
        transfer: IPortalTokenBridge.TransferWithPayloadStructOutput;
      }
    >;

    'parseTransferWithPayload(bytes)'(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [IPortalTokenBridge.TransferWithPayloadStructOutput] & {
        transfer: IPortalTokenBridge.TransferWithPayloadStructOutput;
      }
    >;

    transferTokensWithPayload(
      arg0: string,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)'(
      arg0: string,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    wrappedAsset(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'wrappedAsset(uint16,bytes32)'(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;
  };

  adapterData(
    _originDomain: BigNumberish,
    _nonce: BigNumberish,
    _token: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  'adapterData(uint32,uint224,address)'(
    _originDomain: BigNumberish,
    _nonce: BigNumberish,
    _token: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  completeTransferWithPayload(
    encodedVm: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'completeTransferWithPayload(bytes)'(
    encodedVm: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  isWrappedAsset(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  'isWrappedAsset(address)'(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  mockPortalVaa(
    _originDomain: BigNumberish,
    _nonce: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'mockPortalVaa(uint32,uint224,uint256)'(
    _originDomain: BigNumberish,
    _nonce: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  parseTransferWithPayload(
    encoded: BytesLike,
    overrides?: CallOverrides,
  ): Promise<IPortalTokenBridge.TransferWithPayloadStructOutput>;

  'parseTransferWithPayload(bytes)'(
    encoded: BytesLike,
    overrides?: CallOverrides,
  ): Promise<IPortalTokenBridge.TransferWithPayloadStructOutput>;

  transferTokensWithPayload(
    arg0: string,
    amount: BigNumberish,
    arg2: BigNumberish,
    arg3: BytesLike,
    arg4: BigNumberish,
    arg5: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)'(
    arg0: string,
    amount: BigNumberish,
    arg2: BigNumberish,
    arg3: BytesLike,
    arg4: BigNumberish,
    arg5: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  wrappedAsset(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  'wrappedAsset(uint16,bytes32)'(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  callStatic: {
    adapterData(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    'adapterData(uint32,uint224,address)'(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    completeTransferWithPayload(
      encodedVm: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    'completeTransferWithPayload(bytes)'(
      encodedVm: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    isWrappedAsset(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    'isWrappedAsset(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    mockPortalVaa(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'mockPortalVaa(uint32,uint224,uint256)'(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    parseTransferWithPayload(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<IPortalTokenBridge.TransferWithPayloadStructOutput>;

    'parseTransferWithPayload(bytes)'(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<IPortalTokenBridge.TransferWithPayloadStructOutput>;

    transferTokensWithPayload(
      arg0: string,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)'(
      arg0: string,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    wrappedAsset(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    'wrappedAsset(uint16,bytes32)'(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {
    'ContractUpgraded(address,address)'(
      oldContract?: string | null,
      newContract?: string | null,
    ): ContractUpgradedEventFilter;
    ContractUpgraded(
      oldContract?: string | null,
      newContract?: string | null,
    ): ContractUpgradedEventFilter;
  };

  estimateGas: {
    adapterData(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'adapterData(uint32,uint224,address)'(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    completeTransferWithPayload(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'completeTransferWithPayload(bytes)'(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    isWrappedAsset(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isWrappedAsset(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mockPortalVaa(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'mockPortalVaa(uint32,uint224,uint256)'(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    parseTransferWithPayload(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'parseTransferWithPayload(bytes)'(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferTokensWithPayload(
      arg0: string,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)'(
      arg0: string,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    wrappedAsset(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'wrappedAsset(uint16,bytes32)'(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adapterData(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'adapterData(uint32,uint224,address)'(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _token: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    completeTransferWithPayload(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'completeTransferWithPayload(bytes)'(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    isWrappedAsset(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'isWrappedAsset(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    mockPortalVaa(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'mockPortalVaa(uint32,uint224,uint256)'(
      _originDomain: BigNumberish,
      _nonce: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    parseTransferWithPayload(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'parseTransferWithPayload(bytes)'(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferTokensWithPayload(
      arg0: string,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)'(
      arg0: string,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      arg4: BigNumberish,
      arg5: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    wrappedAsset(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'wrappedAsset(uint16,bytes32)'(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
