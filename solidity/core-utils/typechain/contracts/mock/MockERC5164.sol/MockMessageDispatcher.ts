/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export interface MockMessageDispatcherInterface extends utils.Interface {
  functions: {
    'dispatchMessage(uint256,address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'dispatchMessage'
      | 'dispatchMessage(uint256,address,bytes)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'dispatchMessage',
    values: [BigNumberish, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'dispatchMessage(uint256,address,bytes)',
    values: [BigNumberish, string, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'dispatchMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dispatchMessage(uint256,address,bytes)',
    data: BytesLike,
  ): Result;

  events: {
    'MessageDispatched(bytes32,address,uint256,address,bytes)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'MessageDispatched'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'MessageDispatched(bytes32,address,uint256,address,bytes)',
  ): EventFragment;
}

export interface MessageDispatchedEventObject {
  messageId: string;
  from: string;
  toChainId: BigNumber;
  to: string;
  data: string;
}
export type MessageDispatchedEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  MessageDispatchedEventObject
>;

export type MessageDispatchedEventFilter =
  TypedEventFilter<MessageDispatchedEvent>;

export interface MockMessageDispatcher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockMessageDispatcherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dispatchMessage(
      toChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'dispatchMessage(uint256,address,bytes)'(
      toChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  dispatchMessage(
    toChainId: BigNumberish,
    to: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'dispatchMessage(uint256,address,bytes)'(
    toChainId: BigNumberish,
    to: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    dispatchMessage(
      toChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    'dispatchMessage(uint256,address,bytes)'(
      toChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {
    'MessageDispatched(bytes32,address,uint256,address,bytes)'(
      messageId?: BytesLike | null,
      from?: string | null,
      toChainId?: BigNumberish | null,
      to?: null,
      data?: null,
    ): MessageDispatchedEventFilter;
    MessageDispatched(
      messageId?: BytesLike | null,
      from?: string | null,
      toChainId?: BigNumberish | null,
      to?: null,
      data?: null,
    ): MessageDispatchedEventFilter;
  };

  estimateGas: {
    dispatchMessage(
      toChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'dispatchMessage(uint256,address,bytes)'(
      toChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dispatchMessage(
      toChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'dispatchMessage(uint256,address,bytes)'(
      toChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
