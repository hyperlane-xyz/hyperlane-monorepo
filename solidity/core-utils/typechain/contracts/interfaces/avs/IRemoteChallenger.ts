/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export interface IRemoteChallengerInterface extends utils.Interface {
  functions: {
    'challengeDelayBlocks()': FunctionFragment;
    'handleChallenge(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'challengeDelayBlocks'
      | 'challengeDelayBlocks()'
      | 'handleChallenge'
      | 'handleChallenge(address)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'challengeDelayBlocks',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'challengeDelayBlocks()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'handleChallenge',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'handleChallenge(address)',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'challengeDelayBlocks',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'challengeDelayBlocks()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'handleChallenge',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'handleChallenge(address)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface IRemoteChallenger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRemoteChallengerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    challengeDelayBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    'challengeDelayBlocks()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    handleChallenge(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'handleChallenge(address)'(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  challengeDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  'challengeDelayBlocks()'(overrides?: CallOverrides): Promise<BigNumber>;

  handleChallenge(
    operator: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'handleChallenge(address)'(
    operator: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    challengeDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    'challengeDelayBlocks()'(overrides?: CallOverrides): Promise<BigNumber>;

    handleChallenge(operator: string, overrides?: CallOverrides): Promise<void>;

    'handleChallenge(address)'(
      operator: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    challengeDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    'challengeDelayBlocks()'(overrides?: CallOverrides): Promise<BigNumber>;

    handleChallenge(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'handleChallenge(address)'(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    challengeDelayBlocks(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'challengeDelayBlocks()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    handleChallenge(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'handleChallenge(address)'(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
