/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../../common.js';

export interface IStrategyInterface extends utils.Interface {
  functions: {
    'deposit(address,uint256)': FunctionFragment;
    'explanation()': FunctionFragment;
    'shares(address)': FunctionFragment;
    'sharesToUnderlying(uint256)': FunctionFragment;
    'sharesToUnderlyingView(uint256)': FunctionFragment;
    'totalShares()': FunctionFragment;
    'underlyingToShares(uint256)': FunctionFragment;
    'underlyingToSharesView(uint256)': FunctionFragment;
    'underlyingToken()': FunctionFragment;
    'userUnderlying(address)': FunctionFragment;
    'userUnderlyingView(address)': FunctionFragment;
    'withdraw(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'deposit'
      | 'deposit(address,uint256)'
      | 'explanation'
      | 'explanation()'
      | 'shares'
      | 'shares(address)'
      | 'sharesToUnderlying'
      | 'sharesToUnderlying(uint256)'
      | 'sharesToUnderlyingView'
      | 'sharesToUnderlyingView(uint256)'
      | 'totalShares'
      | 'totalShares()'
      | 'underlyingToShares'
      | 'underlyingToShares(uint256)'
      | 'underlyingToSharesView'
      | 'underlyingToSharesView(uint256)'
      | 'underlyingToken'
      | 'underlyingToken()'
      | 'userUnderlying'
      | 'userUnderlying(address)'
      | 'userUnderlyingView'
      | 'userUnderlyingView(address)'
      | 'withdraw'
      | 'withdraw(address,address,uint256)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'deposit',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'explanation',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'explanation()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'shares', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'shares(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'sharesToUnderlying',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'sharesToUnderlying(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'sharesToUnderlyingView',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'sharesToUnderlyingView(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalShares',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalShares()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'underlyingToShares',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'underlyingToShares(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'underlyingToSharesView',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'underlyingToSharesView(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'underlyingToken',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'underlyingToken()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'userUnderlying',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'userUnderlying(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'userUnderlyingView',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'userUnderlyingView(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw(address,address,uint256)',
    values: [string, string, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'deposit(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'explanation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'explanation()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'shares', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'shares(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sharesToUnderlying',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sharesToUnderlying(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sharesToUnderlyingView',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sharesToUnderlyingView(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalShares',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalShares()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'underlyingToShares',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'underlyingToShares(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'underlyingToSharesView',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'underlyingToSharesView(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'underlyingToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'underlyingToken()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userUnderlying',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userUnderlying(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userUnderlyingView',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userUnderlyingView(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdraw(address,address,uint256)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface IStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'deposit(address,uint256)'(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    explanation(overrides?: CallOverrides): Promise<[string]>;

    'explanation()'(overrides?: CallOverrides): Promise<[string]>;

    shares(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'shares(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    sharesToUnderlying(
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'sharesToUnderlying(uint256)'(
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    sharesToUnderlyingView(
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'sharesToUnderlyingView(uint256)'(
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalShares()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingToShares(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'underlyingToShares(uint256)'(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    underlyingToSharesView(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'underlyingToSharesView(uint256)'(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    'underlyingToken()'(overrides?: CallOverrides): Promise<[string]>;

    userUnderlying(
      user: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'userUnderlying(address)'(
      user: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    userUnderlyingView(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'userUnderlyingView(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    withdraw(
      recipient: string,
      token: string,
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'withdraw(address,address,uint256)'(
      recipient: string,
      token: string,
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  deposit(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'deposit(address,uint256)'(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  explanation(overrides?: CallOverrides): Promise<string>;

  'explanation()'(overrides?: CallOverrides): Promise<string>;

  shares(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  'shares(address)'(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  sharesToUnderlying(
    amountShares: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'sharesToUnderlying(uint256)'(
    amountShares: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  sharesToUnderlyingView(
    amountShares: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'sharesToUnderlyingView(uint256)'(
    amountShares: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  'totalShares()'(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingToShares(
    amountUnderlying: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'underlyingToShares(uint256)'(
    amountUnderlying: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  underlyingToSharesView(
    amountUnderlying: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'underlyingToSharesView(uint256)'(
    amountUnderlying: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  'underlyingToken()'(overrides?: CallOverrides): Promise<string>;

  userUnderlying(
    user: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'userUnderlying(address)'(
    user: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  userUnderlyingView(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'userUnderlyingView(address)'(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  withdraw(
    recipient: string,
    token: string,
    amountShares: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'withdraw(address,address,uint256)'(
    recipient: string,
    token: string,
    amountShares: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'deposit(address,uint256)'(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    explanation(overrides?: CallOverrides): Promise<string>;

    'explanation()'(overrides?: CallOverrides): Promise<string>;

    shares(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'shares(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sharesToUnderlying(
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'sharesToUnderlying(uint256)'(
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sharesToUnderlyingView(
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'sharesToUnderlyingView(uint256)'(
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    'totalShares()'(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToShares(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'underlyingToShares(uint256)'(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    underlyingToSharesView(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'underlyingToSharesView(uint256)'(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    'underlyingToken()'(overrides?: CallOverrides): Promise<string>;

    userUnderlying(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'userUnderlying(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userUnderlyingView(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'userUnderlyingView(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      token: string,
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'withdraw(address,address,uint256)'(
      recipient: string,
      token: string,
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'deposit(address,uint256)'(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    explanation(overrides?: CallOverrides): Promise<BigNumber>;

    'explanation()'(overrides?: CallOverrides): Promise<BigNumber>;

    shares(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'shares(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sharesToUnderlying(
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'sharesToUnderlying(uint256)'(
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    sharesToUnderlyingView(
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'sharesToUnderlyingView(uint256)'(
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    'totalShares()'(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToShares(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'underlyingToShares(uint256)'(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    underlyingToSharesView(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'underlyingToSharesView(uint256)'(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    'underlyingToken()'(overrides?: CallOverrides): Promise<BigNumber>;

    userUnderlying(
      user: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'userUnderlying(address)'(
      user: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    userUnderlyingView(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'userUnderlyingView(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      token: string,
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'withdraw(address,address,uint256)'(
      recipient: string,
      token: string,
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'deposit(address,uint256)'(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    explanation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'explanation()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shares(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'shares(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    sharesToUnderlying(
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'sharesToUnderlying(uint256)'(
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    sharesToUnderlyingView(
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'sharesToUnderlyingView(uint256)'(
      amountShares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalShares()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingToShares(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'underlyingToShares(uint256)'(
      amountUnderlying: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    underlyingToSharesView(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'underlyingToSharesView(uint256)'(
      amountUnderlying: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'underlyingToken()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    userUnderlying(
      user: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'userUnderlying(address)'(
      user: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    userUnderlyingView(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'userUnderlyingView(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    withdraw(
      recipient: string,
      token: string,
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'withdraw(address,address,uint256)'(
      recipient: string,
      token: string,
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
