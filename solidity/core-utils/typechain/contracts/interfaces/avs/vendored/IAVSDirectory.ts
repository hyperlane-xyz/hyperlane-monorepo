/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../../common.js';

export declare namespace ISignatureUtils {
  export type SignatureWithSaltAndExpiryStruct = {
    signature: BytesLike;
    salt: BytesLike;
    expiry: BigNumberish;
  };

  export type SignatureWithSaltAndExpiryStructOutput = [
    string,
    string,
    BigNumber,
  ] & { signature: string; salt: string; expiry: BigNumber };
}

export interface IAVSDirectoryInterface extends utils.Interface {
  functions: {
    'deregisterOperatorFromAVS(address)': FunctionFragment;
    'registerOperatorToAVS(address,(bytes,bytes32,uint256))': FunctionFragment;
    'updateAVSMetadataURI(string)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'deregisterOperatorFromAVS'
      | 'deregisterOperatorFromAVS(address)'
      | 'registerOperatorToAVS'
      | 'registerOperatorToAVS(address,(bytes,bytes32,uint256))'
      | 'updateAVSMetadataURI'
      | 'updateAVSMetadataURI(string)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'deregisterOperatorFromAVS',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'deregisterOperatorFromAVS(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerOperatorToAVS',
    values: [string, ISignatureUtils.SignatureWithSaltAndExpiryStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerOperatorToAVS(address,(bytes,bytes32,uint256))',
    values: [string, ISignatureUtils.SignatureWithSaltAndExpiryStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateAVSMetadataURI',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateAVSMetadataURI(string)',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'deregisterOperatorFromAVS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deregisterOperatorFromAVS(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerOperatorToAVS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerOperatorToAVS(address,(bytes,bytes32,uint256))',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateAVSMetadataURI',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateAVSMetadataURI(string)',
    data: BytesLike,
  ): Result;

  events: {
    'AVSMetadataURIUpdated(address,string)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AVSMetadataURIUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'AVSMetadataURIUpdated(address,string)',
  ): EventFragment;
}

export interface AVSMetadataURIUpdatedEventObject {
  avs: string;
  metadataURI: string;
}
export type AVSMetadataURIUpdatedEvent = TypedEvent<
  [string, string],
  AVSMetadataURIUpdatedEventObject
>;

export type AVSMetadataURIUpdatedEventFilter =
  TypedEventFilter<AVSMetadataURIUpdatedEvent>;

export interface IAVSDirectory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAVSDirectoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'deregisterOperatorFromAVS(address)'(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'registerOperatorToAVS(address,(bytes,bytes32,uint256))'(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateAVSMetadataURI(
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'updateAVSMetadataURI(string)'(
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  deregisterOperatorFromAVS(
    operator: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'deregisterOperatorFromAVS(address)'(
    operator: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  registerOperatorToAVS(
    operator: string,
    operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'registerOperatorToAVS(address,(bytes,bytes32,uint256))'(
    operator: string,
    operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateAVSMetadataURI(
    metadataURI: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'updateAVSMetadataURI(string)'(
    metadataURI: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    deregisterOperatorFromAVS(
      operator: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'deregisterOperatorFromAVS(address)'(
      operator: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    'registerOperatorToAVS(address,(bytes,bytes32,uint256))'(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateAVSMetadataURI(
      metadataURI: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'updateAVSMetadataURI(string)'(
      metadataURI: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AVSMetadataURIUpdated(address,string)'(
      avs?: string | null,
      metadataURI?: null,
    ): AVSMetadataURIUpdatedEventFilter;
    AVSMetadataURIUpdated(
      avs?: string | null,
      metadataURI?: null,
    ): AVSMetadataURIUpdatedEventFilter;
  };

  estimateGas: {
    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'deregisterOperatorFromAVS(address)'(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'registerOperatorToAVS(address,(bytes,bytes32,uint256))'(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateAVSMetadataURI(
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'updateAVSMetadataURI(string)'(
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deregisterOperatorFromAVS(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'deregisterOperatorFromAVS(address)'(
      operator: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    registerOperatorToAVS(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'registerOperatorToAVS(address,(bytes,bytes32,uint256))'(
      operator: string,
      operatorSignature: ISignatureUtils.SignatureWithSaltAndExpiryStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateAVSMetadataURI(
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'updateAVSMetadataURI(string)'(
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
