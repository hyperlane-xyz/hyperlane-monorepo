/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../../common.js';

export interface IL1CrossDomainMessengerInterface extends utils.Interface {
  functions: {
    'OTHER_MESSENGER()': FunctionFragment;
    'PORTAL()': FunctionFragment;
    'relayMessage(uint256,address,address,uint256,uint256,bytes)': FunctionFragment;
    'sendMessage(address,bytes,uint32)': FunctionFragment;
    'xDomainMessageSender()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'OTHER_MESSENGER'
      | 'OTHER_MESSENGER()'
      | 'PORTAL'
      | 'PORTAL()'
      | 'relayMessage'
      | 'relayMessage(uint256,address,address,uint256,uint256,bytes)'
      | 'sendMessage'
      | 'sendMessage(address,bytes,uint32)'
      | 'xDomainMessageSender'
      | 'xDomainMessageSender()',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'OTHER_MESSENGER',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'OTHER_MESSENGER()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'PORTAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PORTAL()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'relayMessage',
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'relayMessage(uint256,address,address,uint256,uint256,bytes)',
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendMessage',
    values: [string, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendMessage(address,bytes,uint32)',
    values: [string, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'xDomainMessageSender',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'xDomainMessageSender()',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'OTHER_MESSENGER',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'OTHER_MESSENGER()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'PORTAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PORTAL()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'relayMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'relayMessage(uint256,address,address,uint256,uint256,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sendMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sendMessage(address,bytes,uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'xDomainMessageSender',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'xDomainMessageSender()',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface IL1CrossDomainMessenger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IL1CrossDomainMessengerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    OTHER_MESSENGER(overrides?: CallOverrides): Promise<[string]>;

    'OTHER_MESSENGER()'(overrides?: CallOverrides): Promise<[string]>;

    PORTAL(overrides?: CallOverrides): Promise<[string]>;

    'PORTAL()'(overrides?: CallOverrides): Promise<[string]>;

    relayMessage(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'relayMessage(uint256,address,address,uint256,uint256,bytes)'(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'sendMessage(address,bytes,uint32)'(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<[string]>;

    'xDomainMessageSender()'(overrides?: CallOverrides): Promise<[string]>;
  };

  OTHER_MESSENGER(overrides?: CallOverrides): Promise<string>;

  'OTHER_MESSENGER()'(overrides?: CallOverrides): Promise<string>;

  PORTAL(overrides?: CallOverrides): Promise<string>;

  'PORTAL()'(overrides?: CallOverrides): Promise<string>;

  relayMessage(
    _nonce: BigNumberish,
    _sender: string,
    _target: string,
    _value: BigNumberish,
    _minGasLimit: BigNumberish,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'relayMessage(uint256,address,address,uint256,uint256,bytes)'(
    _nonce: BigNumberish,
    _sender: string,
    _target: string,
    _value: BigNumberish,
    _minGasLimit: BigNumberish,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  sendMessage(
    _target: string,
    _message: BytesLike,
    _gasLimit: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'sendMessage(address,bytes,uint32)'(
    _target: string,
    _message: BytesLike,
    _gasLimit: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  xDomainMessageSender(overrides?: CallOverrides): Promise<string>;

  'xDomainMessageSender()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    OTHER_MESSENGER(overrides?: CallOverrides): Promise<string>;

    'OTHER_MESSENGER()'(overrides?: CallOverrides): Promise<string>;

    PORTAL(overrides?: CallOverrides): Promise<string>;

    'PORTAL()'(overrides?: CallOverrides): Promise<string>;

    relayMessage(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'relayMessage(uint256,address,address,uint256,uint256,bytes)'(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'sendMessage(address,bytes,uint32)'(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<string>;

    'xDomainMessageSender()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    OTHER_MESSENGER(overrides?: CallOverrides): Promise<BigNumber>;

    'OTHER_MESSENGER()'(overrides?: CallOverrides): Promise<BigNumber>;

    PORTAL(overrides?: CallOverrides): Promise<BigNumber>;

    'PORTAL()'(overrides?: CallOverrides): Promise<BigNumber>;

    relayMessage(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'relayMessage(uint256,address,address,uint256,uint256,bytes)'(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'sendMessage(address,bytes,uint32)'(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<BigNumber>;

    'xDomainMessageSender()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    OTHER_MESSENGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'OTHER_MESSENGER()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    PORTAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PORTAL()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayMessage(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'relayMessage(uint256,address,address,uint256,uint256,bytes)'(
      _nonce: BigNumberish,
      _sender: string,
      _target: string,
      _value: BigNumberish,
      _minGasLimit: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'sendMessage(address,bytes,uint32)'(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    xDomainMessageSender(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'xDomainMessageSender()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
