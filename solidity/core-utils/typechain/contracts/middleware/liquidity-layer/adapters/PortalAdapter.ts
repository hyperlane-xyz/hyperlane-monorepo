/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../../common.js';

export interface PortalAdapterInterface extends utils.Interface {
  functions: {
    'PACKAGE_VERSION()': FunctionFragment;
    'addDomain(uint32,uint16)': FunctionFragment;
    'completeTransfer(bytes)': FunctionFragment;
    'domains()': FunctionFragment;
    'enrollRemoteRouter(uint32,bytes32)': FunctionFragment;
    'enrollRemoteRouters(uint32[],bytes32[])': FunctionFragment;
    'handle(uint32,bytes32,bytes)': FunctionFragment;
    'hook()': FunctionFragment;
    'hyperlaneDomainToWormholeDomain(uint32)': FunctionFragment;
    'initialize(address,address,address)': FunctionFragment;
    'interchainSecurityModule()': FunctionFragment;
    'liquidityLayerRouter()': FunctionFragment;
    'localDomain()': FunctionFragment;
    'mailbox()': FunctionFragment;
    'nonce()': FunctionFragment;
    'owner()': FunctionFragment;
    'portalTokenBridge()': FunctionFragment;
    'portalTransfersProcessed(bytes32)': FunctionFragment;
    'receiveTokens(uint32,address,uint256,bytes)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'routers(uint32)': FunctionFragment;
    'sendTokens(uint32,bytes32,address,uint256)': FunctionFragment;
    'setHook(address)': FunctionFragment;
    'setInterchainSecurityModule(address)': FunctionFragment;
    'transferId(uint32,uint224)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unenrollRemoteRouter(uint32)': FunctionFragment;
    'unenrollRemoteRouters(uint32[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'addDomain'
      | 'addDomain(uint32,uint16)'
      | 'completeTransfer'
      | 'completeTransfer(bytes)'
      | 'domains'
      | 'domains()'
      | 'enrollRemoteRouter'
      | 'enrollRemoteRouter(uint32,bytes32)'
      | 'enrollRemoteRouters'
      | 'enrollRemoteRouters(uint32[],bytes32[])'
      | 'handle'
      | 'handle(uint32,bytes32,bytes)'
      | 'hook'
      | 'hook()'
      | 'hyperlaneDomainToWormholeDomain'
      | 'hyperlaneDomainToWormholeDomain(uint32)'
      | 'initialize'
      | 'initialize(address,address,address)'
      | 'interchainSecurityModule'
      | 'interchainSecurityModule()'
      | 'liquidityLayerRouter'
      | 'liquidityLayerRouter()'
      | 'localDomain'
      | 'localDomain()'
      | 'mailbox'
      | 'mailbox()'
      | 'nonce'
      | 'nonce()'
      | 'owner'
      | 'owner()'
      | 'portalTokenBridge'
      | 'portalTokenBridge()'
      | 'portalTransfersProcessed'
      | 'portalTransfersProcessed(bytes32)'
      | 'receiveTokens'
      | 'receiveTokens(uint32,address,uint256,bytes)'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'routers'
      | 'routers(uint32)'
      | 'sendTokens'
      | 'sendTokens(uint32,bytes32,address,uint256)'
      | 'setHook'
      | 'setHook(address)'
      | 'setInterchainSecurityModule'
      | 'setInterchainSecurityModule(address)'
      | 'transferId'
      | 'transferId(uint32,uint224)'
      | 'transferOwnership'
      | 'transferOwnership(address)'
      | 'unenrollRemoteRouter'
      | 'unenrollRemoteRouter(uint32)'
      | 'unenrollRemoteRouters'
      | 'unenrollRemoteRouters(uint32[])',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'addDomain',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'addDomain(uint32,uint16)',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'completeTransfer',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'completeTransfer(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'domains', values?: undefined): string;
  encodeFunctionData(functionFragment: 'domains()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'enrollRemoteRouter',
    values: [BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'enrollRemoteRouter(uint32,bytes32)',
    values: [BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'enrollRemoteRouters',
    values: [BigNumberish[], BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'enrollRemoteRouters(uint32[],bytes32[])',
    values: [BigNumberish[], BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'handle',
    values: [BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'handle(uint32,bytes32,bytes)',
    values: [BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'hook', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hook()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'hyperlaneDomainToWormholeDomain',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'hyperlaneDomainToWormholeDomain(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize(address,address,address)',
    values: [string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'interchainSecurityModule',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'interchainSecurityModule()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidityLayerRouter',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidityLayerRouter()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'localDomain',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'localDomain()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'mailbox', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mailbox()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonce', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonce()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'portalTokenBridge',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'portalTokenBridge()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'portalTransfersProcessed',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'portalTransfersProcessed(bytes32)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveTokens',
    values: [BigNumberish, string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveTokens(uint32,address,uint256,bytes)',
    values: [BigNumberish, string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'routers',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'routers(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendTokens',
    values: [BigNumberish, BytesLike, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendTokens(uint32,bytes32,address,uint256)',
    values: [BigNumberish, BytesLike, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'setHook', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setHook(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setInterchainSecurityModule',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setInterchainSecurityModule(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferId',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferId(uint32,uint224)',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'unenrollRemoteRouter',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'unenrollRemoteRouter(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'unenrollRemoteRouters',
    values: [BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'unenrollRemoteRouters(uint32[])',
    values: [BigNumberish[]],
  ): string;

  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'addDomain', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'addDomain(uint32,uint16)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'completeTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'completeTransfer(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'domains', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'domains()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'enrollRemoteRouter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enrollRemoteRouter(uint32,bytes32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enrollRemoteRouters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enrollRemoteRouters(uint32[],bytes32[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'handle', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'handle(uint32,bytes32,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'hook', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hook()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'hyperlaneDomainToWormholeDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'hyperlaneDomainToWormholeDomain(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initialize(address,address,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'interchainSecurityModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'interchainSecurityModule()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidityLayerRouter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidityLayerRouter()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'localDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'localDomain()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'mailbox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mailbox()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonce()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'portalTokenBridge',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'portalTokenBridge()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'portalTransfersProcessed',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'portalTransfersProcessed(bytes32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveTokens(uint32,address,uint256,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'routers', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'routers(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'sendTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'sendTokens(uint32,bytes32,address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setHook', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setHook(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInterchainSecurityModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInterchainSecurityModule(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'transferId', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferId(uint32,uint224)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unenrollRemoteRouter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unenrollRemoteRouter(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unenrollRemoteRouters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unenrollRemoteRouters(uint32[])',
    data: BytesLike,
  ): Result;

  events: {
    'BridgedToken(uint256,uint64,uint32)': EventFragment;
    'DomainAdded(uint32,uint32)': EventFragment;
    'HookSet(address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'IsmSet(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BridgedToken'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'BridgedToken(uint256,uint64,uint32)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DomainAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DomainAdded(uint32,uint32)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HookSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HookSet(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized(uint8)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IsmSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IsmSet(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
}

export interface BridgedTokenEventObject {
  nonce: BigNumber;
  portalSequence: BigNumber;
  destination: number;
}
export type BridgedTokenEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  BridgedTokenEventObject
>;

export type BridgedTokenEventFilter = TypedEventFilter<BridgedTokenEvent>;

export interface DomainAddedEventObject {
  hyperlaneDomain: number;
  wormholeDomain: number;
}
export type DomainAddedEvent = TypedEvent<
  [number, number],
  DomainAddedEventObject
>;

export type DomainAddedEventFilter = TypedEventFilter<DomainAddedEvent>;

export interface HookSetEventObject {
  _hook: string;
}
export type HookSetEvent = TypedEvent<[string], HookSetEventObject>;

export type HookSetEventFilter = TypedEventFilter<HookSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface IsmSetEventObject {
  _ism: string;
}
export type IsmSetEvent = TypedEvent<[string], IsmSetEventObject>;

export type IsmSetEventFilter = TypedEventFilter<IsmSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PortalAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PortalAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    addDomain(
      _hyperlaneDomain: BigNumberish,
      _wormholeDomain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'addDomain(uint32,uint16)'(
      _hyperlaneDomain: BigNumberish,
      _wormholeDomain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    completeTransfer(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'completeTransfer(bytes)'(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    domains(overrides?: CallOverrides): Promise<[number[]]>;

    'domains()'(overrides?: CallOverrides): Promise<[number[]]>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'enrollRemoteRouter(uint32,bytes32)'(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'enrollRemoteRouters(uint32[],bytes32[])'(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'handle(uint32,bytes32,bytes)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    hook(overrides?: CallOverrides): Promise<[string]>;

    'hook()'(overrides?: CallOverrides): Promise<[string]>;

    hyperlaneDomainToWormholeDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    'hyperlaneDomainToWormholeDomain(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    initialize(
      _owner: string,
      _portalTokenBridge: string,
      _liquidityLayerRouter: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'initialize(address,address,address)'(
      _owner: string,
      _portalTokenBridge: string,
      _liquidityLayerRouter: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<[string]>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<[string]>;

    liquidityLayerRouter(overrides?: CallOverrides): Promise<[string]>;

    'liquidityLayerRouter()'(overrides?: CallOverrides): Promise<[string]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    'localDomain()'(overrides?: CallOverrides): Promise<[number]>;

    mailbox(overrides?: CallOverrides): Promise<[string]>;

    'mailbox()'(overrides?: CallOverrides): Promise<[string]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    'nonce()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    portalTokenBridge(overrides?: CallOverrides): Promise<[string]>;

    'portalTokenBridge()'(overrides?: CallOverrides): Promise<[string]>;

    portalTransfersProcessed(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'portalTransfersProcessed(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    receiveTokens(
      _originDomain: BigNumberish,
      _recipient: string,
      _amount: BigNumberish,
      _adapterData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'receiveTokens(uint32,address,uint256,bytes)'(
      _originDomain: BigNumberish,
      _recipient: string,
      _amount: BigNumberish,
      _adapterData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    routers(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'routers(uint32)'(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    sendTokens(
      _destinationDomain: BigNumberish,
      arg1: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'sendTokens(uint32,bytes32,address,uint256)'(
      _destinationDomain: BigNumberish,
      arg1: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setHook(address)'(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferId(
      _hyperlaneDomain: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'transferId(uint32,uint224)'(
      _hyperlaneDomain: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'unenrollRemoteRouter(uint32)'(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'unenrollRemoteRouters(uint32[])'(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  addDomain(
    _hyperlaneDomain: BigNumberish,
    _wormholeDomain: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'addDomain(uint32,uint16)'(
    _hyperlaneDomain: BigNumberish,
    _wormholeDomain: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  completeTransfer(
    encodedVm: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'completeTransfer(bytes)'(
    encodedVm: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  domains(overrides?: CallOverrides): Promise<number[]>;

  'domains()'(overrides?: CallOverrides): Promise<number[]>;

  enrollRemoteRouter(
    _domain: BigNumberish,
    _router: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'enrollRemoteRouter(uint32,bytes32)'(
    _domain: BigNumberish,
    _router: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  enrollRemoteRouters(
    _domains: BigNumberish[],
    _addresses: BytesLike[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'enrollRemoteRouters(uint32[],bytes32[])'(
    _domains: BigNumberish[],
    _addresses: BytesLike[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  handle(
    _origin: BigNumberish,
    _sender: BytesLike,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'handle(uint32,bytes32,bytes)'(
    _origin: BigNumberish,
    _sender: BytesLike,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  hook(overrides?: CallOverrides): Promise<string>;

  'hook()'(overrides?: CallOverrides): Promise<string>;

  hyperlaneDomainToWormholeDomain(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<number>;

  'hyperlaneDomainToWormholeDomain(uint32)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<number>;

  initialize(
    _owner: string,
    _portalTokenBridge: string,
    _liquidityLayerRouter: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'initialize(address,address,address)'(
    _owner: string,
    _portalTokenBridge: string,
    _liquidityLayerRouter: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

  'interchainSecurityModule()'(overrides?: CallOverrides): Promise<string>;

  liquidityLayerRouter(overrides?: CallOverrides): Promise<string>;

  'liquidityLayerRouter()'(overrides?: CallOverrides): Promise<string>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  'localDomain()'(overrides?: CallOverrides): Promise<number>;

  mailbox(overrides?: CallOverrides): Promise<string>;

  'mailbox()'(overrides?: CallOverrides): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  'nonce()'(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  portalTokenBridge(overrides?: CallOverrides): Promise<string>;

  'portalTokenBridge()'(overrides?: CallOverrides): Promise<string>;

  portalTransfersProcessed(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  'portalTransfersProcessed(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  receiveTokens(
    _originDomain: BigNumberish,
    _recipient: string,
    _amount: BigNumberish,
    _adapterData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'receiveTokens(uint32,address,uint256,bytes)'(
    _originDomain: BigNumberish,
    _recipient: string,
    _amount: BigNumberish,
    _adapterData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  routers(_domain: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'routers(uint32)'(
    _domain: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  sendTokens(
    _destinationDomain: BigNumberish,
    arg1: BytesLike,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'sendTokens(uint32,bytes32,address,uint256)'(
    _destinationDomain: BigNumberish,
    arg1: BytesLike,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setHook(
    _hook: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setHook(address)'(
    _hook: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setInterchainSecurityModule(
    _module: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setInterchainSecurityModule(address)'(
    _module: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferId(
    _hyperlaneDomain: BigNumberish,
    _nonce: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'transferId(uint32,uint224)'(
    _hyperlaneDomain: BigNumberish,
    _nonce: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  unenrollRemoteRouter(
    _domain: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'unenrollRemoteRouter(uint32)'(
    _domain: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  unenrollRemoteRouters(
    _domains: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'unenrollRemoteRouters(uint32[])'(
    _domains: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    addDomain(
      _hyperlaneDomain: BigNumberish,
      _wormholeDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'addDomain(uint32,uint16)'(
      _hyperlaneDomain: BigNumberish,
      _wormholeDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    completeTransfer(
      encodedVm: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'completeTransfer(bytes)'(
      encodedVm: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    domains(overrides?: CallOverrides): Promise<number[]>;

    'domains()'(overrides?: CallOverrides): Promise<number[]>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'enrollRemoteRouter(uint32,bytes32)'(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'enrollRemoteRouters(uint32[],bytes32[])'(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'handle(uint32,bytes32,bytes)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    hook(overrides?: CallOverrides): Promise<string>;

    'hook()'(overrides?: CallOverrides): Promise<string>;

    hyperlaneDomainToWormholeDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<number>;

    'hyperlaneDomainToWormholeDomain(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<number>;

    initialize(
      _owner: string,
      _portalTokenBridge: string,
      _liquidityLayerRouter: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'initialize(address,address,address)'(
      _owner: string,
      _portalTokenBridge: string,
      _liquidityLayerRouter: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<string>;

    liquidityLayerRouter(overrides?: CallOverrides): Promise<string>;

    'liquidityLayerRouter()'(overrides?: CallOverrides): Promise<string>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    'localDomain()'(overrides?: CallOverrides): Promise<number>;

    mailbox(overrides?: CallOverrides): Promise<string>;

    'mailbox()'(overrides?: CallOverrides): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    'nonce()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    portalTokenBridge(overrides?: CallOverrides): Promise<string>;

    'portalTokenBridge()'(overrides?: CallOverrides): Promise<string>;

    portalTransfersProcessed(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    'portalTransfersProcessed(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    receiveTokens(
      _originDomain: BigNumberish,
      _recipient: string,
      _amount: BigNumberish,
      _adapterData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber]>;

    'receiveTokens(uint32,address,uint256,bytes)'(
      _originDomain: BigNumberish,
      _recipient: string,
      _amount: BigNumberish,
      _adapterData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    routers(_domain: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'routers(uint32)'(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    sendTokens(
      _destinationDomain: BigNumberish,
      arg1: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'sendTokens(uint32,bytes32,address,uint256)'(
      _destinationDomain: BigNumberish,
      arg1: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    setHook(_hook: string, overrides?: CallOverrides): Promise<void>;

    'setHook(address)'(_hook: string, overrides?: CallOverrides): Promise<void>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferId(
      _hyperlaneDomain: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'transferId(uint32,uint224)'(
      _hyperlaneDomain: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'unenrollRemoteRouter(uint32)'(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'unenrollRemoteRouters(uint32[])'(
      _domains: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'BridgedToken(uint256,uint64,uint32)'(
      nonce?: null,
      portalSequence?: null,
      destination?: null,
    ): BridgedTokenEventFilter;
    BridgedToken(
      nonce?: null,
      portalSequence?: null,
      destination?: null,
    ): BridgedTokenEventFilter;

    'DomainAdded(uint32,uint32)'(
      hyperlaneDomain?: BigNumberish | null,
      wormholeDomain?: null,
    ): DomainAddedEventFilter;
    DomainAdded(
      hyperlaneDomain?: BigNumberish | null,
      wormholeDomain?: null,
    ): DomainAddedEventFilter;

    'HookSet(address)'(_hook?: null): HookSetEventFilter;
    HookSet(_hook?: null): HookSetEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'IsmSet(address)'(_ism?: null): IsmSetEventFilter;
    IsmSet(_ism?: null): IsmSetEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    addDomain(
      _hyperlaneDomain: BigNumberish,
      _wormholeDomain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'addDomain(uint32,uint16)'(
      _hyperlaneDomain: BigNumberish,
      _wormholeDomain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    completeTransfer(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'completeTransfer(bytes)'(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    domains(overrides?: CallOverrides): Promise<BigNumber>;

    'domains()'(overrides?: CallOverrides): Promise<BigNumber>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'enrollRemoteRouter(uint32,bytes32)'(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'enrollRemoteRouters(uint32[],bytes32[])'(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'handle(uint32,bytes32,bytes)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    hook(overrides?: CallOverrides): Promise<BigNumber>;

    'hook()'(overrides?: CallOverrides): Promise<BigNumber>;

    hyperlaneDomainToWormholeDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'hyperlaneDomainToWormholeDomain(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _portalTokenBridge: string,
      _liquidityLayerRouter: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'initialize(address,address,address)'(
      _owner: string,
      _portalTokenBridge: string,
      _liquidityLayerRouter: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<BigNumber>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLayerRouter(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidityLayerRouter()'(overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    'localDomain()'(overrides?: CallOverrides): Promise<BigNumber>;

    mailbox(overrides?: CallOverrides): Promise<BigNumber>;

    'mailbox()'(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    'nonce()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    portalTokenBridge(overrides?: CallOverrides): Promise<BigNumber>;

    'portalTokenBridge()'(overrides?: CallOverrides): Promise<BigNumber>;

    portalTransfersProcessed(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'portalTransfersProcessed(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    receiveTokens(
      _originDomain: BigNumberish,
      _recipient: string,
      _amount: BigNumberish,
      _adapterData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'receiveTokens(uint32,address,uint256,bytes)'(
      _originDomain: BigNumberish,
      _recipient: string,
      _amount: BigNumberish,
      _adapterData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    routers(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'routers(uint32)'(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sendTokens(
      _destinationDomain: BigNumberish,
      arg1: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'sendTokens(uint32,bytes32,address,uint256)'(
      _destinationDomain: BigNumberish,
      arg1: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setHook(address)'(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferId(
      _hyperlaneDomain: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'transferId(uint32,uint224)'(
      _hyperlaneDomain: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'unenrollRemoteRouter(uint32)'(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'unenrollRemoteRouters(uint32[])'(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    addDomain(
      _hyperlaneDomain: BigNumberish,
      _wormholeDomain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'addDomain(uint32,uint16)'(
      _hyperlaneDomain: BigNumberish,
      _wormholeDomain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    completeTransfer(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'completeTransfer(bytes)'(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    domains(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'domains()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'enrollRemoteRouter(uint32,bytes32)'(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'enrollRemoteRouters(uint32[],bytes32[])'(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'handle(uint32,bytes32,bytes)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    hook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'hook()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hyperlaneDomainToWormholeDomain(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'hyperlaneDomainToWormholeDomain(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _portalTokenBridge: string,
      _liquidityLayerRouter: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'initialize(address,address,address)'(
      _owner: string,
      _portalTokenBridge: string,
      _liquidityLayerRouter: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    interchainSecurityModule(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'interchainSecurityModule()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidityLayerRouter(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'liquidityLayerRouter()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'localDomain()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mailbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'mailbox()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nonce()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    portalTokenBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'portalTokenBridge()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    portalTransfersProcessed(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'portalTransfersProcessed(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    receiveTokens(
      _originDomain: BigNumberish,
      _recipient: string,
      _amount: BigNumberish,
      _adapterData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'receiveTokens(uint32,address,uint256,bytes)'(
      _originDomain: BigNumberish,
      _recipient: string,
      _amount: BigNumberish,
      _adapterData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    routers(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'routers(uint32)'(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    sendTokens(
      _destinationDomain: BigNumberish,
      arg1: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'sendTokens(uint32,bytes32,address,uint256)'(
      _destinationDomain: BigNumberish,
      arg1: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setHook(address)'(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferId(
      _hyperlaneDomain: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'transferId(uint32,uint224)'(
      _hyperlaneDomain: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'unenrollRemoteRouter(uint32)'(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'unenrollRemoteRouters(uint32[])'(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
