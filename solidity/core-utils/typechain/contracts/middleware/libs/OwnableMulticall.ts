/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export declare namespace CallLib {
  export type CallStruct = {
    to: BytesLike;
    value: BigNumberish;
    data: BytesLike;
  };

  export type CallStructOutput = [string, BigNumber, string] & {
    to: string;
    value: BigNumber;
    data: string;
  };
}

export interface OwnableMulticallInterface extends utils.Interface {
  functions: {
    'multicall((bytes32,uint256,bytes)[])': FunctionFragment;
    'owner()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'multicall'
      | 'multicall((bytes32,uint256,bytes)[])'
      | 'owner'
      | 'owner()',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'multicall',
    values: [CallLib.CallStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'multicall((bytes32,uint256,bytes)[])',
    values: [CallLib.CallStruct[]],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'multicall((bytes32,uint256,bytes)[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;

  events: {};
}

export interface OwnableMulticall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OwnableMulticallInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    multicall(
      calls: CallLib.CallStruct[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'multicall((bytes32,uint256,bytes)[])'(
      calls: CallLib.CallStruct[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;
  };

  multicall(
    calls: CallLib.CallStruct[],
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'multicall((bytes32,uint256,bytes)[])'(
    calls: CallLib.CallStruct[],
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    multicall(
      calls: CallLib.CallStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'multicall((bytes32,uint256,bytes)[])'(
      calls: CallLib.CallStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    multicall(
      calls: CallLib.CallStruct[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'multicall((bytes32,uint256,bytes)[])'(
      calls: CallLib.CallStruct[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    multicall(
      calls: CallLib.CallStruct[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'multicall((bytes32,uint256,bytes)[])'(
      calls: CallLib.CallStruct[],
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
