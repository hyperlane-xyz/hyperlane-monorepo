/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export type EnrollmentStruct = {
  status: BigNumberish;
  unenrollmentStartBlock: BigNumberish;
};

export type EnrollmentStructOutput = [number, BigNumber] & {
  status: number;
  unenrollmentStartBlock: BigNumber;
};

export interface EnumerableMapEnrollmentInterface extends utils.Interface {
  functions: {
    'decode(bytes32)': FunctionFragment;
    'encode((uint8,uint248))': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'decode'
      | 'decode(bytes32)'
      | 'encode'
      | 'encode((uint8,uint248))',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'decode', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'decode(bytes32)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'encode',
    values: [EnrollmentStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'encode((uint8,uint248))',
    values: [EnrollmentStruct],
  ): string;

  decodeFunctionResult(functionFragment: 'decode', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decode(bytes32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'encode', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'encode((uint8,uint248))',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface EnumerableMapEnrollment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EnumerableMapEnrollmentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decode(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[EnrollmentStructOutput]>;

    'decode(bytes32)'(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[EnrollmentStructOutput]>;

    encode(
      enrollment: EnrollmentStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'encode((uint8,uint248))'(
      enrollment: EnrollmentStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>;
  };

  decode(
    encoded: BytesLike,
    overrides?: CallOverrides,
  ): Promise<EnrollmentStructOutput>;

  'decode(bytes32)'(
    encoded: BytesLike,
    overrides?: CallOverrides,
  ): Promise<EnrollmentStructOutput>;

  encode(
    enrollment: EnrollmentStruct,
    overrides?: CallOverrides,
  ): Promise<string>;

  'encode((uint8,uint248))'(
    enrollment: EnrollmentStruct,
    overrides?: CallOverrides,
  ): Promise<string>;

  callStatic: {
    decode(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<EnrollmentStructOutput>;

    'decode(bytes32)'(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<EnrollmentStructOutput>;

    encode(
      enrollment: EnrollmentStruct,
      overrides?: CallOverrides,
    ): Promise<string>;

    'encode((uint8,uint248))'(
      enrollment: EnrollmentStruct,
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    decode(encoded: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'decode(bytes32)'(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    encode(
      enrollment: EnrollmentStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'encode((uint8,uint248))'(
      enrollment: EnrollmentStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decode(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'decode(bytes32)'(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    encode(
      enrollment: EnrollmentStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'encode((uint8,uint248))'(
      enrollment: EnrollmentStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
