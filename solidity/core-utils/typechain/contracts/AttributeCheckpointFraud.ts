/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../common.js';

export type CheckpointStruct = {
  origin: BigNumberish;
  merkleTree: BytesLike;
  root: BytesLike;
  index: BigNumberish;
  messageId: BytesLike;
};

export type CheckpointStructOutput = [
  number,
  string,
  string,
  number,
  string,
] & {
  origin: number;
  merkleTree: string;
  root: string;
  index: number;
  messageId: string;
};

export type AttributionStruct = {
  fraudType: BigNumberish;
  timestamp: BigNumberish;
};

export type AttributionStructOutput = [number, number] & {
  fraudType: number;
  timestamp: number;
};

export interface AttributeCheckpointFraudInterface extends utils.Interface {
  functions: {
    'PACKAGE_VERSION()': FunctionFragment;
    'attributeMessageId((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes32,bytes)': FunctionFragment;
    'attributePremature((uint32,bytes32,bytes32,uint32,bytes32),bytes)': FunctionFragment;
    'attributeRoot((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes)': FunctionFragment;
    'attributeWhitelist((uint32,bytes32,bytes32,uint32,bytes32),bytes)': FunctionFragment;
    'attributions((uint32,bytes32,bytes32,uint32,bytes32),bytes)': FunctionFragment;
    'checkpointFraudProofs()': FunctionFragment;
    'merkleTreeWhitelist(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'whitelist(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'attributeMessageId'
      | 'attributeMessageId((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes32,bytes)'
      | 'attributePremature'
      | 'attributePremature((uint32,bytes32,bytes32,uint32,bytes32),bytes)'
      | 'attributeRoot'
      | 'attributeRoot((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes)'
      | 'attributeWhitelist'
      | 'attributeWhitelist((uint32,bytes32,bytes32,uint32,bytes32),bytes)'
      | 'attributions'
      | 'attributions((uint32,bytes32,bytes32,uint32,bytes32),bytes)'
      | 'checkpointFraudProofs'
      | 'checkpointFraudProofs()'
      | 'merkleTreeWhitelist'
      | 'merkleTreeWhitelist(address)'
      | 'owner'
      | 'owner()'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'transferOwnership'
      | 'transferOwnership(address)'
      | 'whitelist'
      | 'whitelist(address)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'attributeMessageId',
    values: [CheckpointStruct, BytesLike[], BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'attributeMessageId((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes32,bytes)',
    values: [CheckpointStruct, BytesLike[], BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'attributePremature',
    values: [CheckpointStruct, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'attributePremature((uint32,bytes32,bytes32,uint32,bytes32),bytes)',
    values: [CheckpointStruct, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'attributeRoot',
    values: [CheckpointStruct, BytesLike[], BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'attributeRoot((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes)',
    values: [CheckpointStruct, BytesLike[], BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'attributeWhitelist',
    values: [CheckpointStruct, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'attributeWhitelist((uint32,bytes32,bytes32,uint32,bytes32),bytes)',
    values: [CheckpointStruct, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'attributions',
    values: [CheckpointStruct, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'attributions((uint32,bytes32,bytes32,uint32,bytes32),bytes)',
    values: [CheckpointStruct, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpointFraudProofs',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpointFraudProofs()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'merkleTreeWhitelist',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'merkleTreeWhitelist(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'whitelist', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'whitelist(address)',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'attributeMessageId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'attributeMessageId((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes32,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'attributePremature',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'attributePremature((uint32,bytes32,bytes32,uint32,bytes32),bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'attributeRoot',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'attributeRoot((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'attributeWhitelist',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'attributeWhitelist((uint32,bytes32,bytes32,uint32,bytes32),bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'attributions',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'attributions((uint32,bytes32,bytes32,uint32,bytes32),bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'checkpointFraudProofs',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'checkpointFraudProofs()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'merkleTreeWhitelist',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'merkleTreeWhitelist(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'whitelist(address)',
    data: BytesLike,
  ): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AttributeCheckpointFraud extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AttributeCheckpointFraudInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    attributeMessageId(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      actualMessageId: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'attributeMessageId((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes32,bytes)'(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      actualMessageId: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    attributePremature(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'attributePremature((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    attributeRoot(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'attributeRoot((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes)'(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    attributeWhitelist(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'attributeWhitelist((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    attributions(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[AttributionStructOutput]>;

    'attributions((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[AttributionStructOutput]>;

    checkpointFraudProofs(overrides?: CallOverrides): Promise<[string]>;

    'checkpointFraudProofs()'(overrides?: CallOverrides): Promise<[string]>;

    merkleTreeWhitelist(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'merkleTreeWhitelist(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    whitelist(
      merkleTree: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'whitelist(address)'(
      merkleTree: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  attributeMessageId(
    checkpoint: CheckpointStruct,
    proof: BytesLike[],
    actualMessageId: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'attributeMessageId((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes32,bytes)'(
    checkpoint: CheckpointStruct,
    proof: BytesLike[],
    actualMessageId: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  attributePremature(
    checkpoint: CheckpointStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'attributePremature((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
    checkpoint: CheckpointStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  attributeRoot(
    checkpoint: CheckpointStruct,
    proof: BytesLike[],
    signature: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'attributeRoot((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes)'(
    checkpoint: CheckpointStruct,
    proof: BytesLike[],
    signature: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  attributeWhitelist(
    checkpoint: CheckpointStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'attributeWhitelist((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
    checkpoint: CheckpointStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  attributions(
    checkpoint: CheckpointStruct,
    signature: BytesLike,
    overrides?: CallOverrides,
  ): Promise<AttributionStructOutput>;

  'attributions((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
    checkpoint: CheckpointStruct,
    signature: BytesLike,
    overrides?: CallOverrides,
  ): Promise<AttributionStructOutput>;

  checkpointFraudProofs(overrides?: CallOverrides): Promise<string>;

  'checkpointFraudProofs()'(overrides?: CallOverrides): Promise<string>;

  merkleTreeWhitelist(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'merkleTreeWhitelist(address)'(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  whitelist(
    merkleTree: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'whitelist(address)'(
    merkleTree: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    attributeMessageId(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      actualMessageId: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'attributeMessageId((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes32,bytes)'(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      actualMessageId: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    attributePremature(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'attributePremature((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    attributeRoot(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'attributeRoot((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes)'(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    attributeWhitelist(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'attributeWhitelist((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    attributions(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<AttributionStructOutput>;

    'attributions((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<AttributionStructOutput>;

    checkpointFraudProofs(overrides?: CallOverrides): Promise<string>;

    'checkpointFraudProofs()'(overrides?: CallOverrides): Promise<string>;

    merkleTreeWhitelist(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'merkleTreeWhitelist(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    whitelist(merkleTree: string, overrides?: CallOverrides): Promise<void>;

    'whitelist(address)'(
      merkleTree: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    attributeMessageId(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      actualMessageId: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'attributeMessageId((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes32,bytes)'(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      actualMessageId: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    attributePremature(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'attributePremature((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    attributeRoot(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'attributeRoot((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes)'(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    attributeWhitelist(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'attributeWhitelist((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    attributions(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'attributions((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    checkpointFraudProofs(overrides?: CallOverrides): Promise<BigNumber>;

    'checkpointFraudProofs()'(overrides?: CallOverrides): Promise<BigNumber>;

    merkleTreeWhitelist(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'merkleTreeWhitelist(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    whitelist(
      merkleTree: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'whitelist(address)'(
      merkleTree: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    attributeMessageId(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      actualMessageId: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'attributeMessageId((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes32,bytes)'(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      actualMessageId: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    attributePremature(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'attributePremature((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    attributeRoot(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'attributeRoot((uint32,bytes32,bytes32,uint32,bytes32),bytes32[32],bytes)'(
      checkpoint: CheckpointStruct,
      proof: BytesLike[],
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    attributeWhitelist(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'attributeWhitelist((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    attributions(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'attributions((uint32,bytes32,bytes32,uint32,bytes32),bytes)'(
      checkpoint: CheckpointStruct,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    checkpointFraudProofs(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'checkpointFraudProofs()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    merkleTreeWhitelist(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'merkleTreeWhitelist(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    whitelist(
      merkleTree: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'whitelist(address)'(
      merkleTree: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
