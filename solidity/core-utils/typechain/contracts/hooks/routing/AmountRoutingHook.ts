/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export interface AmountRoutingHookInterface extends utils.Interface {
  functions: {
    'PACKAGE_VERSION()': FunctionFragment;
    'hookType()': FunctionFragment;
    'lower()': FunctionFragment;
    'postDispatch(bytes,bytes)': FunctionFragment;
    'quoteDispatch(bytes,bytes)': FunctionFragment;
    'supportsMetadata(bytes)': FunctionFragment;
    'threshold()': FunctionFragment;
    'upper()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'hookType'
      | 'hookType()'
      | 'lower'
      | 'lower()'
      | 'postDispatch'
      | 'postDispatch(bytes,bytes)'
      | 'quoteDispatch'
      | 'quoteDispatch(bytes,bytes)'
      | 'supportsMetadata'
      | 'supportsMetadata(bytes)'
      | 'threshold'
      | 'threshold()'
      | 'upper'
      | 'upper()',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'hookType', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'hookType()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'lower', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lower()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'postDispatch',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'postDispatch(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDispatch',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDispatch(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsMetadata',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsMetadata(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'threshold', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'threshold()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'upper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upper()', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'hookType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hookType()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lower()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'postDispatch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'postDispatch(bytes,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDispatch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDispatch(bytes,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsMetadata',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsMetadata(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'threshold', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'threshold()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'upper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upper()', data: BytesLike): Result;

  events: {};
}

export interface AmountRoutingHook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AmountRoutingHookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    hookType(overrides?: CallOverrides): Promise<[number]>;

    'hookType()'(overrides?: CallOverrides): Promise<[number]>;

    lower(overrides?: CallOverrides): Promise<[string]>;

    'lower()'(overrides?: CallOverrides): Promise<[string]>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    threshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    'threshold()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    upper(overrides?: CallOverrides): Promise<[string]>;

    'upper()'(overrides?: CallOverrides): Promise<[string]>;
  };

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  hookType(overrides?: CallOverrides): Promise<number>;

  'hookType()'(overrides?: CallOverrides): Promise<number>;

  lower(overrides?: CallOverrides): Promise<string>;

  'lower()'(overrides?: CallOverrides): Promise<string>;

  postDispatch(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'postDispatch(bytes,bytes)'(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  quoteDispatch(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'quoteDispatch(bytes,bytes)'(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  supportsMetadata(
    metadata: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'supportsMetadata(bytes)'(
    metadata: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  threshold(overrides?: CallOverrides): Promise<BigNumber>;

  'threshold()'(overrides?: CallOverrides): Promise<BigNumber>;

  upper(overrides?: CallOverrides): Promise<string>;

  'upper()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    hookType(overrides?: CallOverrides): Promise<number>;

    'hookType()'(overrides?: CallOverrides): Promise<number>;

    lower(overrides?: CallOverrides): Promise<string>;

    'lower()'(overrides?: CallOverrides): Promise<string>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    'threshold()'(overrides?: CallOverrides): Promise<BigNumber>;

    upper(overrides?: CallOverrides): Promise<string>;

    'upper()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    hookType(overrides?: CallOverrides): Promise<BigNumber>;

    'hookType()'(overrides?: CallOverrides): Promise<BigNumber>;

    lower(overrides?: CallOverrides): Promise<BigNumber>;

    'lower()'(overrides?: CallOverrides): Promise<BigNumber>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    'threshold()'(overrides?: CallOverrides): Promise<BigNumber>;

    upper(overrides?: CallOverrides): Promise<BigNumber>;

    'upper()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    hookType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'hookType()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lower()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'threshold()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'upper()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
