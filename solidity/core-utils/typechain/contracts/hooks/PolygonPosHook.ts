/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface PolygonPosHookInterface extends utils.Interface {
  functions: {
    'PACKAGE_VERSION()': FunctionFragment;
    'SEND_MESSAGE_EVENT_SIG()': FunctionFragment;
    'checkpointManager()': FunctionFragment;
    'destinationDomain()': FunctionFragment;
    'fxChildTunnel()': FunctionFragment;
    'fxRoot()': FunctionFragment;
    'hook()': FunctionFragment;
    'hookType()': FunctionFragment;
    'interchainSecurityModule()': FunctionFragment;
    'ism()': FunctionFragment;
    'latestData()': FunctionFragment;
    'localDomain()': FunctionFragment;
    'mailbox()': FunctionFragment;
    'owner()': FunctionFragment;
    'postDispatch(bytes,bytes)': FunctionFragment;
    'processedExits(bytes32)': FunctionFragment;
    'quoteDispatch(bytes,bytes)': FunctionFragment;
    'receiveMessage(bytes)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setFxChildTunnel(address)': FunctionFragment;
    'setHook(address)': FunctionFragment;
    'setInterchainSecurityModule(address)': FunctionFragment;
    'supportsMetadata(bytes)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'SEND_MESSAGE_EVENT_SIG'
      | 'SEND_MESSAGE_EVENT_SIG()'
      | 'checkpointManager'
      | 'checkpointManager()'
      | 'destinationDomain'
      | 'destinationDomain()'
      | 'fxChildTunnel'
      | 'fxChildTunnel()'
      | 'fxRoot'
      | 'fxRoot()'
      | 'hook'
      | 'hook()'
      | 'hookType'
      | 'hookType()'
      | 'interchainSecurityModule'
      | 'interchainSecurityModule()'
      | 'ism'
      | 'ism()'
      | 'latestData'
      | 'latestData()'
      | 'localDomain'
      | 'localDomain()'
      | 'mailbox'
      | 'mailbox()'
      | 'owner'
      | 'owner()'
      | 'postDispatch'
      | 'postDispatch(bytes,bytes)'
      | 'processedExits'
      | 'processedExits(bytes32)'
      | 'quoteDispatch'
      | 'quoteDispatch(bytes,bytes)'
      | 'receiveMessage'
      | 'receiveMessage(bytes)'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'setFxChildTunnel'
      | 'setFxChildTunnel(address)'
      | 'setHook'
      | 'setHook(address)'
      | 'setInterchainSecurityModule'
      | 'setInterchainSecurityModule(address)'
      | 'supportsMetadata'
      | 'supportsMetadata(bytes)'
      | 'transferOwnership'
      | 'transferOwnership(address)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'SEND_MESSAGE_EVENT_SIG',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'SEND_MESSAGE_EVENT_SIG()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpointManager',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpointManager()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'destinationDomain',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'destinationDomain()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'fxChildTunnel',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'fxChildTunnel()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'fxRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fxRoot()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hook', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hook()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hookType', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'hookType()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'interchainSecurityModule',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'interchainSecurityModule()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'ism', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ism()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'latestData',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'latestData()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'localDomain',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'localDomain()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'mailbox', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mailbox()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'postDispatch',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'postDispatch(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'processedExits',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'processedExits(bytes32)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDispatch',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDispatch(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveMessage',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveMessage(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setFxChildTunnel',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setFxChildTunnel(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'setHook', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setHook(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setInterchainSecurityModule',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setInterchainSecurityModule(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsMetadata',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsMetadata(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'SEND_MESSAGE_EVENT_SIG',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'SEND_MESSAGE_EVENT_SIG()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'checkpointManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'checkpointManager()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'destinationDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'destinationDomain()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'fxChildTunnel',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'fxChildTunnel()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'fxRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fxRoot()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hook', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hook()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hookType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hookType()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'interchainSecurityModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'interchainSecurityModule()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'ism', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ism()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestData', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'latestData()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'localDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'localDomain()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'mailbox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mailbox()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'postDispatch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'postDispatch(bytes,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'processedExits',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'processedExits(bytes32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDispatch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDispatch(bytes,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveMessage(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFxChildTunnel',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFxChildTunnel(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setHook', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setHook(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInterchainSecurityModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInterchainSecurityModule(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsMetadata',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsMetadata(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;

  events: {
    'HookSet(address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'IsmSet(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'HookSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HookSet(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized(uint8)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IsmSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IsmSet(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
}

export interface HookSetEventObject {
  _hook: string;
}
export type HookSetEvent = TypedEvent<[string], HookSetEventObject>;

export type HookSetEventFilter = TypedEventFilter<HookSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface IsmSetEventObject {
  _ism: string;
}
export type IsmSetEvent = TypedEvent<[string], IsmSetEventObject>;

export type IsmSetEventFilter = TypedEventFilter<IsmSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PolygonPosHook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PolygonPosHookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<[string]>;

    'SEND_MESSAGE_EVENT_SIG()'(overrides?: CallOverrides): Promise<[string]>;

    checkpointManager(overrides?: CallOverrides): Promise<[string]>;

    'checkpointManager()'(overrides?: CallOverrides): Promise<[string]>;

    destinationDomain(overrides?: CallOverrides): Promise<[number]>;

    'destinationDomain()'(overrides?: CallOverrides): Promise<[number]>;

    fxChildTunnel(overrides?: CallOverrides): Promise<[string]>;

    'fxChildTunnel()'(overrides?: CallOverrides): Promise<[string]>;

    fxRoot(overrides?: CallOverrides): Promise<[string]>;

    'fxRoot()'(overrides?: CallOverrides): Promise<[string]>;

    hook(overrides?: CallOverrides): Promise<[string]>;

    'hook()'(overrides?: CallOverrides): Promise<[string]>;

    hookType(overrides?: CallOverrides): Promise<[number]>;

    'hookType()'(overrides?: CallOverrides): Promise<[number]>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<[string]>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<[string]>;

    ism(overrides?: CallOverrides): Promise<[string]>;

    'ism()'(overrides?: CallOverrides): Promise<[string]>;

    latestData(overrides?: CallOverrides): Promise<[string]>;

    'latestData()'(overrides?: CallOverrides): Promise<[string]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    'localDomain()'(overrides?: CallOverrides): Promise<[number]>;

    mailbox(overrides?: CallOverrides): Promise<[string]>;

    'mailbox()'(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'processedExits(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'receiveMessage(bytes)'(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setFxChildTunnel(address)'(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setHook(address)'(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

  'SEND_MESSAGE_EVENT_SIG()'(overrides?: CallOverrides): Promise<string>;

  checkpointManager(overrides?: CallOverrides): Promise<string>;

  'checkpointManager()'(overrides?: CallOverrides): Promise<string>;

  destinationDomain(overrides?: CallOverrides): Promise<number>;

  'destinationDomain()'(overrides?: CallOverrides): Promise<number>;

  fxChildTunnel(overrides?: CallOverrides): Promise<string>;

  'fxChildTunnel()'(overrides?: CallOverrides): Promise<string>;

  fxRoot(overrides?: CallOverrides): Promise<string>;

  'fxRoot()'(overrides?: CallOverrides): Promise<string>;

  hook(overrides?: CallOverrides): Promise<string>;

  'hook()'(overrides?: CallOverrides): Promise<string>;

  hookType(overrides?: CallOverrides): Promise<number>;

  'hookType()'(overrides?: CallOverrides): Promise<number>;

  interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

  'interchainSecurityModule()'(overrides?: CallOverrides): Promise<string>;

  ism(overrides?: CallOverrides): Promise<string>;

  'ism()'(overrides?: CallOverrides): Promise<string>;

  latestData(overrides?: CallOverrides): Promise<string>;

  'latestData()'(overrides?: CallOverrides): Promise<string>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  'localDomain()'(overrides?: CallOverrides): Promise<number>;

  mailbox(overrides?: CallOverrides): Promise<string>;

  'mailbox()'(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  postDispatch(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'postDispatch(bytes,bytes)'(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  processedExits(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  'processedExits(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  quoteDispatch(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'quoteDispatch(bytes,bytes)'(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  receiveMessage(
    inputData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'receiveMessage(bytes)'(
    inputData: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setFxChildTunnel(
    _fxChildTunnel: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setFxChildTunnel(address)'(
    _fxChildTunnel: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setHook(
    _hook: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setHook(address)'(
    _hook: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setInterchainSecurityModule(
    _module: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setInterchainSecurityModule(address)'(
    _module: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  supportsMetadata(
    metadata: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'supportsMetadata(bytes)'(
    metadata: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

    'SEND_MESSAGE_EVENT_SIG()'(overrides?: CallOverrides): Promise<string>;

    checkpointManager(overrides?: CallOverrides): Promise<string>;

    'checkpointManager()'(overrides?: CallOverrides): Promise<string>;

    destinationDomain(overrides?: CallOverrides): Promise<number>;

    'destinationDomain()'(overrides?: CallOverrides): Promise<number>;

    fxChildTunnel(overrides?: CallOverrides): Promise<string>;

    'fxChildTunnel()'(overrides?: CallOverrides): Promise<string>;

    fxRoot(overrides?: CallOverrides): Promise<string>;

    'fxRoot()'(overrides?: CallOverrides): Promise<string>;

    hook(overrides?: CallOverrides): Promise<string>;

    'hook()'(overrides?: CallOverrides): Promise<string>;

    hookType(overrides?: CallOverrides): Promise<number>;

    'hookType()'(overrides?: CallOverrides): Promise<number>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<string>;

    ism(overrides?: CallOverrides): Promise<string>;

    'ism()'(overrides?: CallOverrides): Promise<string>;

    latestData(overrides?: CallOverrides): Promise<string>;

    'latestData()'(overrides?: CallOverrides): Promise<string>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    'localDomain()'(overrides?: CallOverrides): Promise<number>;

    mailbox(overrides?: CallOverrides): Promise<string>;

    'mailbox()'(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'processedExits(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'receiveMessage(bytes)'(
      inputData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setFxChildTunnel(address)'(
      _fxChildTunnel: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setHook(_hook: string, overrides?: CallOverrides): Promise<void>;

    'setHook(address)'(_hook: string, overrides?: CallOverrides): Promise<void>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'HookSet(address)'(_hook?: null): HookSetEventFilter;
    HookSet(_hook?: null): HookSetEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'IsmSet(address)'(_ism?: null): IsmSetEventFilter;
    IsmSet(_ism?: null): IsmSetEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    'SEND_MESSAGE_EVENT_SIG()'(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointManager(overrides?: CallOverrides): Promise<BigNumber>;

    'checkpointManager()'(overrides?: CallOverrides): Promise<BigNumber>;

    destinationDomain(overrides?: CallOverrides): Promise<BigNumber>;

    'destinationDomain()'(overrides?: CallOverrides): Promise<BigNumber>;

    fxChildTunnel(overrides?: CallOverrides): Promise<BigNumber>;

    'fxChildTunnel()'(overrides?: CallOverrides): Promise<BigNumber>;

    fxRoot(overrides?: CallOverrides): Promise<BigNumber>;

    'fxRoot()'(overrides?: CallOverrides): Promise<BigNumber>;

    hook(overrides?: CallOverrides): Promise<BigNumber>;

    'hook()'(overrides?: CallOverrides): Promise<BigNumber>;

    hookType(overrides?: CallOverrides): Promise<BigNumber>;

    'hookType()'(overrides?: CallOverrides): Promise<BigNumber>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<BigNumber>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<BigNumber>;

    ism(overrides?: CallOverrides): Promise<BigNumber>;

    'ism()'(overrides?: CallOverrides): Promise<BigNumber>;

    latestData(overrides?: CallOverrides): Promise<BigNumber>;

    'latestData()'(overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    'localDomain()'(overrides?: CallOverrides): Promise<BigNumber>;

    mailbox(overrides?: CallOverrides): Promise<BigNumber>;

    'mailbox()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'processedExits(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'receiveMessage(bytes)'(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setFxChildTunnel(address)'(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setHook(address)'(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    SEND_MESSAGE_EVENT_SIG(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'SEND_MESSAGE_EVENT_SIG()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    checkpointManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'checkpointManager()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    destinationDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'destinationDomain()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    fxChildTunnel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'fxChildTunnel()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'fxRoot()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'hook()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hookType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'hookType()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interchainSecurityModule(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'interchainSecurityModule()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    ism(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'ism()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'latestData()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'localDomain()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mailbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'mailbox()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'processedExits(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'receiveMessage(bytes)'(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setFxChildTunnel(address)'(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setHook(address)'(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
