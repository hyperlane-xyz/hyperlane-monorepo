/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export declare namespace StorageGasOracle {
  export type RemoteGasDataConfigStruct = {
    remoteDomain: BigNumberish;
    tokenExchangeRate: BigNumberish;
    gasPrice: BigNumberish;
  };

  export type RemoteGasDataConfigStructOutput = [
    number,
    BigNumber,
    BigNumber,
  ] & {
    remoteDomain: number;
    tokenExchangeRate: BigNumber;
    gasPrice: BigNumber;
  };
}

export interface StorageGasOracleInterface extends utils.Interface {
  functions: {
    'PACKAGE_VERSION()': FunctionFragment;
    'getExchangeRateAndGasPrice(uint32)': FunctionFragment;
    'owner()': FunctionFragment;
    'remoteGasData(uint32)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setRemoteGasData((uint32,uint128,uint128))': FunctionFragment;
    'setRemoteGasDataConfigs((uint32,uint128,uint128)[])': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'getExchangeRateAndGasPrice'
      | 'getExchangeRateAndGasPrice(uint32)'
      | 'owner'
      | 'owner()'
      | 'remoteGasData'
      | 'remoteGasData(uint32)'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'setRemoteGasData'
      | 'setRemoteGasData((uint32,uint128,uint128))'
      | 'setRemoteGasDataConfigs'
      | 'setRemoteGasDataConfigs((uint32,uint128,uint128)[])'
      | 'transferOwnership'
      | 'transferOwnership(address)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getExchangeRateAndGasPrice',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getExchangeRateAndGasPrice(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'remoteGasData',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'remoteGasData(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setRemoteGasData',
    values: [StorageGasOracle.RemoteGasDataConfigStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRemoteGasData((uint32,uint128,uint128))',
    values: [StorageGasOracle.RemoteGasDataConfigStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRemoteGasDataConfigs',
    values: [StorageGasOracle.RemoteGasDataConfigStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRemoteGasDataConfigs((uint32,uint128,uint128)[])',
    values: [StorageGasOracle.RemoteGasDataConfigStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getExchangeRateAndGasPrice',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getExchangeRateAndGasPrice(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'remoteGasData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'remoteGasData(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRemoteGasData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRemoteGasData((uint32,uint128,uint128))',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRemoteGasDataConfigs',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRemoteGasDataConfigs((uint32,uint128,uint128)[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
    'RemoteGasDataSet(uint32,uint128,uint128)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoteGasDataSet'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'RemoteGasDataSet(uint32,uint128,uint128)',
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoteGasDataSetEventObject {
  remoteDomain: number;
  tokenExchangeRate: BigNumber;
  gasPrice: BigNumber;
}
export type RemoteGasDataSetEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  RemoteGasDataSetEventObject
>;

export type RemoteGasDataSetEventFilter =
  TypedEventFilter<RemoteGasDataSetEvent>;

export interface StorageGasOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StorageGasOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    getExchangeRateAndGasPrice(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    'getExchangeRateAndGasPrice(uint32)'(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    remoteGasData(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    'remoteGasData(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setRemoteGasData(
      _config: StorageGasOracle.RemoteGasDataConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setRemoteGasData((uint32,uint128,uint128))'(
      _config: StorageGasOracle.RemoteGasDataConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setRemoteGasDataConfigs(
      _configs: StorageGasOracle.RemoteGasDataConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setRemoteGasDataConfigs((uint32,uint128,uint128)[])'(
      _configs: StorageGasOracle.RemoteGasDataConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  getExchangeRateAndGasPrice(
    _destinationDomain: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenExchangeRate: BigNumber;
      gasPrice: BigNumber;
    }
  >;

  'getExchangeRateAndGasPrice(uint32)'(
    _destinationDomain: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenExchangeRate: BigNumber;
      gasPrice: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  remoteGasData(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenExchangeRate: BigNumber;
      gasPrice: BigNumber;
    }
  >;

  'remoteGasData(uint32)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenExchangeRate: BigNumber;
      gasPrice: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setRemoteGasData(
    _config: StorageGasOracle.RemoteGasDataConfigStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setRemoteGasData((uint32,uint128,uint128))'(
    _config: StorageGasOracle.RemoteGasDataConfigStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setRemoteGasDataConfigs(
    _configs: StorageGasOracle.RemoteGasDataConfigStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setRemoteGasDataConfigs((uint32,uint128,uint128)[])'(
    _configs: StorageGasOracle.RemoteGasDataConfigStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    getExchangeRateAndGasPrice(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    'getExchangeRateAndGasPrice(uint32)'(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    remoteGasData(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    'remoteGasData(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    setRemoteGasData(
      _config: StorageGasOracle.RemoteGasDataConfigStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setRemoteGasData((uint32,uint128,uint128))'(
      _config: StorageGasOracle.RemoteGasDataConfigStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRemoteGasDataConfigs(
      _configs: StorageGasOracle.RemoteGasDataConfigStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'setRemoteGasDataConfigs((uint32,uint128,uint128)[])'(
      _configs: StorageGasOracle.RemoteGasDataConfigStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'RemoteGasDataSet(uint32,uint128,uint128)'(
      remoteDomain?: BigNumberish | null,
      tokenExchangeRate?: null,
      gasPrice?: null,
    ): RemoteGasDataSetEventFilter;
    RemoteGasDataSet(
      remoteDomain?: BigNumberish | null,
      tokenExchangeRate?: null,
      gasPrice?: null,
    ): RemoteGasDataSetEventFilter;
  };

  estimateGas: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRateAndGasPrice(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getExchangeRateAndGasPrice(uint32)'(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    remoteGasData(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'remoteGasData(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setRemoteGasData(
      _config: StorageGasOracle.RemoteGasDataConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setRemoteGasData((uint32,uint128,uint128))'(
      _config: StorageGasOracle.RemoteGasDataConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setRemoteGasDataConfigs(
      _configs: StorageGasOracle.RemoteGasDataConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setRemoteGasDataConfigs((uint32,uint128,uint128)[])'(
      _configs: StorageGasOracle.RemoteGasDataConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getExchangeRateAndGasPrice(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getExchangeRateAndGasPrice(uint32)'(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remoteGasData(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'remoteGasData(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setRemoteGasData(
      _config: StorageGasOracle.RemoteGasDataConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setRemoteGasData((uint32,uint128,uint128))'(
      _config: StorageGasOracle.RemoteGasDataConfigStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setRemoteGasDataConfigs(
      _configs: StorageGasOracle.RemoteGasDataConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setRemoteGasDataConfigs((uint32,uint128,uint128)[])'(
      _configs: StorageGasOracle.RemoteGasDataConfigStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
