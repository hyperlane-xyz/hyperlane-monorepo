/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export declare namespace InterchainGasPaymaster {
  export type DomainGasConfigStruct = {
    gasOracle: string;
    gasOverhead: BigNumberish;
  };

  export type DomainGasConfigStructOutput = [string, BigNumber] & {
    gasOracle: string;
    gasOverhead: BigNumber;
  };

  export type GasParamStruct = {
    remoteDomain: BigNumberish;
    config: InterchainGasPaymaster.DomainGasConfigStruct;
  };

  export type GasParamStructOutput = [
    number,
    InterchainGasPaymaster.DomainGasConfigStructOutput,
  ] & {
    remoteDomain: number;
    config: InterchainGasPaymaster.DomainGasConfigStructOutput;
  };
}

export interface InterchainGasPaymasterInterface extends utils.Interface {
  functions: {
    'PACKAGE_VERSION()': FunctionFragment;
    'beneficiary()': FunctionFragment;
    'claim()': FunctionFragment;
    'deployedBlock()': FunctionFragment;
    'destinationGasConfigs(uint32)': FunctionFragment;
    'destinationGasLimit(uint32,uint256)': FunctionFragment;
    'getExchangeRateAndGasPrice(uint32)': FunctionFragment;
    'hookType()': FunctionFragment;
    'initialize(address,address)': FunctionFragment;
    'owner()': FunctionFragment;
    'payForGas(bytes32,uint32,uint256,address)': FunctionFragment;
    'postDispatch(bytes,bytes)': FunctionFragment;
    'quoteDispatch(bytes,bytes)': FunctionFragment;
    'quoteGasPayment(uint32,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setBeneficiary(address)': FunctionFragment;
    'setDestinationGasConfigs((uint32,(address,uint96))[])': FunctionFragment;
    'supportsMetadata(bytes)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'beneficiary'
      | 'beneficiary()'
      | 'claim'
      | 'claim()'
      | 'deployedBlock'
      | 'deployedBlock()'
      | 'destinationGasConfigs'
      | 'destinationGasConfigs(uint32)'
      | 'destinationGasLimit'
      | 'destinationGasLimit(uint32,uint256)'
      | 'getExchangeRateAndGasPrice'
      | 'getExchangeRateAndGasPrice(uint32)'
      | 'hookType'
      | 'hookType()'
      | 'initialize'
      | 'initialize(address,address)'
      | 'owner'
      | 'owner()'
      | 'payForGas'
      | 'payForGas(bytes32,uint32,uint256,address)'
      | 'postDispatch'
      | 'postDispatch(bytes,bytes)'
      | 'quoteDispatch'
      | 'quoteDispatch(bytes,bytes)'
      | 'quoteGasPayment'
      | 'quoteGasPayment(uint32,uint256)'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'setBeneficiary'
      | 'setBeneficiary(address)'
      | 'setDestinationGasConfigs'
      | 'setDestinationGasConfigs((uint32,(address,uint96))[])'
      | 'supportsMetadata'
      | 'supportsMetadata(bytes)'
      | 'transferOwnership'
      | 'transferOwnership(address)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'beneficiary',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'beneficiary()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'claim', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claim()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deployedBlock',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deployedBlock()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'destinationGasConfigs',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'destinationGasConfigs(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'destinationGasLimit',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'destinationGasLimit(uint32,uint256)',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getExchangeRateAndGasPrice',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getExchangeRateAndGasPrice(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'hookType', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'hookType()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize(address,address)',
    values: [string, string],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'payForGas',
    values: [BytesLike, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'payForGas(bytes32,uint32,uint256,address)',
    values: [BytesLike, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'postDispatch',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'postDispatch(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDispatch',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDispatch(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteGasPayment',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteGasPayment(uint32,uint256)',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setBeneficiary',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBeneficiary(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDestinationGasConfigs',
    values: [InterchainGasPaymaster.GasParamStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDestinationGasConfigs((uint32,(address,uint96))[])',
    values: [InterchainGasPaymaster.GasParamStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsMetadata',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsMetadata(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'beneficiary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'beneficiary()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'deployedBlock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deployedBlock()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'destinationGasConfigs',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'destinationGasConfigs(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'destinationGasLimit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'destinationGasLimit(uint32,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getExchangeRateAndGasPrice',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getExchangeRateAndGasPrice(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'hookType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hookType()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initialize(address,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payForGas', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'payForGas(bytes32,uint32,uint256,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'postDispatch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'postDispatch(bytes,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDispatch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDispatch(bytes,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteGasPayment',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteGasPayment(uint32,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBeneficiary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBeneficiary(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDestinationGasConfigs',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setDestinationGasConfigs((uint32,(address,uint96))[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsMetadata',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsMetadata(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;

  events: {
    'BeneficiarySet(address)': EventFragment;
    'DestinationGasConfigSet(uint32,address,uint96)': EventFragment;
    'GasPayment(bytes32,uint32,uint256,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BeneficiarySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeneficiarySet(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DestinationGasConfigSet'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'DestinationGasConfigSet(uint32,address,uint96)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GasPayment'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'GasPayment(bytes32,uint32,uint256,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized(uint8)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
}

export interface BeneficiarySetEventObject {
  beneficiary: string;
}
export type BeneficiarySetEvent = TypedEvent<
  [string],
  BeneficiarySetEventObject
>;

export type BeneficiarySetEventFilter = TypedEventFilter<BeneficiarySetEvent>;

export interface DestinationGasConfigSetEventObject {
  remoteDomain: number;
  gasOracle: string;
  gasOverhead: BigNumber;
}
export type DestinationGasConfigSetEvent = TypedEvent<
  [number, string, BigNumber],
  DestinationGasConfigSetEventObject
>;

export type DestinationGasConfigSetEventFilter =
  TypedEventFilter<DestinationGasConfigSetEvent>;

export interface GasPaymentEventObject {
  messageId: string;
  destinationDomain: number;
  gasAmount: BigNumber;
  payment: BigNumber;
}
export type GasPaymentEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  GasPaymentEventObject
>;

export type GasPaymentEventFilter = TypedEventFilter<GasPaymentEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface InterchainGasPaymaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InterchainGasPaymasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    'beneficiary()'(overrides?: CallOverrides): Promise<[string]>;

    claim(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'claim()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    deployedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    'deployedBlock()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    destinationGasConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber] & { gasOracle: string; gasOverhead: BigNumber }
    >;

    'destinationGasConfigs(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber] & { gasOracle: string; gasOverhead: BigNumber }
    >;

    destinationGasLimit(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'destinationGasLimit(uint32,uint256)'(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getExchangeRateAndGasPrice(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    'getExchangeRateAndGasPrice(uint32)'(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    hookType(overrides?: CallOverrides): Promise<[number]>;

    'hookType()'(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      _owner: string,
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'initialize(address,address)'(
      _owner: string,
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    payForGas(
      _messageId: BytesLike,
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'payForGas(bytes32,uint32,uint256,address)'(
      _messageId: BytesLike,
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    quoteGasPayment(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'quoteGasPayment(uint32,uint256)'(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setBeneficiary(address)'(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setDestinationGasConfigs(
      _configs: InterchainGasPaymaster.GasParamStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setDestinationGasConfigs((uint32,(address,uint96))[])'(
      _configs: InterchainGasPaymaster.GasParamStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  'beneficiary()'(overrides?: CallOverrides): Promise<string>;

  claim(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'claim()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  deployedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  'deployedBlock()'(overrides?: CallOverrides): Promise<BigNumber>;

  destinationGasConfigs(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber] & { gasOracle: string; gasOverhead: BigNumber }
  >;

  'destinationGasConfigs(uint32)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber] & { gasOracle: string; gasOverhead: BigNumber }
  >;

  destinationGasLimit(
    _destinationDomain: BigNumberish,
    _gasLimit: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'destinationGasLimit(uint32,uint256)'(
    _destinationDomain: BigNumberish,
    _gasLimit: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getExchangeRateAndGasPrice(
    _destinationDomain: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenExchangeRate: BigNumber;
      gasPrice: BigNumber;
    }
  >;

  'getExchangeRateAndGasPrice(uint32)'(
    _destinationDomain: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenExchangeRate: BigNumber;
      gasPrice: BigNumber;
    }
  >;

  hookType(overrides?: CallOverrides): Promise<number>;

  'hookType()'(overrides?: CallOverrides): Promise<number>;

  initialize(
    _owner: string,
    _beneficiary: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'initialize(address,address)'(
    _owner: string,
    _beneficiary: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  payForGas(
    _messageId: BytesLike,
    _destinationDomain: BigNumberish,
    _gasLimit: BigNumberish,
    _refundAddress: string,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'payForGas(bytes32,uint32,uint256,address)'(
    _messageId: BytesLike,
    _destinationDomain: BigNumberish,
    _gasLimit: BigNumberish,
    _refundAddress: string,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  postDispatch(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'postDispatch(bytes,bytes)'(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  quoteDispatch(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'quoteDispatch(bytes,bytes)'(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  quoteGasPayment(
    _destinationDomain: BigNumberish,
    _gasLimit: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'quoteGasPayment(uint32,uint256)'(
    _destinationDomain: BigNumberish,
    _gasLimit: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setBeneficiary(
    _beneficiary: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setBeneficiary(address)'(
    _beneficiary: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setDestinationGasConfigs(
    _configs: InterchainGasPaymaster.GasParamStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setDestinationGasConfigs((uint32,(address,uint96))[])'(
    _configs: InterchainGasPaymaster.GasParamStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  supportsMetadata(
    metadata: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'supportsMetadata(bytes)'(
    metadata: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    'beneficiary()'(overrides?: CallOverrides): Promise<string>;

    claim(overrides?: CallOverrides): Promise<void>;

    'claim()'(overrides?: CallOverrides): Promise<void>;

    deployedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    'deployedBlock()'(overrides?: CallOverrides): Promise<BigNumber>;

    destinationGasConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber] & { gasOracle: string; gasOverhead: BigNumber }
    >;

    'destinationGasConfigs(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber] & { gasOracle: string; gasOverhead: BigNumber }
    >;

    destinationGasLimit(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'destinationGasLimit(uint32,uint256)'(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getExchangeRateAndGasPrice(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    'getExchangeRateAndGasPrice(uint32)'(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenExchangeRate: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    hookType(overrides?: CallOverrides): Promise<number>;

    'hookType()'(overrides?: CallOverrides): Promise<number>;

    initialize(
      _owner: string,
      _beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'initialize(address,address)'(
      _owner: string,
      _beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    payForGas(
      _messageId: BytesLike,
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      _refundAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'payForGas(bytes32,uint32,uint256,address)'(
      _messageId: BytesLike,
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      _refundAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    quoteGasPayment(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'quoteGasPayment(uint32,uint256)'(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setBeneficiary(address)'(
      _beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDestinationGasConfigs(
      _configs: InterchainGasPaymaster.GasParamStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'setDestinationGasConfigs((uint32,(address,uint96))[])'(
      _configs: InterchainGasPaymaster.GasParamStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'BeneficiarySet(address)'(beneficiary?: null): BeneficiarySetEventFilter;
    BeneficiarySet(beneficiary?: null): BeneficiarySetEventFilter;

    'DestinationGasConfigSet(uint32,address,uint96)'(
      remoteDomain?: null,
      gasOracle?: null,
      gasOverhead?: null,
    ): DestinationGasConfigSetEventFilter;
    DestinationGasConfigSet(
      remoteDomain?: null,
      gasOracle?: null,
      gasOverhead?: null,
    ): DestinationGasConfigSetEventFilter;

    'GasPayment(bytes32,uint32,uint256,uint256)'(
      messageId?: BytesLike | null,
      destinationDomain?: BigNumberish | null,
      gasAmount?: null,
      payment?: null,
    ): GasPaymentEventFilter;
    GasPayment(
      messageId?: BytesLike | null,
      destinationDomain?: BigNumberish | null,
      gasAmount?: null,
      payment?: null,
    ): GasPaymentEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    'beneficiary()'(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    'claim()'(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    deployedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    'deployedBlock()'(overrides?: CallOverrides): Promise<BigNumber>;

    destinationGasConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'destinationGasConfigs(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    destinationGasLimit(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'destinationGasLimit(uint32,uint256)'(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getExchangeRateAndGasPrice(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getExchangeRateAndGasPrice(uint32)'(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    hookType(overrides?: CallOverrides): Promise<BigNumber>;

    'hookType()'(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'initialize(address,address)'(
      _owner: string,
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    payForGas(
      _messageId: BytesLike,
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'payForGas(bytes32,uint32,uint256,address)'(
      _messageId: BytesLike,
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    quoteGasPayment(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'quoteGasPayment(uint32,uint256)'(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setBeneficiary(address)'(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setDestinationGasConfigs(
      _configs: InterchainGasPaymaster.GasParamStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setDestinationGasConfigs((uint32,(address,uint96))[])'(
      _configs: InterchainGasPaymaster.GasParamStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'beneficiary()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'claim()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    deployedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'deployedBlock()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destinationGasConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'destinationGasConfigs(uint32)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    destinationGasLimit(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'destinationGasLimit(uint32,uint256)'(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getExchangeRateAndGasPrice(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getExchangeRateAndGasPrice(uint32)'(
      _destinationDomain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    hookType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'hookType()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'initialize(address,address)'(
      _owner: string,
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payForGas(
      _messageId: BytesLike,
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'payForGas(bytes32,uint32,uint256,address)'(
      _messageId: BytesLike,
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    quoteGasPayment(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'quoteGasPayment(uint32,uint256)'(
      _destinationDomain: BigNumberish,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setBeneficiary(address)'(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setDestinationGasConfigs(
      _configs: InterchainGasPaymaster.GasParamStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setDestinationGasConfigs((uint32,(address,uint96))[])'(
      _configs: InterchainGasPaymaster.GasParamStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
