/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface ProtocolFeeInterface extends utils.Interface {
  functions: {
    'MAX_PROTOCOL_FEE()': FunctionFragment;
    'PACKAGE_VERSION()': FunctionFragment;
    'beneficiary()': FunctionFragment;
    'collectProtocolFees()': FunctionFragment;
    'hookType()': FunctionFragment;
    'owner()': FunctionFragment;
    'postDispatch(bytes,bytes)': FunctionFragment;
    'protocolFee()': FunctionFragment;
    'quoteDispatch(bytes,bytes)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setBeneficiary(address)': FunctionFragment;
    'setProtocolFee(uint256)': FunctionFragment;
    'supportsMetadata(bytes)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_PROTOCOL_FEE'
      | 'MAX_PROTOCOL_FEE()'
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'beneficiary'
      | 'beneficiary()'
      | 'collectProtocolFees'
      | 'collectProtocolFees()'
      | 'hookType'
      | 'hookType()'
      | 'owner'
      | 'owner()'
      | 'postDispatch'
      | 'postDispatch(bytes,bytes)'
      | 'protocolFee'
      | 'protocolFee()'
      | 'quoteDispatch'
      | 'quoteDispatch(bytes,bytes)'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'setBeneficiary'
      | 'setBeneficiary(address)'
      | 'setProtocolFee'
      | 'setProtocolFee(uint256)'
      | 'supportsMetadata'
      | 'supportsMetadata(bytes)'
      | 'transferOwnership'
      | 'transferOwnership(address)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'MAX_PROTOCOL_FEE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MAX_PROTOCOL_FEE()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'beneficiary',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'beneficiary()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'collectProtocolFees',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'collectProtocolFees()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'hookType', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'hookType()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'postDispatch',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'postDispatch(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolFee',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolFee()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDispatch',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteDispatch(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setBeneficiary',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBeneficiary(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setProtocolFee',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setProtocolFee(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsMetadata',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsMetadata(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'MAX_PROTOCOL_FEE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MAX_PROTOCOL_FEE()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'beneficiary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'beneficiary()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'collectProtocolFees',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'collectProtocolFees()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'hookType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hookType()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'postDispatch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'postDispatch(bytes,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolFee()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDispatch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDispatch(bytes,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBeneficiary',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBeneficiary(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setProtocolFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setProtocolFee(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsMetadata',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsMetadata(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;

  events: {
    'BeneficiarySet(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'ProtocolFeeSet(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BeneficiarySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeneficiarySet(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeSet(uint256)'): EventFragment;
}

export interface BeneficiarySetEventObject {
  beneficiary: string;
}
export type BeneficiarySetEvent = TypedEvent<
  [string],
  BeneficiarySetEventObject
>;

export type BeneficiarySetEventFilter = TypedEventFilter<BeneficiarySetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProtocolFeeSetEventObject {
  protocolFee: BigNumber;
}
export type ProtocolFeeSetEvent = TypedEvent<
  [BigNumber],
  ProtocolFeeSetEventObject
>;

export type ProtocolFeeSetEventFilter = TypedEventFilter<ProtocolFeeSetEvent>;

export interface ProtocolFee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProtocolFeeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    'MAX_PROTOCOL_FEE()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    'beneficiary()'(overrides?: CallOverrides): Promise<[string]>;

    collectProtocolFees(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'collectProtocolFees()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    hookType(overrides?: CallOverrides): Promise<[number]>;

    'hookType()'(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    'protocolFee()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setBeneficiary(address)'(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setProtocolFee(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  'MAX_PROTOCOL_FEE()'(overrides?: CallOverrides): Promise<BigNumber>;

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  'beneficiary()'(overrides?: CallOverrides): Promise<string>;

  collectProtocolFees(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'collectProtocolFees()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  hookType(overrides?: CallOverrides): Promise<number>;

  'hookType()'(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  postDispatch(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'postDispatch(bytes,bytes)'(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  'protocolFee()'(overrides?: CallOverrides): Promise<BigNumber>;

  quoteDispatch(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'quoteDispatch(bytes,bytes)'(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setBeneficiary(
    _beneficiary: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setBeneficiary(address)'(
    _beneficiary: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setProtocolFee(uint256)'(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  supportsMetadata(
    metadata: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'supportsMetadata(bytes)'(
    metadata: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    'MAX_PROTOCOL_FEE()'(overrides?: CallOverrides): Promise<BigNumber>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    'beneficiary()'(overrides?: CallOverrides): Promise<string>;

    collectProtocolFees(overrides?: CallOverrides): Promise<void>;

    'collectProtocolFees()'(overrides?: CallOverrides): Promise<void>;

    hookType(overrides?: CallOverrides): Promise<number>;

    'hookType()'(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFee()'(overrides?: CallOverrides): Promise<BigNumber>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setBeneficiary(address)'(
      _beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setProtocolFee(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'BeneficiarySet(address)'(beneficiary?: null): BeneficiarySetEventFilter;
    BeneficiarySet(beneficiary?: null): BeneficiarySetEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'ProtocolFeeSet(uint256)'(protocolFee?: null): ProtocolFeeSetEventFilter;
    ProtocolFeeSet(protocolFee?: null): ProtocolFeeSetEventFilter;
  };

  estimateGas: {
    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    'MAX_PROTOCOL_FEE()'(overrides?: CallOverrides): Promise<BigNumber>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    'beneficiary()'(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocolFees(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'collectProtocolFees()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    hookType(overrides?: CallOverrides): Promise<BigNumber>;

    'hookType()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    'protocolFee()'(overrides?: CallOverrides): Promise<BigNumber>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setBeneficiary(address)'(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setProtocolFee(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'MAX_PROTOCOL_FEE()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'beneficiary()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectProtocolFees(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'collectProtocolFees()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    hookType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'hookType()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'postDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'protocolFee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteDispatch(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'quoteDispatch(bytes,bytes)'(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setBeneficiary(address)'(
      _beneficiary: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setProtocolFee(uint256)'(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    supportsMetadata(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'supportsMetadata(bytes)'(
      metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
