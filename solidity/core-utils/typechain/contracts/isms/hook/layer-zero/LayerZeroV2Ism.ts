/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../../common.js';

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [number, string, BigNumber] & {
  srcEid: number;
  sender: string;
  nonce: BigNumber;
};

export interface LayerZeroV2IsmInterface extends utils.Interface {
  functions: {
    'PACKAGE_VERSION()': FunctionFragment;
    'VERIFIED_MASK_INDEX()': FunctionFragment;
    'authorizedHook()': FunctionFragment;
    'endpoint()': FunctionFragment;
    'isVerified(bytes)': FunctionFragment;
    'lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)': FunctionFragment;
    'moduleType()': FunctionFragment;
    'preVerifyMessage(bytes32,uint256)': FunctionFragment;
    'setAuthorizedHook(bytes32)': FunctionFragment;
    'verifiedMessages(bytes32)': FunctionFragment;
    'verify(bytes,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'VERIFIED_MASK_INDEX'
      | 'VERIFIED_MASK_INDEX()'
      | 'authorizedHook'
      | 'authorizedHook()'
      | 'endpoint'
      | 'endpoint()'
      | 'isVerified'
      | 'isVerified(bytes)'
      | 'lzReceive'
      | 'lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)'
      | 'moduleType'
      | 'moduleType()'
      | 'preVerifyMessage'
      | 'preVerifyMessage(bytes32,uint256)'
      | 'setAuthorizedHook'
      | 'setAuthorizedHook(bytes32)'
      | 'verifiedMessages'
      | 'verifiedMessages(bytes32)'
      | 'verify'
      | 'verify(bytes,bytes)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'VERIFIED_MASK_INDEX',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'VERIFIED_MASK_INDEX()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'authorizedHook',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'authorizedHook()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'endpoint', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'endpoint()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'isVerified',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isVerified(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'lzReceive',
    values: [OriginStruct, BytesLike, BytesLike, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)',
    values: [OriginStruct, BytesLike, BytesLike, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'moduleType',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'moduleType()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'preVerifyMessage',
    values: [BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'preVerifyMessage(bytes32,uint256)',
    values: [BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAuthorizedHook',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAuthorizedHook(bytes32)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'verifiedMessages',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'verifiedMessages(bytes32)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'verify',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'verify(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'VERIFIED_MASK_INDEX',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'VERIFIED_MASK_INDEX()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'authorizedHook',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'authorizedHook()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'endpoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'endpoint()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isVerified', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isVerified(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lzReceive', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'moduleType', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'moduleType()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'preVerifyMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'preVerifyMessage(bytes32,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAuthorizedHook',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAuthorizedHook(bytes32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'verifiedMessages',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'verifiedMessages(bytes32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'verify(bytes,bytes)',
    data: BytesLike,
  ): Result;

  events: {
    'Initialized(uint8)': EventFragment;
    'ReceivedMessage(bytes32,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized(uint8)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReceivedMessage'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ReceivedMessage(bytes32,uint256)',
  ): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ReceivedMessageEventObject {
  messageId: string;
  msgValue: BigNumber;
}
export type ReceivedMessageEvent = TypedEvent<
  [string, BigNumber],
  ReceivedMessageEventObject
>;

export type ReceivedMessageEventFilter = TypedEventFilter<ReceivedMessageEvent>;

export interface LayerZeroV2Ism extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LayerZeroV2IsmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    VERIFIED_MASK_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    'VERIFIED_MASK_INDEX()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    authorizedHook(overrides?: CallOverrides): Promise<[string]>;

    'authorizedHook()'(overrides?: CallOverrides): Promise<[string]>;

    endpoint(overrides?: CallOverrides): Promise<[string]>;

    'endpoint()'(overrides?: CallOverrides): Promise<[string]>;

    isVerified(
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'isVerified(bytes)'(
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    lzReceive(
      arg0: OriginStruct,
      arg1: BytesLike,
      _lzMessage: BytesLike,
      arg3: string,
      arg4: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)'(
      arg0: OriginStruct,
      arg1: BytesLike,
      _lzMessage: BytesLike,
      arg3: string,
      arg4: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    moduleType(overrides?: CallOverrides): Promise<[number]>;

    'moduleType()'(overrides?: CallOverrides): Promise<[number]>;

    preVerifyMessage(
      messageId: BytesLike,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'preVerifyMessage(bytes32,uint256)'(
      messageId: BytesLike,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    setAuthorizedHook(
      _hook: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setAuthorizedHook(bytes32)'(
      _hook: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    verifiedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'verifiedMessages(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    verify(
      arg0: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'verify(bytes,bytes)'(
      arg0: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  VERIFIED_MASK_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  'VERIFIED_MASK_INDEX()'(overrides?: CallOverrides): Promise<BigNumber>;

  authorizedHook(overrides?: CallOverrides): Promise<string>;

  'authorizedHook()'(overrides?: CallOverrides): Promise<string>;

  endpoint(overrides?: CallOverrides): Promise<string>;

  'endpoint()'(overrides?: CallOverrides): Promise<string>;

  isVerified(message: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  'isVerified(bytes)'(
    message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  lzReceive(
    arg0: OriginStruct,
    arg1: BytesLike,
    _lzMessage: BytesLike,
    arg3: string,
    arg4: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)'(
    arg0: OriginStruct,
    arg1: BytesLike,
    _lzMessage: BytesLike,
    arg3: string,
    arg4: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  moduleType(overrides?: CallOverrides): Promise<number>;

  'moduleType()'(overrides?: CallOverrides): Promise<number>;

  preVerifyMessage(
    messageId: BytesLike,
    msgValue: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'preVerifyMessage(bytes32,uint256)'(
    messageId: BytesLike,
    msgValue: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  setAuthorizedHook(
    _hook: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setAuthorizedHook(bytes32)'(
    _hook: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  verifiedMessages(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'verifiedMessages(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  verify(
    arg0: BytesLike,
    message: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'verify(bytes,bytes)'(
    arg0: BytesLike,
    message: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    VERIFIED_MASK_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    'VERIFIED_MASK_INDEX()'(overrides?: CallOverrides): Promise<BigNumber>;

    authorizedHook(overrides?: CallOverrides): Promise<string>;

    'authorizedHook()'(overrides?: CallOverrides): Promise<string>;

    endpoint(overrides?: CallOverrides): Promise<string>;

    'endpoint()'(overrides?: CallOverrides): Promise<string>;

    isVerified(message: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    'isVerified(bytes)'(
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    lzReceive(
      arg0: OriginStruct,
      arg1: BytesLike,
      _lzMessage: BytesLike,
      arg3: string,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)'(
      arg0: OriginStruct,
      arg1: BytesLike,
      _lzMessage: BytesLike,
      arg3: string,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    moduleType(overrides?: CallOverrides): Promise<number>;

    'moduleType()'(overrides?: CallOverrides): Promise<number>;

    preVerifyMessage(
      messageId: BytesLike,
      msgValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'preVerifyMessage(bytes32,uint256)'(
      messageId: BytesLike,
      msgValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAuthorizedHook(
      _hook: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setAuthorizedHook(bytes32)'(
      _hook: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    verifiedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'verifiedMessages(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    verify(
      arg0: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'verify(bytes,bytes)'(
      arg0: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'ReceivedMessage(bytes32,uint256)'(
      messageId?: BytesLike | null,
      msgValue?: null,
    ): ReceivedMessageEventFilter;
    ReceivedMessage(
      messageId?: BytesLike | null,
      msgValue?: null,
    ): ReceivedMessageEventFilter;
  };

  estimateGas: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    VERIFIED_MASK_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    'VERIFIED_MASK_INDEX()'(overrides?: CallOverrides): Promise<BigNumber>;

    authorizedHook(overrides?: CallOverrides): Promise<BigNumber>;

    'authorizedHook()'(overrides?: CallOverrides): Promise<BigNumber>;

    endpoint(overrides?: CallOverrides): Promise<BigNumber>;

    'endpoint()'(overrides?: CallOverrides): Promise<BigNumber>;

    isVerified(
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'isVerified(bytes)'(
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lzReceive(
      arg0: OriginStruct,
      arg1: BytesLike,
      _lzMessage: BytesLike,
      arg3: string,
      arg4: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)'(
      arg0: OriginStruct,
      arg1: BytesLike,
      _lzMessage: BytesLike,
      arg3: string,
      arg4: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    moduleType(overrides?: CallOverrides): Promise<BigNumber>;

    'moduleType()'(overrides?: CallOverrides): Promise<BigNumber>;

    preVerifyMessage(
      messageId: BytesLike,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'preVerifyMessage(bytes32,uint256)'(
      messageId: BytesLike,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    setAuthorizedHook(
      _hook: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setAuthorizedHook(bytes32)'(
      _hook: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    verifiedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'verifiedMessages(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    verify(
      arg0: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'verify(bytes,bytes)'(
      arg0: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    VERIFIED_MASK_INDEX(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'VERIFIED_MASK_INDEX()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    authorizedHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'authorizedHook()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'endpoint()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isVerified(
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'isVerified(bytes)'(
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lzReceive(
      arg0: OriginStruct,
      arg1: BytesLike,
      _lzMessage: BytesLike,
      arg3: string,
      arg4: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)'(
      arg0: OriginStruct,
      arg1: BytesLike,
      _lzMessage: BytesLike,
      arg3: string,
      arg4: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    moduleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'moduleType()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preVerifyMessage(
      messageId: BytesLike,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'preVerifyMessage(bytes32,uint256)'(
      messageId: BytesLike,
      msgValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setAuthorizedHook(
      _hook: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setAuthorizedHook(bytes32)'(
      _hook: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    verifiedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'verifiedMessages(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    verify(
      arg0: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'verify(bytes,bytes)'(
      arg0: BytesLike,
      message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
