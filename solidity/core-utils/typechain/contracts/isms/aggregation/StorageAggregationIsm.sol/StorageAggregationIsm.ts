/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../../common.js';

export interface StorageAggregationIsmInterface extends utils.Interface {
  functions: {
    'PACKAGE_VERSION()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'initialize(address,address[],uint8)': FunctionFragment;
    'moduleType()': FunctionFragment;
    'modules(uint256)': FunctionFragment;
    'modulesAndThreshold(bytes)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setModulesAndThreshold(address[],uint8)': FunctionFragment;
    'threshold()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'verify(bytes,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'acceptOwnership'
      | 'acceptOwnership()'
      | 'initialize'
      | 'initialize(address,address[],uint8)'
      | 'moduleType'
      | 'moduleType()'
      | 'modules'
      | 'modules(uint256)'
      | 'modulesAndThreshold'
      | 'modulesAndThreshold(bytes)'
      | 'owner'
      | 'owner()'
      | 'pendingOwner'
      | 'pendingOwner()'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'setModulesAndThreshold'
      | 'setModulesAndThreshold(address[],uint8)'
      | 'threshold'
      | 'threshold()'
      | 'transferOwnership'
      | 'transferOwnership(address)'
      | 'verify'
      | 'verify(bytes,bytes)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'acceptOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'acceptOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize(address,address[],uint8)',
    values: [string, string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'moduleType',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'moduleType()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'modules',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'modules(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'modulesAndThreshold',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'modulesAndThreshold(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'pendingOwner()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setModulesAndThreshold',
    values: [string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setModulesAndThreshold(address[],uint8)',
    values: [string[], BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'threshold', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'threshold()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'verify',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'verify(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'acceptOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'acceptOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initialize(address,address[],uint8)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'moduleType', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'moduleType()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'modules', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'modules(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'modulesAndThreshold',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'modulesAndThreshold(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pendingOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'pendingOwner()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setModulesAndThreshold',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setModulesAndThreshold(address[],uint8)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'threshold', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'threshold()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'verify(bytes,bytes)',
    data: BytesLike,
  ): Result;

  events: {
    'Initialized(uint8)': EventFragment;
    'ModulesAndThresholdSet(address[],uint8)': EventFragment;
    'OwnershipTransferStarted(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized(uint8)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ModulesAndThresholdSet'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ModulesAndThresholdSet(address[],uint8)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferStarted(address,address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ModulesAndThresholdSetEventObject {
  modules: string[];
  threshold: number;
}
export type ModulesAndThresholdSetEvent = TypedEvent<
  [string[], number],
  ModulesAndThresholdSetEventObject
>;

export type ModulesAndThresholdSetEventFilter =
  TypedEventFilter<ModulesAndThresholdSetEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StorageAggregationIsm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StorageAggregationIsmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'acceptOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'initialize(address,address[],uint8)'(
      _owner: string,
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    moduleType(overrides?: CallOverrides): Promise<[number]>;

    'moduleType()'(overrides?: CallOverrides): Promise<[number]>;

    modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    'modules(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    modulesAndThreshold(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string[], number]>;

    'modulesAndThreshold(bytes)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string[], number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    'pendingOwner()'(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setModulesAndThreshold(
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setModulesAndThreshold(address[],uint8)'(
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    threshold(overrides?: CallOverrides): Promise<[number]>;

    'threshold()'(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'acceptOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    _modules: string[],
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'initialize(address,address[],uint8)'(
    _owner: string,
    _modules: string[],
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  moduleType(overrides?: CallOverrides): Promise<number>;

  'moduleType()'(overrides?: CallOverrides): Promise<number>;

  modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'modules(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  modulesAndThreshold(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<[string[], number]>;

  'modulesAndThreshold(bytes)'(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<[string[], number]>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  'pendingOwner()'(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setModulesAndThreshold(
    _modules: string[],
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setModulesAndThreshold(address[],uint8)'(
    _modules: string[],
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  threshold(overrides?: CallOverrides): Promise<number>;

  'threshold()'(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  verify(
    _metadata: BytesLike,
    _message: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'verify(bytes,bytes)'(
    _metadata: BytesLike,
    _message: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    'acceptOwnership()'(overrides?: CallOverrides): Promise<void>;

    initialize(
      _owner: string,
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'initialize(address,address[],uint8)'(
      _owner: string,
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    moduleType(overrides?: CallOverrides): Promise<number>;

    'moduleType()'(overrides?: CallOverrides): Promise<number>;

    modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'modules(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    modulesAndThreshold(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string[], number]>;

    'modulesAndThreshold(bytes)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string[], number]>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    'pendingOwner()'(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    setModulesAndThreshold(
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setModulesAndThreshold(address[],uint8)'(
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    threshold(overrides?: CallOverrides): Promise<number>;

    'threshold()'(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'ModulesAndThresholdSet(address[],uint8)'(
      modules?: null,
      threshold?: null,
    ): ModulesAndThresholdSetEventFilter;
    ModulesAndThresholdSet(
      modules?: null,
      threshold?: null,
    ): ModulesAndThresholdSetEventFilter;

    'OwnershipTransferStarted(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'acceptOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'initialize(address,address[],uint8)'(
      _owner: string,
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    moduleType(overrides?: CallOverrides): Promise<BigNumber>;

    'moduleType()'(overrides?: CallOverrides): Promise<BigNumber>;

    modules(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'modules(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    modulesAndThreshold(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'modulesAndThreshold(bytes)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    'pendingOwner()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setModulesAndThreshold(
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setModulesAndThreshold(address[],uint8)'(
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    'threshold()'(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'acceptOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'initialize(address,address[],uint8)'(
      _owner: string,
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    moduleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'moduleType()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modules(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'modules(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    modulesAndThreshold(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'modulesAndThreshold(bytes)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'pendingOwner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setModulesAndThreshold(
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setModulesAndThreshold(address[],uint8)'(
      _modules: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'threshold()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
