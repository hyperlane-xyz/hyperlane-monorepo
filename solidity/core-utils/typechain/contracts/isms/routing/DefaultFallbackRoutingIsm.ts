/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export interface DefaultFallbackRoutingIsmInterface extends utils.Interface {
  functions: {
    'PACKAGE_VERSION()': FunctionFragment;
    'domains()': FunctionFragment;
    'hook()': FunctionFragment;
    'initialize(address,uint32[],address[])': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'interchainSecurityModule()': FunctionFragment;
    'localDomain()': FunctionFragment;
    'mailbox()': FunctionFragment;
    'module(uint32)': FunctionFragment;
    'moduleType()': FunctionFragment;
    'owner()': FunctionFragment;
    'remove(uint32)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'route(bytes)': FunctionFragment;
    'set(uint32,address)': FunctionFragment;
    'setHook(address)': FunctionFragment;
    'setInterchainSecurityModule(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'verify(bytes,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'domains'
      | 'domains()'
      | 'hook'
      | 'hook()'
      | 'initialize(address,uint32[],address[])'
      | 'initialize(address)'
      | 'interchainSecurityModule'
      | 'interchainSecurityModule()'
      | 'localDomain'
      | 'localDomain()'
      | 'mailbox'
      | 'mailbox()'
      | 'module'
      | 'module(uint32)'
      | 'moduleType'
      | 'moduleType()'
      | 'owner'
      | 'owner()'
      | 'remove'
      | 'remove(uint32)'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'route'
      | 'route(bytes)'
      | 'set'
      | 'set(uint32,address)'
      | 'setHook'
      | 'setHook(address)'
      | 'setInterchainSecurityModule'
      | 'setInterchainSecurityModule(address)'
      | 'transferOwnership'
      | 'transferOwnership(address)'
      | 'verify'
      | 'verify(bytes,bytes)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'domains', values?: undefined): string;
  encodeFunctionData(functionFragment: 'domains()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hook', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hook()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize(address,uint32[],address[])',
    values: [string, BigNumberish[], string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'interchainSecurityModule',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'interchainSecurityModule()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'localDomain',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'localDomain()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'mailbox', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mailbox()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'module',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'module(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'moduleType',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'moduleType()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'remove',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'remove(uint32)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'route', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'route(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'set',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'set(uint32,address)',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'setHook', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setHook(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setInterchainSecurityModule',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setInterchainSecurityModule(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'verify',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'verify(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'domains', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'domains()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hook', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hook()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initialize(address,uint32[],address[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initialize(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'interchainSecurityModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'interchainSecurityModule()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'localDomain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'localDomain()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'mailbox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mailbox()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'module', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'module(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'moduleType', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'moduleType()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'remove', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'remove(uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'route', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'route(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'set(uint32,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setHook', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setHook(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInterchainSecurityModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInterchainSecurityModule(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'verify(bytes,bytes)',
    data: BytesLike,
  ): Result;

  events: {
    'HookSet(address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'IsmSet(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'HookSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HookSet(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized(uint8)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IsmSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IsmSet(address)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
}

export interface HookSetEventObject {
  _hook: string;
}
export type HookSetEvent = TypedEvent<[string], HookSetEventObject>;

export type HookSetEventFilter = TypedEventFilter<HookSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface IsmSetEventObject {
  _ism: string;
}
export type IsmSetEvent = TypedEvent<[string], IsmSetEventObject>;

export type IsmSetEventFilter = TypedEventFilter<IsmSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface DefaultFallbackRoutingIsm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DefaultFallbackRoutingIsmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    domains(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    'domains()'(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    hook(overrides?: CallOverrides): Promise<[string]>;

    'hook()'(overrides?: CallOverrides): Promise<[string]>;

    'initialize(address,uint32[],address[])'(
      _owner: string,
      _domains: BigNumberish[],
      __modules: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'initialize(address)'(
      _owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<[string]>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<[string]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    'localDomain()'(overrides?: CallOverrides): Promise<[number]>;

    mailbox(overrides?: CallOverrides): Promise<[string]>;

    'mailbox()'(overrides?: CallOverrides): Promise<[string]>;

    module(origin: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    'module(uint32)'(
      origin: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    moduleType(overrides?: CallOverrides): Promise<[number]>;

    'moduleType()'(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    remove(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'remove(uint32)'(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    route(_message: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    'route(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    set(
      _domain: BigNumberish,
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'set(uint32,address)'(
      _domain: BigNumberish,
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setHook(address)'(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  domains(overrides?: CallOverrides): Promise<BigNumber[]>;

  'domains()'(overrides?: CallOverrides): Promise<BigNumber[]>;

  hook(overrides?: CallOverrides): Promise<string>;

  'hook()'(overrides?: CallOverrides): Promise<string>;

  'initialize(address,uint32[],address[])'(
    _owner: string,
    _domains: BigNumberish[],
    __modules: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'initialize(address)'(
    _owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

  'interchainSecurityModule()'(overrides?: CallOverrides): Promise<string>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  'localDomain()'(overrides?: CallOverrides): Promise<number>;

  mailbox(overrides?: CallOverrides): Promise<string>;

  'mailbox()'(overrides?: CallOverrides): Promise<string>;

  module(origin: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'module(uint32)'(
    origin: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  moduleType(overrides?: CallOverrides): Promise<number>;

  'moduleType()'(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  remove(
    _domain: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'remove(uint32)'(
    _domain: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  route(_message: BytesLike, overrides?: CallOverrides): Promise<string>;

  'route(bytes)'(
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  set(
    _domain: BigNumberish,
    _module: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'set(uint32,address)'(
    _domain: BigNumberish,
    _module: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setHook(
    _hook: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setHook(address)'(
    _hook: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setInterchainSecurityModule(
    _module: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setInterchainSecurityModule(address)'(
    _module: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  verify(
    _metadata: BytesLike,
    _message: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'verify(bytes,bytes)'(
    _metadata: BytesLike,
    _message: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    domains(overrides?: CallOverrides): Promise<BigNumber[]>;

    'domains()'(overrides?: CallOverrides): Promise<BigNumber[]>;

    hook(overrides?: CallOverrides): Promise<string>;

    'hook()'(overrides?: CallOverrides): Promise<string>;

    'initialize(address,uint32[],address[])'(
      _owner: string,
      _domains: BigNumberish[],
      __modules: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'initialize(address)'(
      _owner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<string>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    'localDomain()'(overrides?: CallOverrides): Promise<number>;

    mailbox(overrides?: CallOverrides): Promise<string>;

    'mailbox()'(overrides?: CallOverrides): Promise<string>;

    module(origin: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'module(uint32)'(
      origin: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    moduleType(overrides?: CallOverrides): Promise<number>;

    'moduleType()'(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    remove(_domain: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'remove(uint32)'(
      _domain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    route(_message: BytesLike, overrides?: CallOverrides): Promise<string>;

    'route(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    set(
      _domain: BigNumberish,
      _module: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'set(uint32,address)'(
      _domain: BigNumberish,
      _module: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setHook(_hook: string, overrides?: CallOverrides): Promise<void>;

    'setHook(address)'(_hook: string, overrides?: CallOverrides): Promise<void>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'HookSet(address)'(_hook?: null): HookSetEventFilter;
    HookSet(_hook?: null): HookSetEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'IsmSet(address)'(_ism?: null): IsmSetEventFilter;
    IsmSet(_ism?: null): IsmSetEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    domains(overrides?: CallOverrides): Promise<BigNumber>;

    'domains()'(overrides?: CallOverrides): Promise<BigNumber>;

    hook(overrides?: CallOverrides): Promise<BigNumber>;

    'hook()'(overrides?: CallOverrides): Promise<BigNumber>;

    'initialize(address,uint32[],address[])'(
      _owner: string,
      _domains: BigNumberish[],
      __modules: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'initialize(address)'(
      _owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<BigNumber>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    'localDomain()'(overrides?: CallOverrides): Promise<BigNumber>;

    mailbox(overrides?: CallOverrides): Promise<BigNumber>;

    'mailbox()'(overrides?: CallOverrides): Promise<BigNumber>;

    module(origin: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'module(uint32)'(
      origin: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    moduleType(overrides?: CallOverrides): Promise<BigNumber>;

    'moduleType()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'remove(uint32)'(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    route(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'route(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    set(
      _domain: BigNumberish,
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'set(uint32,address)'(
      _domain: BigNumberish,
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setHook(address)'(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    domains(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'domains()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'hook()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'initialize(address,uint32[],address[])'(
      _owner: string,
      _domains: BigNumberish[],
      __modules: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'initialize(address)'(
      _owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    interchainSecurityModule(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'interchainSecurityModule()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'localDomain()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mailbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'mailbox()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    module(
      origin: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'module(uint32)'(
      origin: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    moduleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'moduleType()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remove(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'remove(uint32)'(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    route(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'route(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    set(
      _domain: BigNumberish,
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'set(uint32,address)'(
      _domain: BigNumberish,
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setHook(address)'(
      _hook: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setInterchainSecurityModule(address)'(
      _module: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
