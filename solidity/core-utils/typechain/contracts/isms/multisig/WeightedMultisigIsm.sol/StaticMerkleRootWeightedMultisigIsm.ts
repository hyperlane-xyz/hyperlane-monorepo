/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../../common.js';

export declare namespace IStaticWeightedMultisigIsm {
  export type ValidatorInfoStruct = {
    signingAddress: string;
    weight: BigNumberish;
  };

  export type ValidatorInfoStructOutput = [string, BigNumber] & {
    signingAddress: string;
    weight: BigNumber;
  };
}

export interface StaticMerkleRootWeightedMultisigIsmInterface
  extends utils.Interface {
  functions: {
    'PACKAGE_VERSION()': FunctionFragment;
    'TOTAL_WEIGHT()': FunctionFragment;
    'moduleType()': FunctionFragment;
    'signatureCount(bytes)': FunctionFragment;
    'validatorsAndThresholdWeight(bytes)': FunctionFragment;
    'verify(bytes,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PACKAGE_VERSION'
      | 'PACKAGE_VERSION()'
      | 'TOTAL_WEIGHT'
      | 'TOTAL_WEIGHT()'
      | 'moduleType'
      | 'moduleType()'
      | 'signatureCount'
      | 'signatureCount(bytes)'
      | 'validatorsAndThresholdWeight'
      | 'validatorsAndThresholdWeight(bytes)'
      | 'verify'
      | 'verify(bytes,bytes)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PACKAGE_VERSION()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'TOTAL_WEIGHT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'TOTAL_WEIGHT()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'moduleType',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'moduleType()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'signatureCount',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'signatureCount(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'validatorsAndThresholdWeight',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'validatorsAndThresholdWeight(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'verify',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'verify(bytes,bytes)',
    values: [BytesLike, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PACKAGE_VERSION()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'TOTAL_WEIGHT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'TOTAL_WEIGHT()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'moduleType', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'moduleType()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'signatureCount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'signatureCount(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'validatorsAndThresholdWeight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'validatorsAndThresholdWeight(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'verify(bytes,bytes)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface StaticMerkleRootWeightedMultisigIsm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StaticMerkleRootWeightedMultisigIsmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    TOTAL_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    'TOTAL_WEIGHT()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    moduleType(overrides?: CallOverrides): Promise<[number]>;

    'moduleType()'(overrides?: CallOverrides): Promise<[number]>;

    signatureCount(
      _metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'signatureCount(bytes)'(
      _metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    validatorsAndThresholdWeight(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [IStaticWeightedMultisigIsm.ValidatorInfoStructOutput[], BigNumber]
    >;

    'validatorsAndThresholdWeight(bytes)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [IStaticWeightedMultisigIsm.ValidatorInfoStructOutput[], BigNumber]
    >;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;
  };

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

  TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  'TOTAL_WEIGHT()'(overrides?: CallOverrides): Promise<BigNumber>;

  moduleType(overrides?: CallOverrides): Promise<number>;

  'moduleType()'(overrides?: CallOverrides): Promise<number>;

  signatureCount(
    _metadata: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'signatureCount(bytes)'(
    _metadata: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  validatorsAndThresholdWeight(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [IStaticWeightedMultisigIsm.ValidatorInfoStructOutput[], BigNumber]
  >;

  'validatorsAndThresholdWeight(bytes)'(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [IStaticWeightedMultisigIsm.ValidatorInfoStructOutput[], BigNumber]
  >;

  verify(
    _metadata: BytesLike,
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'verify(bytes,bytes)'(
    _metadata: BytesLike,
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  callStatic: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<string>;

    TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    'TOTAL_WEIGHT()'(overrides?: CallOverrides): Promise<BigNumber>;

    moduleType(overrides?: CallOverrides): Promise<number>;

    'moduleType()'(overrides?: CallOverrides): Promise<number>;

    signatureCount(
      _metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'signatureCount(bytes)'(
      _metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    validatorsAndThresholdWeight(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [IStaticWeightedMultisigIsm.ValidatorInfoStructOutput[], BigNumber]
    >;

    'validatorsAndThresholdWeight(bytes)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [IStaticWeightedMultisigIsm.ValidatorInfoStructOutput[], BigNumber]
    >;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'PACKAGE_VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    'TOTAL_WEIGHT()'(overrides?: CallOverrides): Promise<BigNumber>;

    moduleType(overrides?: CallOverrides): Promise<BigNumber>;

    'moduleType()'(overrides?: CallOverrides): Promise<BigNumber>;

    signatureCount(
      _metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'signatureCount(bytes)'(
      _metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    validatorsAndThresholdWeight(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'validatorsAndThresholdWeight(bytes)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'PACKAGE_VERSION()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    TOTAL_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'TOTAL_WEIGHT()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'moduleType()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signatureCount(
      _metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'signatureCount(bytes)'(
      _metadata: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    validatorsAndThresholdWeight(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'validatorsAndThresholdWeight(bytes)'(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    verify(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'verify(bytes,bytes)'(
      _metadata: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
