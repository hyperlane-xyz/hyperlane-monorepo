/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export declare namespace IPaymentCoordinator {
  export type StrategyAndMultiplierStruct = {
    strategy: string;
    multiplier: BigNumberish;
  };

  export type StrategyAndMultiplierStructOutput = [string, BigNumber] & {
    strategy: string;
    multiplier: BigNumber;
  };

  export type RangePaymentStruct = {
    strategiesAndMultipliers: IPaymentCoordinator.StrategyAndMultiplierStruct[];
    token: string;
    amount: BigNumberish;
    startTimestamp: BigNumberish;
    duration: BigNumberish;
  };

  export type RangePaymentStructOutput = [
    IPaymentCoordinator.StrategyAndMultiplierStructOutput[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    strategiesAndMultipliers: IPaymentCoordinator.StrategyAndMultiplierStructOutput[];
    token: string;
    amount: BigNumber;
    startTimestamp: BigNumber;
    duration: BigNumber;
  };
}

export interface TestPaymentCoordinatorInterface extends utils.Interface {
  functions: {
    'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'payForRange'
      | 'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'payForRange',
    values: [IPaymentCoordinator.RangePaymentStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])',
    values: [IPaymentCoordinator.RangePaymentStruct[]],
  ): string;

  decodeFunctionResult(
    functionFragment: 'payForRange',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface TestPaymentCoordinator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestPaymentCoordinatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    payForRange(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])'(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  payForRange(
    rangePayments: IPaymentCoordinator.RangePaymentStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])'(
    rangePayments: IPaymentCoordinator.RangePaymentStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    payForRange(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])'(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    payForRange(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])'(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    payForRange(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'payForRange(((address,uint96)[],address,uint256,uint64,uint64)[])'(
      rangePayments: IPaymentCoordinator.RangePaymentStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
