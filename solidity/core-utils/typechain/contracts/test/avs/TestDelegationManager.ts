/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../common.js';

export declare namespace IDelegationManager {
  export type OperatorDetailsStruct = {
    earningsReceiver: string;
    delegationApprover: string;
    stakerOptOutWindowBlocks: BigNumberish;
  };

  export type OperatorDetailsStructOutput = [string, string, number] & {
    earningsReceiver: string;
    delegationApprover: string;
    stakerOptOutWindowBlocks: number;
  };
}

export interface TestDelegationManagerInterface extends utils.Interface {
  functions: {
    'getOperatorShares(address,address[])': FunctionFragment;
    'isOperator(address)': FunctionFragment;
    'operatorShares(address,address)': FunctionFragment;
    'registerAsOperator((address,address,uint32),string)': FunctionFragment;
    'setIsOperator(address,bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getOperatorShares'
      | 'getOperatorShares(address,address[])'
      | 'isOperator'
      | 'isOperator(address)'
      | 'operatorShares'
      | 'operatorShares(address,address)'
      | 'registerAsOperator'
      | 'registerAsOperator((address,address,uint32),string)'
      | 'setIsOperator'
      | 'setIsOperator(address,bool)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'getOperatorShares',
    values: [string, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOperatorShares(address,address[])',
    values: [string, string[]],
  ): string;
  encodeFunctionData(functionFragment: 'isOperator', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'isOperator(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'operatorShares',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'operatorShares(address,address)',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerAsOperator',
    values: [IDelegationManager.OperatorDetailsStruct, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerAsOperator((address,address,uint32),string)',
    values: [IDelegationManager.OperatorDetailsStruct, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setIsOperator',
    values: [string, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'setIsOperator(address,bool)',
    values: [string, boolean],
  ): string;

  decodeFunctionResult(
    functionFragment: 'getOperatorShares',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOperatorShares(address,address[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'isOperator', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isOperator(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'operatorShares',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'operatorShares(address,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerAsOperator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerAsOperator((address,address,uint32),string)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setIsOperator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setIsOperator(address,bool)',
    data: BytesLike,
  ): Result;

  events: {
    'OperatorMetadataURIUpdated(address,string)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OperatorMetadataURIUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OperatorMetadataURIUpdated(address,string)',
  ): EventFragment;
}

export interface OperatorMetadataURIUpdatedEventObject {
  operator: string;
  metadataURI: string;
}
export type OperatorMetadataURIUpdatedEvent = TypedEvent<
  [string, string],
  OperatorMetadataURIUpdatedEventObject
>;

export type OperatorMetadataURIUpdatedEventFilter =
  TypedEventFilter<OperatorMetadataURIUpdatedEvent>;

export interface TestDelegationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestDelegationManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOperatorShares(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    'getOperatorShares(address,address[])'(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    isOperator(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    'isOperator(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    operatorShares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'operatorShares(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    registerAsOperator(
      registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'registerAsOperator((address,address,uint32),string)'(
      registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setIsOperator(
      operator: string,
      _isOperatorReturnValue: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setIsOperator(address,bool)'(
      operator: string,
      _isOperatorReturnValue: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  getOperatorShares(
    operator: string,
    strategies: string[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  'getOperatorShares(address,address[])'(
    operator: string,
    strategies: string[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  isOperator(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  'isOperator(address)'(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  operatorShares(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'operatorShares(address,address)'(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  registerAsOperator(
    registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
    metadataURI: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'registerAsOperator((address,address,uint32),string)'(
    registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
    metadataURI: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setIsOperator(
    operator: string,
    _isOperatorReturnValue: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setIsOperator(address,bool)'(
    operator: string,
    _isOperatorReturnValue: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    getOperatorShares(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    'getOperatorShares(address,address[])'(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    isOperator(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    'isOperator(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    operatorShares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'operatorShares(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registerAsOperator(
      registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
      metadataURI: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'registerAsOperator((address,address,uint32),string)'(
      registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
      metadataURI: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setIsOperator(
      operator: string,
      _isOperatorReturnValue: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setIsOperator(address,bool)'(
      operator: string,
      _isOperatorReturnValue: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'OperatorMetadataURIUpdated(address,string)'(
      operator?: string | null,
      metadataURI?: null,
    ): OperatorMetadataURIUpdatedEventFilter;
    OperatorMetadataURIUpdated(
      operator?: string | null,
      metadataURI?: null,
    ): OperatorMetadataURIUpdatedEventFilter;
  };

  estimateGas: {
    getOperatorShares(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getOperatorShares(address,address[])'(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isOperator(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isOperator(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    operatorShares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'operatorShares(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registerAsOperator(
      registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'registerAsOperator((address,address,uint32),string)'(
      registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setIsOperator(
      operator: string,
      _isOperatorReturnValue: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setIsOperator(address,bool)'(
      operator: string,
      _isOperatorReturnValue: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getOperatorShares(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getOperatorShares(address,address[])'(
      operator: string,
      strategies: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isOperator(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'isOperator(address)'(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    operatorShares(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'operatorShares(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    registerAsOperator(
      registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'registerAsOperator((address,address,uint32),string)'(
      registeringOperatorDetails: IDelegationManager.OperatorDetailsStruct,
      metadataURI: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setIsOperator(
      operator: string,
      _isOperatorReturnValue: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setIsOperator(address,bool)'(
      operator: string,
      _isOperatorReturnValue: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
