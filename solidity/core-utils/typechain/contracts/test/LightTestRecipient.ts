/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface LightTestRecipientInterface extends utils.Interface {
  functions: {
    'fooBar(uint256,string)': FunctionFragment;
    'handle(uint32,bytes32,bytes)': FunctionFragment;
    'interchainSecurityModule()': FunctionFragment;
    'lastCallMessage()': FunctionFragment;
    'lastCaller()': FunctionFragment;
    'lastData()': FunctionFragment;
    'lastSender()': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setInterchainSecurityModule(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'fooBar'
      | 'fooBar(uint256,string)'
      | 'handle'
      | 'handle(uint32,bytes32,bytes)'
      | 'interchainSecurityModule'
      | 'interchainSecurityModule()'
      | 'lastCallMessage'
      | 'lastCallMessage()'
      | 'lastCaller'
      | 'lastCaller()'
      | 'lastData'
      | 'lastData()'
      | 'lastSender'
      | 'lastSender()'
      | 'owner'
      | 'owner()'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'setInterchainSecurityModule'
      | 'setInterchainSecurityModule(address)'
      | 'transferOwnership'
      | 'transferOwnership(address)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'fooBar',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'fooBar(uint256,string)',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'handle',
    values: [BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'handle(uint32,bytes32,bytes)',
    values: [BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'interchainSecurityModule',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'interchainSecurityModule()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastCallMessage',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastCallMessage()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastCaller',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastCaller()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'lastData', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lastData()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastSender',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastSender()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setInterchainSecurityModule',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setInterchainSecurityModule(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;

  decodeFunctionResult(functionFragment: 'fooBar', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'fooBar(uint256,string)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'handle', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'handle(uint32,bytes32,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'interchainSecurityModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'interchainSecurityModule()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastCallMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastCallMessage()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lastCaller', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastCaller()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lastData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastData()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastSender', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastSender()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInterchainSecurityModule',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInterchainSecurityModule(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
    'ReceivedCall(address,uint256,string)': EventFragment;
    'ReceivedMessage(uint32,bytes32,uint256,string)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReceivedCall'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ReceivedCall(address,uint256,string)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReceivedMessage'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ReceivedMessage(uint32,bytes32,uint256,string)',
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReceivedCallEventObject {
  caller: string;
  amount: BigNumber;
  message: string;
}
export type ReceivedCallEvent = TypedEvent<
  [string, BigNumber, string],
  ReceivedCallEventObject
>;

export type ReceivedCallEventFilter = TypedEventFilter<ReceivedCallEvent>;

export interface ReceivedMessageEventObject {
  origin: number;
  sender: string;
  value: BigNumber;
  message: string;
}
export type ReceivedMessageEvent = TypedEvent<
  [number, string, BigNumber, string],
  ReceivedMessageEventObject
>;

export type ReceivedMessageEventFilter = TypedEventFilter<ReceivedMessageEvent>;

export interface LightTestRecipient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LightTestRecipientInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fooBar(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'fooBar(uint256,string)'(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'handle(uint32,bytes32,bytes)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<[string]>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<[string]>;

    lastCallMessage(overrides?: CallOverrides): Promise<[string]>;

    'lastCallMessage()'(overrides?: CallOverrides): Promise<[string]>;

    lastCaller(overrides?: CallOverrides): Promise<[string]>;

    'lastCaller()'(overrides?: CallOverrides): Promise<[string]>;

    lastData(overrides?: CallOverrides): Promise<[string]>;

    'lastData()'(overrides?: CallOverrides): Promise<[string]>;

    lastSender(overrides?: CallOverrides): Promise<[string]>;

    'lastSender()'(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setInterchainSecurityModule(
      _ism: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'setInterchainSecurityModule(address)'(
      _ism: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  fooBar(
    amount: BigNumberish,
    message: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'fooBar(uint256,string)'(
    amount: BigNumberish,
    message: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  handle(
    _origin: BigNumberish,
    _sender: BytesLike,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'handle(uint32,bytes32,bytes)'(
    _origin: BigNumberish,
    _sender: BytesLike,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

  'interchainSecurityModule()'(overrides?: CallOverrides): Promise<string>;

  lastCallMessage(overrides?: CallOverrides): Promise<string>;

  'lastCallMessage()'(overrides?: CallOverrides): Promise<string>;

  lastCaller(overrides?: CallOverrides): Promise<string>;

  'lastCaller()'(overrides?: CallOverrides): Promise<string>;

  lastData(overrides?: CallOverrides): Promise<string>;

  'lastData()'(overrides?: CallOverrides): Promise<string>;

  lastSender(overrides?: CallOverrides): Promise<string>;

  'lastSender()'(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setInterchainSecurityModule(
    _ism: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'setInterchainSecurityModule(address)'(
    _ism: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    fooBar(
      amount: BigNumberish,
      message: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'fooBar(uint256,string)'(
      amount: BigNumberish,
      message: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'handle(uint32,bytes32,bytes)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<string>;

    lastCallMessage(overrides?: CallOverrides): Promise<string>;

    'lastCallMessage()'(overrides?: CallOverrides): Promise<string>;

    lastCaller(overrides?: CallOverrides): Promise<string>;

    'lastCaller()'(overrides?: CallOverrides): Promise<string>;

    lastData(overrides?: CallOverrides): Promise<string>;

    'lastData()'(overrides?: CallOverrides): Promise<string>;

    lastSender(overrides?: CallOverrides): Promise<string>;

    'lastSender()'(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    setInterchainSecurityModule(
      _ism: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setInterchainSecurityModule(address)'(
      _ism: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'ReceivedCall(address,uint256,string)'(
      caller?: string | null,
      amount?: null,
      message?: null,
    ): ReceivedCallEventFilter;
    ReceivedCall(
      caller?: string | null,
      amount?: null,
      message?: null,
    ): ReceivedCallEventFilter;

    'ReceivedMessage(uint32,bytes32,uint256,string)'(
      origin?: BigNumberish | null,
      sender?: BytesLike | null,
      value?: BigNumberish | null,
      message?: null,
    ): ReceivedMessageEventFilter;
    ReceivedMessage(
      origin?: BigNumberish | null,
      sender?: BytesLike | null,
      value?: BigNumberish | null,
      message?: null,
    ): ReceivedMessageEventFilter;
  };

  estimateGas: {
    fooBar(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'fooBar(uint256,string)'(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'handle(uint32,bytes32,bytes)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<BigNumber>;

    'interchainSecurityModule()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastCallMessage(overrides?: CallOverrides): Promise<BigNumber>;

    'lastCallMessage()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastCaller(overrides?: CallOverrides): Promise<BigNumber>;

    'lastCaller()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastData(overrides?: CallOverrides): Promise<BigNumber>;

    'lastData()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastSender(overrides?: CallOverrides): Promise<BigNumber>;

    'lastSender()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setInterchainSecurityModule(
      _ism: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'setInterchainSecurityModule(address)'(
      _ism: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fooBar(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'fooBar(uint256,string)'(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'handle(uint32,bytes32,bytes)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    interchainSecurityModule(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'interchainSecurityModule()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastCallMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastCallMessage()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastCaller()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastData()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastSender()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setInterchainSecurityModule(
      _ism: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'setInterchainSecurityModule(address)'(
      _ism: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
