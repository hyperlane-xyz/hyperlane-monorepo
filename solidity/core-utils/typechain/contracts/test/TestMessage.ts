/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface TestMessageInterface extends utils.Interface {
  functions: {
    'body(bytes)': FunctionFragment;
    'destination(bytes)': FunctionFragment;
    'id(bytes)': FunctionFragment;
    'nonce(bytes)': FunctionFragment;
    'origin(bytes)': FunctionFragment;
    'recipient(bytes)': FunctionFragment;
    'recipientAddress(bytes)': FunctionFragment;
    'sender(bytes)': FunctionFragment;
    'version(bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'body'
      | 'body(bytes)'
      | 'destination'
      | 'destination(bytes)'
      | 'id'
      | 'id(bytes)'
      | 'nonce'
      | 'nonce(bytes)'
      | 'origin'
      | 'origin(bytes)'
      | 'recipient'
      | 'recipient(bytes)'
      | 'recipientAddress'
      | 'recipientAddress(bytes)'
      | 'sender'
      | 'sender(bytes)'
      | 'version'
      | 'version(bytes)',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'body', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'body(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'destination',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'destination(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'id', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'id(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'nonce', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'nonce(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'origin', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'origin(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'recipient',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'recipient(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'recipientAddress',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'recipientAddress(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'sender', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'sender(bytes)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'version', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'version(bytes)',
    values: [BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: 'body', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'body(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'destination',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'destination(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'id', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'id(bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonce', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'nonce(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'origin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'origin(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'recipient', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'recipient(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'recipientAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'recipientAddress(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'sender', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'sender(bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'version(bytes)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface TestMessage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestMessageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    body(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { _body: string }>;

    'body(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { _body: string }>;

    destination(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[number] & { _destination: number }>;

    'destination(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[number] & { _destination: number }>;

    id(_message: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    'id(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    nonce(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _nonce: BigNumber }>;

    'nonce(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _nonce: BigNumber }>;

    origin(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[number] & { _origin: number }>;

    'origin(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[number] & { _origin: number }>;

    recipient(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { _recipient: string }>;

    'recipient(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { _recipient: string }>;

    recipientAddress(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { _recipient: string }>;

    'recipientAddress(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { _recipient: string }>;

    sender(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { _sender: string }>;

    'sender(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { _sender: string }>;

    version(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[number] & { _version: number }>;

    'version(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[number] & { _version: number }>;
  };

  body(_message: BytesLike, overrides?: CallOverrides): Promise<string>;

  'body(bytes)'(
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  destination(_message: BytesLike, overrides?: CallOverrides): Promise<number>;

  'destination(bytes)'(
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<number>;

  id(_message: BytesLike, overrides?: CallOverrides): Promise<string>;

  'id(bytes)'(_message: BytesLike, overrides?: CallOverrides): Promise<string>;

  nonce(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  'nonce(bytes)'(
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  origin(_message: BytesLike, overrides?: CallOverrides): Promise<number>;

  'origin(bytes)'(
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<number>;

  recipient(_message: BytesLike, overrides?: CallOverrides): Promise<string>;

  'recipient(bytes)'(
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  recipientAddress(
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  'recipientAddress(bytes)'(
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  sender(_message: BytesLike, overrides?: CallOverrides): Promise<string>;

  'sender(bytes)'(
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  version(_message: BytesLike, overrides?: CallOverrides): Promise<number>;

  'version(bytes)'(
    _message: BytesLike,
    overrides?: CallOverrides,
  ): Promise<number>;

  callStatic: {
    body(_message: BytesLike, overrides?: CallOverrides): Promise<string>;

    'body(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    destination(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<number>;

    'destination(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<number>;

    id(_message: BytesLike, overrides?: CallOverrides): Promise<string>;

    'id(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    nonce(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'nonce(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    origin(_message: BytesLike, overrides?: CallOverrides): Promise<number>;

    'origin(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<number>;

    recipient(_message: BytesLike, overrides?: CallOverrides): Promise<string>;

    'recipient(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    recipientAddress(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    'recipientAddress(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    sender(_message: BytesLike, overrides?: CallOverrides): Promise<string>;

    'sender(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    version(_message: BytesLike, overrides?: CallOverrides): Promise<number>;

    'version(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    body(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'body(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    destination(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'destination(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    id(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'id(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    nonce(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'nonce(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    origin(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'origin(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    recipient(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'recipient(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    recipientAddress(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'recipientAddress(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sender(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'sender(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    version(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'version(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    body(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'body(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    destination(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'destination(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    id(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'id(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    nonce(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'nonce(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    origin(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'origin(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    recipient(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'recipient(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    recipientAddress(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'recipientAddress(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    sender(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'sender(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    version(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'version(bytes)'(
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
