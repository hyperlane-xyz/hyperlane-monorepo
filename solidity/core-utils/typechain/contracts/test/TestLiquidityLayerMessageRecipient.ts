/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface TestLiquidityLayerMessageRecipientInterface
  extends utils.Interface {
  functions: {
    'handleWithTokens(uint32,bytes32,bytes,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'handleWithTokens'
      | 'handleWithTokens(uint32,bytes32,bytes,address,uint256)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'handleWithTokens',
    values: [BigNumberish, BytesLike, BytesLike, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'handleWithTokens(uint32,bytes32,bytes,address,uint256)',
    values: [BigNumberish, BytesLike, BytesLike, string, BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'handleWithTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'handleWithTokens(uint32,bytes32,bytes,address,uint256)',
    data: BytesLike,
  ): Result;

  events: {
    'HandledWithTokens(uint32,bytes32,bytes,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'HandledWithTokens'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'HandledWithTokens(uint32,bytes32,bytes,address,uint256)',
  ): EventFragment;
}

export interface HandledWithTokensEventObject {
  origin: number;
  sender: string;
  message: string;
  token: string;
  amount: BigNumber;
}
export type HandledWithTokensEvent = TypedEvent<
  [number, string, string, string, BigNumber],
  HandledWithTokensEventObject
>;

export type HandledWithTokensEventFilter =
  TypedEventFilter<HandledWithTokensEvent>;

export interface TestLiquidityLayerMessageRecipient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestLiquidityLayerMessageRecipientInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    handleWithTokens(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'handleWithTokens(uint32,bytes32,bytes,address,uint256)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  handleWithTokens(
    _origin: BigNumberish,
    _sender: BytesLike,
    _message: BytesLike,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'handleWithTokens(uint32,bytes32,bytes,address,uint256)'(
    _origin: BigNumberish,
    _sender: BytesLike,
    _message: BytesLike,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    handleWithTokens(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'handleWithTokens(uint32,bytes32,bytes,address,uint256)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'HandledWithTokens(uint32,bytes32,bytes,address,uint256)'(
      origin?: null,
      sender?: null,
      message?: null,
      token?: null,
      amount?: null,
    ): HandledWithTokensEventFilter;
    HandledWithTokens(
      origin?: null,
      sender?: null,
      message?: null,
      token?: null,
      amount?: null,
    ): HandledWithTokensEventFilter;
  };

  estimateGas: {
    handleWithTokens(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'handleWithTokens(uint32,bytes32,bytes,address,uint256)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    handleWithTokens(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'handleWithTokens(uint32,bytes32,bytes,address,uint256)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
