/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface TestMerkleInterface extends utils.Interface {
  functions: {
    'branchRoot(bytes32,bytes32[32],uint256)': FunctionFragment;
    'count()': FunctionFragment;
    'insert(bytes32)': FunctionFragment;
    'root()': FunctionFragment;
    'tree()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'branchRoot'
      | 'branchRoot(bytes32,bytes32[32],uint256)'
      | 'count'
      | 'count()'
      | 'insert'
      | 'insert(bytes32)'
      | 'root'
      | 'root()'
      | 'tree'
      | 'tree()',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'branchRoot',
    values: [BytesLike, BytesLike[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'branchRoot(bytes32,bytes32[32],uint256)',
    values: [BytesLike, BytesLike[], BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'count', values?: undefined): string;
  encodeFunctionData(functionFragment: 'count()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'insert', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'insert(bytes32)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'root', values?: undefined): string;
  encodeFunctionData(functionFragment: 'root()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tree', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tree()', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'branchRoot', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'branchRoot(bytes32,bytes32[32],uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'count', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'count()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'insert', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'insert(bytes32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'root', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'root()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tree', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tree()', data: BytesLike): Result;

  events: {};
}

export interface TestMerkle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestMerkleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    branchRoot(
      _leaf: BytesLike,
      _proof: BytesLike[],
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { _node: string }>;

    'branchRoot(bytes32,bytes32[32],uint256)'(
      _leaf: BytesLike,
      _proof: BytesLike[],
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { _node: string }>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    'count()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    insert(
      _node: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'insert(bytes32)'(
      _node: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    root(overrides?: CallOverrides): Promise<[string]>;

    'root()'(overrides?: CallOverrides): Promise<[string]>;

    tree(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { count: BigNumber }>;

    'tree()'(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { count: BigNumber }>;
  };

  branchRoot(
    _leaf: BytesLike,
    _proof: BytesLike[],
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'branchRoot(bytes32,bytes32[32],uint256)'(
    _leaf: BytesLike,
    _proof: BytesLike[],
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  'count()'(overrides?: CallOverrides): Promise<BigNumber>;

  insert(
    _node: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'insert(bytes32)'(
    _node: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  root(overrides?: CallOverrides): Promise<string>;

  'root()'(overrides?: CallOverrides): Promise<string>;

  tree(overrides?: CallOverrides): Promise<BigNumber>;

  'tree()'(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    branchRoot(
      _leaf: BytesLike,
      _proof: BytesLike[],
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'branchRoot(bytes32,bytes32[32],uint256)'(
      _leaf: BytesLike,
      _proof: BytesLike[],
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    'count()'(overrides?: CallOverrides): Promise<BigNumber>;

    insert(_node: BytesLike, overrides?: CallOverrides): Promise<void>;

    'insert(bytes32)'(
      _node: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    root(overrides?: CallOverrides): Promise<string>;

    'root()'(overrides?: CallOverrides): Promise<string>;

    tree(overrides?: CallOverrides): Promise<BigNumber>;

    'tree()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    branchRoot(
      _leaf: BytesLike,
      _proof: BytesLike[],
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'branchRoot(bytes32,bytes32[32],uint256)'(
      _leaf: BytesLike,
      _proof: BytesLike[],
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    'count()'(overrides?: CallOverrides): Promise<BigNumber>;

    insert(
      _node: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'insert(bytes32)'(
      _node: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    'root()'(overrides?: CallOverrides): Promise<BigNumber>;

    tree(overrides?: CallOverrides): Promise<BigNumber>;

    'tree()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    branchRoot(
      _leaf: BytesLike,
      _proof: BytesLike[],
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'branchRoot(bytes32,bytes32[32],uint256)'(
      _leaf: BytesLike,
      _proof: BytesLike[],
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'count()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    insert(
      _node: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'insert(bytes32)'(
      _node: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'root()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tree(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'tree()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
