/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface TestSendReceiverInterface extends utils.Interface {
  functions: {
    'HANDLE_GAS_AMOUNT()': FunctionFragment;
    'dispatchToSelf(address,uint32,bytes)': FunctionFragment;
    'dispatchToSelf(address,uint32,bytes,address)': FunctionFragment;
    'handle(uint32,bytes32,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'HANDLE_GAS_AMOUNT'
      | 'HANDLE_GAS_AMOUNT()'
      | 'dispatchToSelf(address,uint32,bytes)'
      | 'dispatchToSelf(address,uint32,bytes,address)'
      | 'handle'
      | 'handle(uint32,bytes32,bytes)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'HANDLE_GAS_AMOUNT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'HANDLE_GAS_AMOUNT()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'dispatchToSelf(address,uint32,bytes)',
    values: [string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'dispatchToSelf(address,uint32,bytes,address)',
    values: [string, BigNumberish, BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'handle',
    values: [BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'handle(uint32,bytes32,bytes)',
    values: [BigNumberish, BytesLike, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'HANDLE_GAS_AMOUNT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'HANDLE_GAS_AMOUNT()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dispatchToSelf(address,uint32,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'dispatchToSelf(address,uint32,bytes,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'handle', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'handle(uint32,bytes32,bytes)',
    data: BytesLike,
  ): Result;

  events: {
    'Handled(bytes32)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Handled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Handled(bytes32)'): EventFragment;
}

export interface HandledEventObject {
  blockHash: string;
}
export type HandledEvent = TypedEvent<[string], HandledEventObject>;

export type HandledEventFilter = TypedEventFilter<HandledEvent>;

export interface TestSendReceiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestSendReceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    'HANDLE_GAS_AMOUNT()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    'dispatchToSelf(address,uint32,bytes)'(
      _mailbox: string,
      _destinationDomain: BigNumberish,
      _messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'dispatchToSelf(address,uint32,bytes,address)'(
      _mailbox: string,
      _destinationDomain: BigNumberish,
      _messageBody: BytesLike,
      hook: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    handle(
      arg0: BigNumberish,
      arg1: BytesLike,
      _messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'handle(uint32,bytes32,bytes)'(
      arg0: BigNumberish,
      arg1: BytesLike,
      _messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  'HANDLE_GAS_AMOUNT()'(overrides?: CallOverrides): Promise<BigNumber>;

  'dispatchToSelf(address,uint32,bytes)'(
    _mailbox: string,
    _destinationDomain: BigNumberish,
    _messageBody: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'dispatchToSelf(address,uint32,bytes,address)'(
    _mailbox: string,
    _destinationDomain: BigNumberish,
    _messageBody: BytesLike,
    hook: string,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  handle(
    arg0: BigNumberish,
    arg1: BytesLike,
    _messageBody: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'handle(uint32,bytes32,bytes)'(
    arg0: BigNumberish,
    arg1: BytesLike,
    _messageBody: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    'HANDLE_GAS_AMOUNT()'(overrides?: CallOverrides): Promise<BigNumber>;

    'dispatchToSelf(address,uint32,bytes)'(
      _mailbox: string,
      _destinationDomain: BigNumberish,
      _messageBody: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'dispatchToSelf(address,uint32,bytes,address)'(
      _mailbox: string,
      _destinationDomain: BigNumberish,
      _messageBody: BytesLike,
      hook: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    handle(
      arg0: BigNumberish,
      arg1: BytesLike,
      _messageBody: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'handle(uint32,bytes32,bytes)'(
      arg0: BigNumberish,
      arg1: BytesLike,
      _messageBody: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Handled(bytes32)'(blockHash?: null): HandledEventFilter;
    Handled(blockHash?: null): HandledEventFilter;
  };

  estimateGas: {
    HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    'HANDLE_GAS_AMOUNT()'(overrides?: CallOverrides): Promise<BigNumber>;

    'dispatchToSelf(address,uint32,bytes)'(
      _mailbox: string,
      _destinationDomain: BigNumberish,
      _messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'dispatchToSelf(address,uint32,bytes,address)'(
      _mailbox: string,
      _destinationDomain: BigNumberish,
      _messageBody: BytesLike,
      hook: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    handle(
      arg0: BigNumberish,
      arg1: BytesLike,
      _messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'handle(uint32,bytes32,bytes)'(
      arg0: BigNumberish,
      arg1: BytesLike,
      _messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'HANDLE_GAS_AMOUNT()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'dispatchToSelf(address,uint32,bytes)'(
      _mailbox: string,
      _destinationDomain: BigNumberish,
      _messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'dispatchToSelf(address,uint32,bytes,address)'(
      _mailbox: string,
      _destinationDomain: BigNumberish,
      _messageBody: BytesLike,
      hook: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    handle(
      arg0: BigNumberish,
      arg1: BytesLike,
      _messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'handle(uint32,bytes32,bytes)'(
      arg0: BigNumberish,
      arg1: BytesLike,
      _messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
