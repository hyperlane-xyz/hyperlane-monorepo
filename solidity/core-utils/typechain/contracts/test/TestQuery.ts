/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface TestQueryInterface extends utils.Interface {
  functions: {
    'queryRouterOwner(uint32,uint256)': FunctionFragment;
    'receiveRouterOwner(uint256,address)': FunctionFragment;
    'router()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'queryRouterOwner'
      | 'queryRouterOwner(uint32,uint256)'
      | 'receiveRouterOwner'
      | 'receiveRouterOwner(uint256,address)'
      | 'router'
      | 'router()',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'queryRouterOwner',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'queryRouterOwner(uint32,uint256)',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveRouterOwner',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveRouterOwner(uint256,address)',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'router', values?: undefined): string;
  encodeFunctionData(functionFragment: 'router()', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'queryRouterOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'queryRouterOwner(uint32,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveRouterOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveRouterOwner(uint256,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'router()', data: BytesLike): Result;

  events: {
    'Owner(uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Owner'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Owner(uint256,address)'): EventFragment;
}

export interface OwnerEventObject {
  arg0: BigNumber;
  arg1: string;
}
export type OwnerEvent = TypedEvent<[BigNumber, string], OwnerEventObject>;

export type OwnerEventFilter = TypedEventFilter<OwnerEvent>;

export interface TestQuery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestQueryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    queryRouterOwner(
      domain: BigNumberish,
      secret: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'queryRouterOwner(uint32,uint256)'(
      domain: BigNumberish,
      secret: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    receiveRouterOwner(
      secret: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'receiveRouterOwner(uint256,address)'(
      secret: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    'router()'(overrides?: CallOverrides): Promise<[string]>;
  };

  queryRouterOwner(
    domain: BigNumberish,
    secret: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'queryRouterOwner(uint32,uint256)'(
    domain: BigNumberish,
    secret: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  receiveRouterOwner(
    secret: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'receiveRouterOwner(uint256,address)'(
    secret: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  'router()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    queryRouterOwner(
      domain: BigNumberish,
      secret: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'queryRouterOwner(uint32,uint256)'(
      domain: BigNumberish,
      secret: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    receiveRouterOwner(
      secret: BigNumberish,
      owner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'receiveRouterOwner(uint256,address)'(
      secret: BigNumberish,
      owner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    'router()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Owner(uint256,address)'(arg0?: null, arg1?: null): OwnerEventFilter;
    Owner(arg0?: null, arg1?: null): OwnerEventFilter;
  };

  estimateGas: {
    queryRouterOwner(
      domain: BigNumberish,
      secret: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'queryRouterOwner(uint32,uint256)'(
      domain: BigNumberish,
      secret: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    receiveRouterOwner(
      secret: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'receiveRouterOwner(uint256,address)'(
      secret: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    'router()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    queryRouterOwner(
      domain: BigNumberish,
      secret: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'queryRouterOwner(uint32,uint256)'(
      domain: BigNumberish,
      secret: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    receiveRouterOwner(
      secret: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'receiveRouterOwner(uint256,address)'(
      secret: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'router()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
