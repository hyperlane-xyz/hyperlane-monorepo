/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common.js';

export interface TestTokenRecipientInterface extends utils.Interface {
  functions: {
    'fooBar(uint256,string)': FunctionFragment;
    'handleWithTokens(uint32,bytes32,bytes,address,uint256)': FunctionFragment;
    'lastAmount()': FunctionFragment;
    'lastCallMessage()': FunctionFragment;
    'lastCaller()': FunctionFragment;
    'lastData()': FunctionFragment;
    'lastSender()': FunctionFragment;
    'lastToken()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'fooBar'
      | 'fooBar(uint256,string)'
      | 'handleWithTokens'
      | 'handleWithTokens(uint32,bytes32,bytes,address,uint256)'
      | 'lastAmount'
      | 'lastAmount()'
      | 'lastCallMessage'
      | 'lastCallMessage()'
      | 'lastCaller'
      | 'lastCaller()'
      | 'lastData'
      | 'lastData()'
      | 'lastSender'
      | 'lastSender()'
      | 'lastToken'
      | 'lastToken()',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'fooBar',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'fooBar(uint256,string)',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'handleWithTokens',
    values: [BigNumberish, BytesLike, BytesLike, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'handleWithTokens(uint32,bytes32,bytes,address,uint256)',
    values: [BigNumberish, BytesLike, BytesLike, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'lastAmount',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastAmount()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastCallMessage',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastCallMessage()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastCaller',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastCaller()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'lastData', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lastData()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastSender',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastSender()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'lastToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lastToken()',
    values?: undefined,
  ): string;

  decodeFunctionResult(functionFragment: 'fooBar', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'fooBar(uint256,string)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'handleWithTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'handleWithTokens(uint32,bytes32,bytes,address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lastAmount', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastAmount()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastCallMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastCallMessage()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lastCaller', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastCaller()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lastData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastData()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastSender', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastSender()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lastToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastToken()',
    data: BytesLike,
  ): Result;

  events: {
    'ReceivedCall(address,uint256,string)': EventFragment;
    'ReceivedMessage(uint32,bytes32,string,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ReceivedCall'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ReceivedCall(address,uint256,string)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReceivedMessage'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ReceivedMessage(uint32,bytes32,string,address,uint256)',
  ): EventFragment;
}

export interface ReceivedCallEventObject {
  caller: string;
  amount: BigNumber;
  message: string;
}
export type ReceivedCallEvent = TypedEvent<
  [string, BigNumber, string],
  ReceivedCallEventObject
>;

export type ReceivedCallEventFilter = TypedEventFilter<ReceivedCallEvent>;

export interface ReceivedMessageEventObject {
  origin: number;
  sender: string;
  message: string;
  token: string;
  amount: BigNumber;
}
export type ReceivedMessageEvent = TypedEvent<
  [number, string, string, string, BigNumber],
  ReceivedMessageEventObject
>;

export type ReceivedMessageEventFilter = TypedEventFilter<ReceivedMessageEvent>;

export interface TestTokenRecipient extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestTokenRecipientInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fooBar(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'fooBar(uint256,string)'(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    handleWithTokens(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'handleWithTokens(uint32,bytes32,bytes,address,uint256)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    lastAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    'lastAmount()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastCallMessage(overrides?: CallOverrides): Promise<[string]>;

    'lastCallMessage()'(overrides?: CallOverrides): Promise<[string]>;

    lastCaller(overrides?: CallOverrides): Promise<[string]>;

    'lastCaller()'(overrides?: CallOverrides): Promise<[string]>;

    lastData(overrides?: CallOverrides): Promise<[string]>;

    'lastData()'(overrides?: CallOverrides): Promise<[string]>;

    lastSender(overrides?: CallOverrides): Promise<[string]>;

    'lastSender()'(overrides?: CallOverrides): Promise<[string]>;

    lastToken(overrides?: CallOverrides): Promise<[string]>;

    'lastToken()'(overrides?: CallOverrides): Promise<[string]>;
  };

  fooBar(
    amount: BigNumberish,
    message: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'fooBar(uint256,string)'(
    amount: BigNumberish,
    message: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  handleWithTokens(
    _origin: BigNumberish,
    _sender: BytesLike,
    _data: BytesLike,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'handleWithTokens(uint32,bytes32,bytes,address,uint256)'(
    _origin: BigNumberish,
    _sender: BytesLike,
    _data: BytesLike,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  lastAmount(overrides?: CallOverrides): Promise<BigNumber>;

  'lastAmount()'(overrides?: CallOverrides): Promise<BigNumber>;

  lastCallMessage(overrides?: CallOverrides): Promise<string>;

  'lastCallMessage()'(overrides?: CallOverrides): Promise<string>;

  lastCaller(overrides?: CallOverrides): Promise<string>;

  'lastCaller()'(overrides?: CallOverrides): Promise<string>;

  lastData(overrides?: CallOverrides): Promise<string>;

  'lastData()'(overrides?: CallOverrides): Promise<string>;

  lastSender(overrides?: CallOverrides): Promise<string>;

  'lastSender()'(overrides?: CallOverrides): Promise<string>;

  lastToken(overrides?: CallOverrides): Promise<string>;

  'lastToken()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    fooBar(
      amount: BigNumberish,
      message: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'fooBar(uint256,string)'(
      amount: BigNumberish,
      message: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    handleWithTokens(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'handleWithTokens(uint32,bytes32,bytes,address,uint256)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastAmount(overrides?: CallOverrides): Promise<BigNumber>;

    'lastAmount()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastCallMessage(overrides?: CallOverrides): Promise<string>;

    'lastCallMessage()'(overrides?: CallOverrides): Promise<string>;

    lastCaller(overrides?: CallOverrides): Promise<string>;

    'lastCaller()'(overrides?: CallOverrides): Promise<string>;

    lastData(overrides?: CallOverrides): Promise<string>;

    'lastData()'(overrides?: CallOverrides): Promise<string>;

    lastSender(overrides?: CallOverrides): Promise<string>;

    'lastSender()'(overrides?: CallOverrides): Promise<string>;

    lastToken(overrides?: CallOverrides): Promise<string>;

    'lastToken()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'ReceivedCall(address,uint256,string)'(
      caller?: string | null,
      amount?: null,
      message?: null,
    ): ReceivedCallEventFilter;
    ReceivedCall(
      caller?: string | null,
      amount?: null,
      message?: null,
    ): ReceivedCallEventFilter;

    'ReceivedMessage(uint32,bytes32,string,address,uint256)'(
      origin?: BigNumberish | null,
      sender?: BytesLike | null,
      message?: null,
      token?: null,
      amount?: null,
    ): ReceivedMessageEventFilter;
    ReceivedMessage(
      origin?: BigNumberish | null,
      sender?: BytesLike | null,
      message?: null,
      token?: null,
      amount?: null,
    ): ReceivedMessageEventFilter;
  };

  estimateGas: {
    fooBar(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'fooBar(uint256,string)'(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    handleWithTokens(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'handleWithTokens(uint32,bytes32,bytes,address,uint256)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    lastAmount(overrides?: CallOverrides): Promise<BigNumber>;

    'lastAmount()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastCallMessage(overrides?: CallOverrides): Promise<BigNumber>;

    'lastCallMessage()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastCaller(overrides?: CallOverrides): Promise<BigNumber>;

    'lastCaller()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastData(overrides?: CallOverrides): Promise<BigNumber>;

    'lastData()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastSender(overrides?: CallOverrides): Promise<BigNumber>;

    'lastSender()'(overrides?: CallOverrides): Promise<BigNumber>;

    lastToken(overrides?: CallOverrides): Promise<BigNumber>;

    'lastToken()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fooBar(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'fooBar(uint256,string)'(
      amount: BigNumberish,
      message: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    handleWithTokens(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'handleWithTokens(uint32,bytes32,bytes,address,uint256)'(
      _origin: BigNumberish,
      _sender: BytesLike,
      _data: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    lastAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastAmount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastCallMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastCallMessage()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastCaller()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastData()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastSender()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
