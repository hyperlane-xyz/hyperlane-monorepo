/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  MockArbBridge,
  MockArbBridgeInterface,
} from '../../../../contracts/mock/MockArbBridge.sol/MockArbBridge.js';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'BridgeCallFailed',
    type: 'error',
  },
  {
    inputs: [],
    name: 'activeOutbox',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'bridge',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32[]',
        name: '',
        type: 'bytes32[]',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'executeTransaction',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'l2ToL1Sender',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_sender',
        type: 'address',
      },
    ],
    name: 'setL2ToL1Sender',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b50600080546001600160a01b03191630179055610403806100326000396000f3fe60806040526004361061005a5760003560e01c806380648b021161004357806380648b02146100d6578063ab5d89431461012c578063e78cea921461015957600080fd5b806308635a951461005f57806311b383ac14610074575b600080fd5b61007261006d3660046102a6565b61016c565b005b34801561008057600080fd5b5061007261008f36600461039b565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3480156100e257600080fd5b506001546101039073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34801561013857600080fd5b506000546101039073ffffffffffffffffffffffffffffffffffffffff1681565b34801561016557600080fd5b5030610103565b6000808873ffffffffffffffffffffffffffffffffffffffff168585856040516101979291906103bd565b60006040518083038185875af1925050503d80600081146101d4576040519150601f19603f3d011682016040523d82523d6000602084013e6101d9565b606091505b509150915081610225578051156101f35780518082602001fd5b6040517f376fb55a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461025857600080fd5b919050565b60008083601f84011261026f57600080fd5b50813567ffffffffffffffff81111561028757600080fd5b60208301915083602082850101111561029f57600080fd5b9250929050565b60008060008060008060008060008060006101208c8e0312156102c857600080fd5b8b3567ffffffffffffffff808211156102e057600080fd5b818e0191508e601f8301126102f457600080fd5b81358181111561030357600080fd5b8f60208260051b850101111561031857600080fd5b60208381019e50909c508e01359a5061033360408f01610234565b995061034160608f01610234565b985060808e0135975060a08e0135965060c08e0135955060e08e013594506101008e013591508082111561037457600080fd5b506103818e828f0161025d565b915080935050809150509295989b509295989b9093969950565b6000602082840312156103ad57600080fd5b6103b682610234565b9392505050565b818382376000910190815291905056fea26469706673582212209ef4ad0c9098dd2c9842ce5109aa388729c471febec08c86c11aff9acbb334b764736f6c63430008160033';

type MockArbBridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockArbBridgeConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockArbBridge__factory extends ContractFactory {
  constructor(...args: MockArbBridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<MockArbBridge> {
    return super.deploy(overrides || {}) as Promise<MockArbBridge>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockArbBridge {
    return super.attach(address) as MockArbBridge;
  }
  override connect(signer: Signer): MockArbBridge__factory {
    return super.connect(signer) as MockArbBridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockArbBridgeInterface {
    return new utils.Interface(_abi) as MockArbBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockArbBridge {
    return new Contract(address, _abi, signerOrProvider) as MockArbBridge;
  }
}
