/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  MockArbSys,
  MockArbSysInterface,
} from '../../../../contracts/mock/MockArbBridge.sol/MockArbSys.js';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'caller',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'destination',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'hash',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'position',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'arbBlockNum',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'ethBlockNum',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'timestamp',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'callvalue',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'L2ToL1Tx',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'destination',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'sendTxToL1',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b50610281806100206000396000f3fe60806040526004361061001e5760003560e01c8063928c169a14610023575b600080fd5b6100366100313660046100d3565b610048565b60405190815260200160405180910390f35b6000602a838360405161005c929190610171565b60405190819003902073ffffffffffffffffffffffffffffffffffffffff86167f3e7aafa77dbf186b7fd488006beff893744caa3c4f6f299e8a709fa2087374fc336100a943600a610181565b4342348b8b6040516100c197969594939291906101c5565b60405180910390a45060009392505050565b6000806000604084860312156100e857600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461010c57600080fd5b9250602084013567ffffffffffffffff8082111561012957600080fd5b818601915086601f83011261013d57600080fd5b81358181111561014c57600080fd5b87602082850101111561015e57600080fd5b6020830194508093505050509250925092565b8183823760009101908152919050565b80820281158282048414176101bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b73ffffffffffffffffffffffffffffffffffffffff8816815286602082015285604082015284606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101969550505050505056fea2646970667358221220c350e41e01dd552d967aafa3058b3156109ce7115aefb5be90f1f43c3728872664736f6c63430008160033';

type MockArbSysConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockArbSysConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockArbSys__factory extends ContractFactory {
  constructor(...args: MockArbSysConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<MockArbSys> {
    return super.deploy(overrides || {}) as Promise<MockArbSys>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockArbSys {
    return super.attach(address) as MockArbSys;
  }
  override connect(signer: Signer): MockArbSys__factory {
    return super.connect(signer) as MockArbSys__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockArbSysInterface {
    return new utils.Interface(_abi) as MockArbSysInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockArbSys {
    return new Contract(address, _abi, signerOrProvider) as MockArbSys;
  }
}
