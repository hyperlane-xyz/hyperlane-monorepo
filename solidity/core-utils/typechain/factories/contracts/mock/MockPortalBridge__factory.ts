/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  MockPortalBridge,
  MockPortalBridgeInterface,
} from '../../../contracts/mock/MockPortalBridge.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract MockToken',
        name: '_token',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'oldContract',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newContract',
        type: 'address',
      },
    ],
    name: 'ContractUpgraded',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_originDomain',
        type: 'uint32',
      },
      {
        internalType: 'uint224',
        name: '_nonce',
        type: 'uint224',
      },
      {
        internalType: 'address',
        name: '_token',
        type: 'address',
      },
    ],
    name: 'adapterData',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'encodedVm',
        type: 'bytes',
      },
    ],
    name: 'completeTransferWithPayload',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'isWrappedAsset',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_originDomain',
        type: 'uint32',
      },
      {
        internalType: 'uint224',
        name: '_nonce',
        type: 'uint224',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'mockPortalVaa',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'encoded',
        type: 'bytes',
      },
    ],
    name: 'parseTransferWithPayload',
    outputs: [
      {
        components: [
          {
            internalType: 'uint8',
            name: 'payloadID',
            type: 'uint8',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'bytes32',
            name: 'tokenAddress',
            type: 'bytes32',
          },
          {
            internalType: 'uint16',
            name: 'tokenChain',
            type: 'uint16',
          },
          {
            internalType: 'bytes32',
            name: 'to',
            type: 'bytes32',
          },
          {
            internalType: 'uint16',
            name: 'toChain',
            type: 'uint16',
          },
          {
            internalType: 'bytes32',
            name: 'fromAddress',
            type: 'bytes32',
          },
          {
            internalType: 'bytes',
            name: 'payload',
            type: 'bytes',
          },
        ],
        internalType: 'struct IPortalTokenBridge.TransferWithPayload',
        name: 'transfer',
        type: 'tuple',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'uint16',
        name: '',
        type: 'uint16',
      },
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    name: 'transferTokensWithPayload',
    outputs: [
      {
        internalType: 'uint64',
        name: 'sequence',
        type: 'uint64',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint16',
        name: '',
        type: 'uint16',
      },
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    name: 'wrappedAsset',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60806040526000805534801561001457600080fd5b50604051610b87380380610b8783398101604081905261003391610058565b600180546001600160a01b0319166001600160a01b0392909216919091179055610088565b60006020828403121561006a57600080fd5b81516001600160a01b038116811461008157600080fd5b9392505050565b610af0806100976000396000f3fe6080604052600436106100705760003560e01c80639fe6f25b1161004e5780639fe6f25b1461011d578063c3f511c11461013d578063c5a5ebda1461015d578063ea63738d1461018957600080fd5b80631a2be4da146100755780631ff1e286146100ab5780638c2a672b146100f0575b600080fd5b34801561008157600080fd5b50610096610090366004610587565b50600190565b60405190151581526020015b60405180910390f35b3480156100b757600080fd5b506100cb6100c63660046105bb565b6101b6565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a2565b3480156100fc57600080fd5b5061011061010b366004610624565b6101d6565b6040516100a291906106d9565b34801561012957600080fd5b506101106101383660046106ec565b61024a565b34801561014957600080fd5b50610110610158366004610847565b610291565b61017061016b366004610884565b6103ac565b60405167ffffffffffffffff90911681526020016100a2565b34801561019557600080fd5b506101a96101a4366004610847565b6104f2565b6040516100a29190610907565b60015473ffffffffffffffffffffffffffffffffffffffff165b92915050565b6060838373ffffffffffffffffffffffffffffffffffffffff84166040805163ffffffff90941660208501527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092169183019190915260608201526080015b60405160208183030381529060405290509392505050565b6040805163ffffffff851660208201527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff841691810191909152606081810183905290608001610232565b60606000806000848060200190518101906102ac919061097f565b6001546040517f40c10f1900000000000000000000000000000000000000000000000000000000815233600482015260248101839052939650919450925073ffffffffffffffffffffffffffffffffffffffff16906340c10f1990604401600060405180830381600087803b15801561032457600080fd5b505af1158015610338573d6000803e3d6000fd5b505060015473ffffffffffffffffffffffffffffffffffffffff16915061035c9050565b600154610382908590859073ffffffffffffffffffffffffffffffffffffffff166101d6565b6040516020016103939291906109c2565b6040516020818303038152906040529350505050919050565b600080546103bb9060016109db565b6000556001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810188905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af115801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f9190610a15565b506001546040517f42966c680000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff909116906342966c6890602401600060405180830381600087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b50506000549998505050505050505050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e08101919091526000808380602001905181019061054c9190610a37565b60e08501526040840152509092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461058257600080fd5b919050565b60006020828403121561059957600080fd5b6105a28261055e565b9392505050565b803561ffff8116811461058257600080fd5b600080604083850312156105ce57600080fd5b6105d7836105a9565b946020939093013593505050565b63ffffffff811681146105f757600080fd5b50565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811681146105f757600080fd5b60008060006060848603121561063957600080fd5b8335610644816105e5565b92506020840135610654816105fa565b91506106626040850161055e565b90509250925092565b60005b8381101561068657818101518382015260200161066e565b50506000910152565b600081518084526106a781602086016020860161066b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006105a2602083018461068f565b60008060006060848603121561070157600080fd5b833561070c816105e5565b9250602084013561071c816105fa565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156107a3576107a361072d565b604052919050565b600067ffffffffffffffff8211156107c5576107c561072d565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261080257600080fd5b8135610815610810826107ab565b61075c565b81815284602083860101111561082a57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561085957600080fd5b813567ffffffffffffffff81111561087057600080fd5b61087c848285016107f1565b949350505050565b60008060008060008060c0878903121561089d57600080fd5b6108a68761055e565b9550602087013594506108bb604088016105a9565b93506060870135925060808701356108d2816105e5565b915060a087013567ffffffffffffffff8111156108ee57600080fd5b6108fa89828a016107f1565b9150509295509295509295565b6020815260ff8251166020820152602082015160408201526040820151606082015261ffff6060830151166080820152608082015160a0820152600060a083015161095860c084018261ffff169052565b5060c083015160e083015260e083015161010080818501525061087c61012084018261068f565b60008060006060848603121561099457600080fd5b835161099f816105e5565b60208501519093506109b0816105fa565b80925050604084015190509250925092565b82815260406020820152600061087c604083018461068f565b808201808211156101d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610a2757600080fd5b815180151581146105a257600080fd5b60008060408385031215610a4a57600080fd5b82519150602083015167ffffffffffffffff811115610a6857600080fd5b8301601f81018513610a7957600080fd5b8051610a87610810826107ab565b818152866020838501011115610a9c57600080fd5b610aad82602083016020860161066b565b809350505050925092905056fea2646970667358221220ec49dbb6e9483fec0ec08000d0f8c9dc53ee9aedf4b83ddf0b4eaab7b1c7a45364736f6c63430008160033';

type MockPortalBridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPortalBridgeConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPortalBridge__factory extends ContractFactory {
  constructor(...args: MockPortalBridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: string,
    overrides?: Overrides & { from?: string },
  ): Promise<MockPortalBridge> {
    return super.deploy(_token, overrides || {}) as Promise<MockPortalBridge>;
  }
  override getDeployTransaction(
    _token: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): MockPortalBridge {
    return super.attach(address) as MockPortalBridge;
  }
  override connect(signer: Signer): MockPortalBridge__factory {
    return super.connect(signer) as MockPortalBridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPortalBridgeInterface {
    return new utils.Interface(_abi) as MockPortalBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockPortalBridge {
    return new Contract(address, _abi, signerOrProvider) as MockPortalBridge;
  }
}
