/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  MockMessageExecutor,
  MockMessageExecutorInterface,
} from '../../../../contracts/mock/MockERC5164.sol/MockMessageExecutor.js';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'fromChainId',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'messageId',
        type: 'bytes32',
      },
    ],
    name: 'MessageIdExecuted',
    type: 'event',
  },
] as const;

const _bytecode =
  '0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122055998aa0b002098dced43ce3bb84923b150e213cfbc50718f5c5ede418f8985a64736f6c63430008160033';

type MockMessageExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockMessageExecutorConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockMessageExecutor__factory extends ContractFactory {
  constructor(...args: MockMessageExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<MockMessageExecutor> {
    return super.deploy(overrides || {}) as Promise<MockMessageExecutor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockMessageExecutor {
    return super.attach(address) as MockMessageExecutor;
  }
  override connect(signer: Signer): MockMessageExecutor__factory {
    return super.connect(signer) as MockMessageExecutor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockMessageExecutorInterface {
    return new utils.Interface(_abi) as MockMessageExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockMessageExecutor {
    return new Contract(address, _abi, signerOrProvider) as MockMessageExecutor;
  }
}
