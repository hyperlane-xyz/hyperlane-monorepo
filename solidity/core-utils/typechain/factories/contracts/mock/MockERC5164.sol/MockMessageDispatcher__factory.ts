/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  MockMessageDispatcher,
  MockMessageDispatcherInterface,
} from '../../../../contracts/mock/MockERC5164.sol/MockMessageDispatcher.js';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'messageId',
        type: 'bytes32',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'toChainId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'MessageDispatched',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'toChainId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'dispatchMessage',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b5061026c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fe39827b14610030575b600080fd5b61004361003e3660046100e4565b610055565b60405190815260200160405180910390f35b6000808585858560405160200161006f9493929190610186565b604051602081830303815290604052805190602001209050853373ffffffffffffffffffffffffffffffffffffffff16827fe2f8f20ddbedfce5eb59a8b930077e7f4906a01300b9318db5f90d1c96c7b6d48888886040516100d3939291906101cc565b60405180910390a495945050505050565b600080600080606085870312156100fa57600080fd5b84359350602085013573ffffffffffffffffffffffffffffffffffffffff8116811461012557600080fd5b9250604085013567ffffffffffffffff8082111561014257600080fd5b818701915087601f83011261015657600080fd5b81358181111561016557600080fd5b88602082850101111561017757600080fd5b95989497505060200194505050565b8481527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b16602082015281836034830137600091016034019081529392505050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019291505056fea2646970667358221220b7dcea6c6aecc3fe369a737d187e4c68ea0eb92ba61c0986bbb820aab579009264736f6c63430008160033';

type MockMessageDispatcherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockMessageDispatcherConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockMessageDispatcher__factory extends ContractFactory {
  constructor(...args: MockMessageDispatcherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<MockMessageDispatcher> {
    return super.deploy(overrides || {}) as Promise<MockMessageDispatcher>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockMessageDispatcher {
    return super.attach(address) as MockMessageDispatcher;
  }
  override connect(signer: Signer): MockMessageDispatcher__factory {
    return super.connect(signer) as MockMessageDispatcher__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockMessageDispatcherInterface {
    return new utils.Interface(_abi) as MockMessageDispatcherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockMessageDispatcher {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as MockMessageDispatcher;
  }
}
