/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  MockCircleTokenMessenger,
  MockCircleTokenMessengerInterface,
} from '../../../contracts/mock/MockCircleTokenMessenger.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract MockToken',
        name: '_token',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'MessageSent',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
      {
        internalType: 'address',
        name: '_burnToken',
        type: 'address',
      },
    ],
    name: 'depositForBurn',
    outputs: [
      {
        internalType: 'uint64',
        name: '_nonce',
        type: 'uint64',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    name: 'depositForBurnWithCaller',
    outputs: [
      {
        internalType: 'uint64',
        name: '_nonce',
        type: 'uint64',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'nextNonce',
    outputs: [
      {
        internalType: 'uint64',
        name: '',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x6080604052600080546001600160401b031916905534801561002057600080fd5b506040516104f33803806104f383398101604081905261003f91610073565b600080546001600160a01b039092166801000000000000000002600160401b600160e01b03199092169190911790556100a3565b60006020828403121561008557600080fd5b81516001600160a01b038116811461009c57600080fd5b9392505050565b610441806100b26000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636fd3504e14610046578063d69c3d3014610076578063f856ddb61461008a575b600080fd5b6100596100543660046102ff565b61009d565b60405167ffffffffffffffff909116815260200160405180910390f35b6000546100599067ffffffffffffffff1681565b610059610098366004610345565b610267565b600080546100b69067ffffffffffffffff166001610393565b600080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff929092169182179081905590915073ffffffffffffffffffffffffffffffffffffffff83811668010000000000000000909204161461012357600080fd5b6000546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156101ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cf91906103e2565b506000546040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018790526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16906342966c6890602401600060405180830381600087803b15801561024757600080fd5b505af115801561025b573d6000803e3d6000fd5b50505050949350505050565b600080546102809067ffffffffffffffff166001610393565b600080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9290921691821790559695505050505050565b803563ffffffff811681146102d657600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102d657600080fd5b6000806000806080858703121561031557600080fd5b84359350610325602086016102c2565b92506040850135915061033a606086016102db565b905092959194509250565b600080600080600060a0868803121561035d57600080fd5b8535945061036d602087016102c2565b935060408601359250610382606087016102db565b949793965091946080013592915050565b67ffffffffffffffff8181168382160190808211156103db577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5092915050565b6000602082840312156103f457600080fd5b8151801515811461040457600080fd5b939250505056fea2646970667358221220be34d81296cfe5c67b705802d6a8ce0fc2af0a967e28964ceeacc2aea5453bcc64736f6c63430008160033';

type MockCircleTokenMessengerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCircleTokenMessengerConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCircleTokenMessenger__factory extends ContractFactory {
  constructor(...args: MockCircleTokenMessengerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: string,
    overrides?: Overrides & { from?: string },
  ): Promise<MockCircleTokenMessenger> {
    return super.deploy(
      _token,
      overrides || {},
    ) as Promise<MockCircleTokenMessenger>;
  }
  override getDeployTransaction(
    _token: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): MockCircleTokenMessenger {
    return super.attach(address) as MockCircleTokenMessenger;
  }
  override connect(signer: Signer): MockCircleTokenMessenger__factory {
    return super.connect(signer) as MockCircleTokenMessenger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCircleTokenMessengerInterface {
    return new utils.Interface(_abi) as MockCircleTokenMessengerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockCircleTokenMessenger {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as MockCircleTokenMessenger;
  }
}
