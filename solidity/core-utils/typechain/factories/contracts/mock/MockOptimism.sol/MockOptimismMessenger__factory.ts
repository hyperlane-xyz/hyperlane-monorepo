/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  MockOptimismMessenger,
  MockOptimismMessengerInterface,
} from '../../../../contracts/mock/MockOptimism.sol/MockOptimismMessenger.js';

const _abi = [
  {
    inputs: [],
    name: 'OTHER_MESSENGER',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'PORTAL',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_target',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_value',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'relayMessage',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_target',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
      {
        internalType: 'uint32',
        name: '_gasLimit',
        type: 'uint32',
      },
    ],
    name: 'sendMessage',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_portal',
        type: 'address',
      },
    ],
    name: 'setPORTAL',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_sender',
        type: 'address',
      },
    ],
    name: 'setXDomainMessageSender',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'xDomainMessageSender',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b506107e7806100206000396000f3fe6080604052600436106100705760003560e01c80639fce812c1161004e5780639fce812c1461010e578063a8e8a9ed14610122578063bf24eb6314610184578063d764ad0b146101e657600080fd5b80630ff754ea146100755780633dbb202b146100cb5780636e296e45146100e1575b600080fd5b34801561008157600080fd5b506001546100a29073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100df6100d93660046105e4565b50505050565b005b3480156100ed57600080fd5b506000546100a29073ffffffffffffffffffffffffffffffffffffffff1681565b34801561011a57600080fd5b5060006100a2565b34801561012e57600080fd5b506100df61013d366004610653565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b34801561019057600080fd5b506100df61019f366004610653565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6100df6101f4366004610675565b6000604051806060016040528061021e8873ffffffffffffffffffffffffffffffffffffffff1690565b815260200186815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050915250905061026c81610277565b505050505050505050565b6060610298610289836000015161029e565b8360400151846020015161034c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821115610348576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f76657260448201527f666c6f770000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5090565b60606103728484846040518060600160405280602981526020016107896029913961037a565b949350505050565b60608247101561040c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161033f565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610435919061071b565b60006040518083038185875af1925050503d8060008114610472576040519150601f19603f3d011682016040523d82523d6000602084013e610477565b606091505b509150915061048887838387610493565b979650505050505050565b606083156105295782516000036105225773ffffffffffffffffffffffffffffffffffffffff85163b610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161033f565b5081610372565b610372838381511561053e5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033f9190610737565b803573ffffffffffffffffffffffffffffffffffffffff8116811461059657600080fd5b919050565b60008083601f8401126105ad57600080fd5b50813567ffffffffffffffff8111156105c557600080fd5b6020830191508360208285010111156105dd57600080fd5b9250929050565b600080600080606085870312156105fa57600080fd5b61060385610572565b9350602085013567ffffffffffffffff81111561061f57600080fd5b61062b8782880161059b565b909450925050604085013563ffffffff8116811461064857600080fd5b939692955090935050565b60006020828403121561066557600080fd5b61066e82610572565b9392505050565b600080600080600080600060c0888a03121561069057600080fd5b873596506106a060208901610572565b95506106ae60408901610572565b9450606088013593506080880135925060a088013567ffffffffffffffff8111156106d857600080fd5b6106e48a828b0161059b565b989b979a50959850939692959293505050565b60005b838110156107125781810151838201526020016106fa565b50506000910152565b6000825161072d8184602087016106f7565b9190910192915050565b60208152600082518060208401526107568160408501602087016106f7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212206f0fcc9c2e6bc51979bb07b3142e66fda21ca1e10b8635841cb8b67dc0c957dc64736f6c63430008160033';

type MockOptimismMessengerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOptimismMessengerConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOptimismMessenger__factory extends ContractFactory {
  constructor(...args: MockOptimismMessengerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<MockOptimismMessenger> {
    return super.deploy(overrides || {}) as Promise<MockOptimismMessenger>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockOptimismMessenger {
    return super.attach(address) as MockOptimismMessenger;
  }
  override connect(signer: Signer): MockOptimismMessenger__factory {
    return super.connect(signer) as MockOptimismMessenger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOptimismMessengerInterface {
    return new utils.Interface(_abi) as MockOptimismMessengerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockOptimismMessenger {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as MockOptimismMessenger;
  }
}
