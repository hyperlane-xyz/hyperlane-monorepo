/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

import type {
  ECDSAStakeRegistryStorage,
  ECDSAStakeRegistryStorageInterface,
} from '../../../contracts/avs/ECDSAStakeRegistryStorage.js';

const _abi = [
  {
    inputs: [],
    name: 'InsufficientSignedStake',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InsufficientWeight',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidLength',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidQuorum',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidReferenceBlock',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidSignature',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidSignedWeight',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidThreshold',
    type: 'error',
  },
  {
    inputs: [],
    name: 'LengthMismatch',
    type: 'error',
  },
  {
    inputs: [],
    name: 'MustUpdateAllOperators',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotSorted',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OperatorAlreadyRegistered',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OperatorNotRegistered',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: '_old',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: '_new',
        type: 'uint256',
      },
    ],
    name: 'MinimumWeightUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: '_operator',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: '_avs',
        type: 'address',
      },
    ],
    name: 'OperatorDeregistered',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: '_operator',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: '_avs',
        type: 'address',
      },
    ],
    name: 'OperatorRegistered',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: '_operator',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'oldWeight',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'newWeight',
        type: 'uint256',
      },
    ],
    name: 'OperatorWeightUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'contract IStrategy',
                name: 'strategy',
                type: 'address',
              },
              {
                internalType: 'uint96',
                name: 'multiplier',
                type: 'uint96',
              },
            ],
            internalType: 'struct StrategyParams[]',
            name: 'strategies',
            type: 'tuple[]',
          },
        ],
        indexed: false,
        internalType: 'struct Quorum',
        name: '_old',
        type: 'tuple',
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'contract IStrategy',
                name: 'strategy',
                type: 'address',
              },
              {
                internalType: 'uint96',
                name: 'multiplier',
                type: 'uint96',
              },
            ],
            internalType: 'struct StrategyParams[]',
            name: 'strategies',
            type: 'tuple[]',
          },
        ],
        indexed: false,
        internalType: 'struct Quorum',
        name: '_new',
        type: 'tuple',
      },
    ],
    name: 'QuorumUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'updateBlock',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newSigningKey',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'oldSigningKey',
        type: 'address',
      },
    ],
    name: 'SigningKeyUpdate',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: '_thresholdWeight',
        type: 'uint256',
      },
    ],
    name: 'ThresholdWeightUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'oldTotalWeight',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'newTotalWeight',
        type: 'uint256',
      },
    ],
    name: 'TotalWeightUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'oldMinimumWeight',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'newMinimumWeight',
        type: 'uint256',
      },
    ],
    name: 'UpdateMinimumWeight',
    type: 'event',
  },
] as const;

export class ECDSAStakeRegistryStorage__factory {
  static readonly abi = _abi;
  static createInterface(): ECDSAStakeRegistryStorageInterface {
    return new utils.Interface(_abi) as ECDSAStakeRegistryStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ECDSAStakeRegistryStorage {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as ECDSAStakeRegistryStorage;
  }
}
