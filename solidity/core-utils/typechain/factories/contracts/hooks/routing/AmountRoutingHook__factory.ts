/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import {
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
  Signer,
  utils,
} from 'ethers';

import type {
  AmountRoutingHook,
  AmountRoutingHookInterface,
} from '../../../../contracts/hooks/routing/AmountRoutingHook.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_lowerHook',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_upperHook',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_threshold',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'PACKAGE_VERSION',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hookType',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'lower',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'metadata',
        type: 'bytes',
      },
      {
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'postDispatch',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'metadata',
        type: 'bytes',
      },
      {
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'quoteDispatch',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'metadata',
        type: 'bytes',
      },
    ],
    name: 'supportsMetadata',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'threshold',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'upper',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60e060405234801561001057600080fd5b50604051610e4e380380610e4e83398101604081905261002f916100fa565b8282826001600160a01b0383163b1515801561005457506001600160a01b0382163b15155b6100bf5760405162461bcd60e51b815260206004820152603260248201527f416d6f756e74506172746974696f6e3a206c6f77657220616e64207570706572604482015271206d75737420626520636f6e74726163747360701b606482015260840160405180910390fd5b6001600160a01b03928316608052911660a05260c05250610136915050565b80516001600160a01b03811681146100f557600080fd5b919050565b60008060006060848603121561010f57600080fd5b610118846100de565b9250610126602085016100de565b9150604084015190509250925092565b60805160a05160c051610cd66101786000396000818160a7015261054901526000818160ee01526105700152600081816101bd01526105990152610cd66000f3fe60806040526004361061007b5760003560e01c8063aaccd2301161004e578063aaccd2301461018b578063b951486d146101ab578063e445e7dd146101df578063e5320bb9146101fb57600080fd5b8063086011b91461008057806342cde4e8146100955780634bdf4a6d146100dc57806393c4484714610135575b600080fd5b61009361008e3660046109a2565b61022b565b005b3480156100a157600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b3480156100e857600080fd5b506101107f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d3565b34801561014157600080fd5b5061017e6040518060400160405280600581526020017f372e312e3400000000000000000000000000000000000000000000000000000081525081565b6040516100d39190610a0e565b34801561019757600080fd5b506100c96101a63660046109a2565b6102d8565b3480156101b757600080fd5b506101107f000000000000000000000000000000000000000000000000000000000000000081565b3480156101eb57600080fd5b50604051600e81526020016100d3565b34801561020757600080fd5b5061021b610216366004610a7b565b610385565b60405190151581526020016100d3565b6102358484610385565b6102c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4162737472616374506f73744469737061746368486f6f6b3a20696e76616c6960448201527f64206d657461646174612076617269616e74000000000000000000000000000060648201526084015b60405180910390fd5b6102d2848484846103aa565b50505050565b60006102e48585610385565b610370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4162737472616374506f73744469737061746368486f6f6b3a20696e76616c6960448201527f64206d657461646174612076617269616e74000000000000000000000000000060648201526084016102bd565b61037c85858585610454565b95945050505050565b60008115806103a15750600161039b84846104df565b61ffff16145b90505b92915050565b60006103b885858585610454565b90506103c48383610530565b73ffffffffffffffffffffffffffffffffffffffff1663086011b982878787876040518663ffffffff1660e01b81526004016104039493929190610b06565b6000604051808303818588803b15801561041c57600080fd5b505af1158015610430573d6000803e3d6000fd5b505050505061044d8585858585346104489190610b67565b6105c0565b5050505050565b60006104608383610530565b73ffffffffffffffffffffffffffffffffffffffff1663aaccd230868686866040518563ffffffff1660e01b815260040161049e9493929190610b06565b602060405180830381865afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c9190610b7a565b60006104ec816002610b93565b60ff168210156104fe575060006103a4565b8260008361050d826002610b93565b60ff169261051d93929190610bac565b61052691610bd6565b60f01c9392505050565b60008061054561054085856106ab565b6106c7565b90507f00000000000000000000000000000000000000000000000000000000000000008110610597577f00000000000000000000000000000000000000000000000000000000000000009150506103a4565b7f00000000000000000000000000000000000000000000000000000000000000009150506103a4565b801561044d5760006105de6105d585856106e0565b879087906106f4565b905073ffffffffffffffffffffffffffffffffffffffff8116610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4162737472616374506f73744469737061746368486f6f6b3a206e6f2072656660448201527f756e64206164647265737300000000000000000000000000000000000000000060648201526084016102bd565b6106a373ffffffffffffffffffffffffffffffffffffffff821683610748565b505050505050565b3660006106bb83604d8187610bac565b915091505b9250929050565b60006106d7604060208486610bac565b6103a191610c1e565b60006103a16106ef84846108a7565b6108b7565b600061070260426014610b93565b60ff16831015610713575080610741565b83604284610722826014610b93565b60ff169261073293929190610bac565b61073b91610c5a565b60601c90505b9392505050565b804710156107b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102bd565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461080c576040519150601f19603f3d011682016040523d82523d6000602084013e610811565b606091505b50509050806108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016102bd565b505050565b60006106d7602960098486610bac565b600073ffffffffffffffffffffffffffffffffffffffff82111561095c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f76657260448201527f666c6f770000000000000000000000000000000000000000000000000000000060648201526084016102bd565b5090565b60008083601f84011261097257600080fd5b50813567ffffffffffffffff81111561098a57600080fd5b6020830191508360208285010111156106c057600080fd5b600080600080604085870312156109b857600080fd5b843567ffffffffffffffff808211156109d057600080fd5b6109dc88838901610960565b909650945060208701359150808211156109f557600080fd5b50610a0287828801610960565b95989497509550505050565b60006020808352835180602085015260005b81811015610a3c57858101830151858201604001528201610a20565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60008060208385031215610a8e57600080fd5b823567ffffffffffffffff811115610aa557600080fd5b610ab185828601610960565b90969095509350505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b604081526000610b1a604083018688610abd565b8281036020840152610b2d818587610abd565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156103a4576103a4610b38565b600060208284031215610b8c57600080fd5b5051919050565b60ff81811683821601908111156103a4576103a4610b38565b60008085851115610bbc57600080fd5b83861115610bc957600080fd5b5050820193919092039150565b7fffff0000000000000000000000000000000000000000000000000000000000008135818116916002851015610c165780818660020360031b1b83161692505b505092915050565b803560208310156103a4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008135818116916014851015610c165760149490940360031b84901b169092169291505056fea2646970667358221220bb95b94256466e7bd10c387bd4b776716696d023ac31ebce64108add7bf25b6564736f6c63430008160033';

type AmountRoutingHookConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AmountRoutingHookConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AmountRoutingHook__factory extends ContractFactory {
  constructor(...args: AmountRoutingHookConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lowerHook: string,
    _upperHook: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<AmountRoutingHook> {
    return super.deploy(
      _lowerHook,
      _upperHook,
      _threshold,
      overrides || {},
    ) as Promise<AmountRoutingHook>;
  }
  override getDeployTransaction(
    _lowerHook: string,
    _upperHook: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lowerHook,
      _upperHook,
      _threshold,
      overrides || {},
    );
  }
  override attach(address: string): AmountRoutingHook {
    return super.attach(address) as AmountRoutingHook;
  }
  override connect(signer: Signer): AmountRoutingHook__factory {
    return super.connect(signer) as AmountRoutingHook__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AmountRoutingHookInterface {
    return new utils.Interface(_abi) as AmountRoutingHookInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): AmountRoutingHook {
    return new Contract(address, _abi, signerOrProvider) as AmountRoutingHook;
  }
}
