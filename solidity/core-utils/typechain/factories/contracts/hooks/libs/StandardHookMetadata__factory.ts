/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  StandardHookMetadata,
  StandardHookMetadataInterface,
} from '../../../../contracts/hooks/libs/StandardHookMetadata.js';

const _abi = [
  {
    inputs: [],
    name: 'VARIANT',
    outputs: [
      {
        internalType: 'uint16',
        name: '',
        type: 'uint16',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608c610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806326418953146038575b600080fd5b603f600181565b60405161ffff909116815260200160405180910390f3fea264697066735822122039eb81b92cdc4b40eaf2aa288b91c3a869a92601b4c3de80e2a3dc28955cec2a64736f6c63430008160033';

type StandardHookMetadataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StandardHookMetadataConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StandardHookMetadata__factory extends ContractFactory {
  constructor(...args: StandardHookMetadataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<StandardHookMetadata> {
    return super.deploy(overrides || {}) as Promise<StandardHookMetadata>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StandardHookMetadata {
    return super.attach(address) as StandardHookMetadata;
  }
  override connect(signer: Signer): StandardHookMetadata__factory {
    return super.connect(signer) as StandardHookMetadata__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StandardHookMetadataInterface {
    return new utils.Interface(_abi) as StandardHookMetadataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): StandardHookMetadata {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as StandardHookMetadata;
  }
}
