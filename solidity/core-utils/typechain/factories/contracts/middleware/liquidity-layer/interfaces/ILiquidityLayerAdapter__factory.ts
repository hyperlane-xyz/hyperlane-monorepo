/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

import type {
  ILiquidityLayerAdapter,
  ILiquidityLayerAdapterInterface,
} from '../../../../../contracts/middleware/liquidity-layer/interfaces/ILiquidityLayerAdapter.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_originDomain',
        type: 'uint32',
      },
      {
        internalType: 'address',
        name: '_recipientAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: '_adapterData',
        type: 'bytes',
      },
    ],
    name: 'receiveTokens',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_destinationDomain',
        type: 'uint32',
      },
      {
        internalType: 'bytes32',
        name: '_recipientAddress',
        type: 'bytes32',
      },
      {
        internalType: 'address',
        name: '_token',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'sendTokens',
    outputs: [
      {
        internalType: 'bytes',
        name: '_adapterData',
        type: 'bytes',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class ILiquidityLayerAdapter__factory {
  static readonly abi = _abi;
  static createInterface(): ILiquidityLayerAdapterInterface {
    return new utils.Interface(_abi) as ILiquidityLayerAdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ILiquidityLayerAdapter {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as ILiquidityLayerAdapter;
  }
}
