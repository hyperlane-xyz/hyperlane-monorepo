/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

import type {
  ITokenMessenger,
  ITokenMessengerInterface,
} from '../../../../../../contracts/middleware/liquidity-layer/interfaces/circle/ITokenMessenger.js';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'MessageSent',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
      {
        internalType: 'uint32',
        name: '_destinationDomain',
        type: 'uint32',
      },
      {
        internalType: 'bytes32',
        name: '_mintRecipient',
        type: 'bytes32',
      },
      {
        internalType: 'address',
        name: '_burnToken',
        type: 'address',
      },
    ],
    name: 'depositForBurn',
    outputs: [
      {
        internalType: 'uint64',
        name: '_nonce',
        type: 'uint64',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_amount',
        type: 'uint256',
      },
      {
        internalType: 'uint32',
        name: '_destinationDomain',
        type: 'uint32',
      },
      {
        internalType: 'bytes32',
        name: '_mintRecipient',
        type: 'bytes32',
      },
      {
        internalType: 'address',
        name: '_burnToken',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: '_destinationCaller',
        type: 'bytes32',
      },
    ],
    name: 'depositForBurnWithCaller',
    outputs: [
      {
        internalType: 'uint64',
        name: '_nonce',
        type: 'uint64',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class ITokenMessenger__factory {
  static readonly abi = _abi;
  static createInterface(): ITokenMessengerInterface {
    return new utils.Interface(_abi) as ITokenMessengerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ITokenMessenger {
    return new Contract(address, _abi, signerOrProvider) as ITokenMessenger;
  }
}
