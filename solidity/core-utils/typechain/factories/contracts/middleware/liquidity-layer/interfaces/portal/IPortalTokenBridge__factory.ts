/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

import type {
  IPortalTokenBridge,
  IPortalTokenBridgeInterface,
} from '../../../../../../contracts/middleware/liquidity-layer/interfaces/portal/IPortalTokenBridge.js';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'oldContract',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newContract',
        type: 'address',
      },
    ],
    name: 'ContractUpgraded',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'encodedVm',
        type: 'bytes',
      },
    ],
    name: 'completeTransferWithPayload',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'isWrappedAsset',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'encoded',
        type: 'bytes',
      },
    ],
    name: 'parseTransferWithPayload',
    outputs: [
      {
        components: [
          {
            internalType: 'uint8',
            name: 'payloadID',
            type: 'uint8',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'bytes32',
            name: 'tokenAddress',
            type: 'bytes32',
          },
          {
            internalType: 'uint16',
            name: 'tokenChain',
            type: 'uint16',
          },
          {
            internalType: 'bytes32',
            name: 'to',
            type: 'bytes32',
          },
          {
            internalType: 'uint16',
            name: 'toChain',
            type: 'uint16',
          },
          {
            internalType: 'bytes32',
            name: 'fromAddress',
            type: 'bytes32',
          },
          {
            internalType: 'bytes',
            name: 'payload',
            type: 'bytes',
          },
        ],
        internalType: 'struct IPortalTokenBridge.TransferWithPayload',
        name: 'transfer',
        type: 'tuple',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'uint16',
        name: 'recipientChain',
        type: 'uint16',
      },
      {
        internalType: 'bytes32',
        name: 'recipient',
        type: 'bytes32',
      },
      {
        internalType: 'uint32',
        name: 'nonce',
        type: 'uint32',
      },
      {
        internalType: 'bytes',
        name: 'payload',
        type: 'bytes',
      },
    ],
    name: 'transferTokensWithPayload',
    outputs: [
      {
        internalType: 'uint64',
        name: 'sequence',
        type: 'uint64',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint16',
        name: 'tokenChainId',
        type: 'uint16',
      },
      {
        internalType: 'bytes32',
        name: 'tokenAddress',
        type: 'bytes32',
      },
    ],
    name: 'wrappedAsset',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

export class IPortalTokenBridge__factory {
  static readonly abi = _abi;
  static createInterface(): IPortalTokenBridgeInterface {
    return new utils.Interface(_abi) as IPortalTokenBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): IPortalTokenBridge {
    return new Contract(address, _abi, signerOrProvider) as IPortalTokenBridge;
  }
}
