/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  Indexed,
  IndexedInterface,
} from '../../../contracts/libs/Indexed.js';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'deployedBlock',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60a0604052348015600f57600080fd5b5043608052608051609b61002c600039600060310152609b6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806382ea7bfe14602d575b600080fd5b60537f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f3fea26469706673582212205c6f50ef350c3a1c5c032df82b131b93a84ced0ec6796bd95c74bc8f117528a164736f6c63430008160033';

type IndexedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IndexedConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Indexed__factory extends ContractFactory {
  constructor(...args: IndexedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<Indexed> {
    return super.deploy(overrides || {}) as Promise<Indexed>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Indexed {
    return super.attach(address) as Indexed;
  }
  override connect(signer: Signer): Indexed__factory {
    return super.connect(signer) as Indexed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IndexedInterface {
    return new utils.Interface(_abi) as IndexedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Indexed {
    return new Contract(address, _abi, signerOrProvider) as Indexed;
  }
}
