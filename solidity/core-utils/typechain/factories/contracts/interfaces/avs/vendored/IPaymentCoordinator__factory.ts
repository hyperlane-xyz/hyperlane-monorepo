/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

import type {
  IPaymentCoordinator,
  IPaymentCoordinatorInterface,
} from '../../../../../contracts/interfaces/avs/vendored/IPaymentCoordinator.js';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'contract IStrategy',
                name: 'strategy',
                type: 'address',
              },
              {
                internalType: 'uint96',
                name: 'multiplier',
                type: 'uint96',
              },
            ],
            internalType: 'struct IPaymentCoordinator.StrategyAndMultiplier[]',
            name: 'strategiesAndMultipliers',
            type: 'tuple[]',
          },
          {
            internalType: 'contract IERC20',
            name: 'token',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'uint64',
            name: 'startTimestamp',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'duration',
            type: 'uint64',
          },
        ],
        internalType: 'struct IPaymentCoordinator.RangePayment[]',
        name: 'rangePayments',
        type: 'tuple[]',
      },
    ],
    name: 'payForRange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class IPaymentCoordinator__factory {
  static readonly abi = _abi;
  static createInterface(): IPaymentCoordinatorInterface {
    return new utils.Interface(_abi) as IPaymentCoordinatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): IPaymentCoordinator {
    return new Contract(address, _abi, signerOrProvider) as IPaymentCoordinator;
  }
}
