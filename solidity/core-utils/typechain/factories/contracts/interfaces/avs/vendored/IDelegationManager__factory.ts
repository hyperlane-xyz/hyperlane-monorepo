/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

import type {
  IDelegationManager,
  IDelegationManagerInterface,
} from '../../../../../contracts/interfaces/avs/vendored/IDelegationManager.js';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
    ],
    name: 'OperatorMetadataURIUpdated',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        internalType: 'contract IStrategy[]',
        name: 'strategies',
        type: 'address[]',
      },
    ],
    name: 'getOperatorShares',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'earningsReceiver',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'delegationApprover',
            type: 'address',
          },
          {
            internalType: 'uint32',
            name: 'stakerOptOutWindowBlocks',
            type: 'uint32',
          },
        ],
        internalType: 'struct IDelegationManager.OperatorDetails',
        name: 'registeringOperatorDetails',
        type: 'tuple',
      },
      {
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
    ],
    name: 'registerAsOperator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class IDelegationManager__factory {
  static readonly abi = _abi;
  static createInterface(): IDelegationManagerInterface {
    return new utils.Interface(_abi) as IDelegationManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): IDelegationManager {
    return new Contract(address, _abi, signerOrProvider) as IDelegationManager;
  }
}
