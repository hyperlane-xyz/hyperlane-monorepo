/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

import type {
  IServiceManager,
  IServiceManagerInterface,
} from '../../../../../contracts/interfaces/avs/vendored/IServiceManager.js';

const _abi = [
  {
    inputs: [],
    name: 'avsDirectory',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
    ],
    name: 'deregisterOperatorFromAVS',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
    ],
    name: 'getOperatorRestakedStrategies',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getRestakeableStrategies',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'contract IStrategy',
                name: 'strategy',
                type: 'address',
              },
              {
                internalType: 'uint96',
                name: 'multiplier',
                type: 'uint96',
              },
            ],
            internalType: 'struct IPaymentCoordinator.StrategyAndMultiplier[]',
            name: 'strategiesAndMultipliers',
            type: 'tuple[]',
          },
          {
            internalType: 'contract IERC20',
            name: 'token',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'uint64',
            name: 'startTimestamp',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'duration',
            type: 'uint64',
          },
        ],
        internalType: 'struct IPaymentCoordinator.RangePayment[]',
        name: 'rangePayments',
        type: 'tuple[]',
      },
    ],
    name: 'payForRange',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'bytes32',
            name: 'salt',
            type: 'bytes32',
          },
          {
            internalType: 'uint256',
            name: 'expiry',
            type: 'uint256',
          },
        ],
        internalType: 'struct ISignatureUtils.SignatureWithSaltAndExpiry',
        name: 'operatorSignature',
        type: 'tuple',
      },
    ],
    name: 'registerOperatorToAVS',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: '_metadataURI',
        type: 'string',
      },
    ],
    name: 'updateAVSMetadataURI',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class IServiceManager__factory {
  static readonly abi = _abi;
  static createInterface(): IServiceManagerInterface {
    return new utils.Interface(_abi) as IServiceManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): IServiceManager {
    return new Contract(address, _abi, signerOrProvider) as IServiceManager;
  }
}
