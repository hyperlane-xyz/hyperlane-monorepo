/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

import type {
  IMessageDispatcher,
  IMessageDispatcherInterface,
} from '../../../../contracts/interfaces/hooks/IMessageDispatcher.js';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'messageId',
        type: 'bytes32',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'toChainId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'MessageDispatched',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'toChainId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'dispatchMessage',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export class IMessageDispatcher__factory {
  static readonly abi = _abi;
  static createInterface(): IMessageDispatcherInterface {
    return new utils.Interface(_abi) as IMessageDispatcherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): IMessageDispatcher {
    return new Contract(address, _abi, signerOrProvider) as IMessageDispatcher;
  }
}
