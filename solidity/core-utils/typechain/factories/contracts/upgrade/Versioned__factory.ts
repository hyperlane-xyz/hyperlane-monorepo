/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  Versioned,
  VersionedInterface,
} from '../../../contracts/upgrade/Versioned.js';

const _abi = [
  {
    inputs: [],
    name: 'VERSION',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x6080604052348015600f57600080fd5b5060808061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ffa1ad7414602d575b600080fd5b6034600381565b60405160ff909116815260200160405180910390f3fea2646970667358221220fa9f513b50653635a3b44f64c692766986f3f6c7a3c7f91bc7a52adbf99e0f1864736f6c63430008160033';

type VersionedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VersionedConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Versioned__factory extends ContractFactory {
  constructor(...args: VersionedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<Versioned> {
    return super.deploy(overrides || {}) as Promise<Versioned>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Versioned {
    return super.attach(address) as Versioned;
  }
  override connect(signer: Signer): Versioned__factory {
    return super.connect(signer) as Versioned__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VersionedInterface {
    return new utils.Interface(_abi) as VersionedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Versioned {
    return new Contract(address, _abi, signerOrProvider) as Versioned;
  }
}
