/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  TestSlasher,
  TestSlasherInterface,
} from '../../../../contracts/test/avs/TestSlasher.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'toBeFrozen',
        type: 'address',
      },
    ],
    name: 'freezeOperator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b5060ae8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806338c8ee6414602d575b600080fd5b603b6038366004603d565b50565b005b600060208284031215604e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114607157600080fd5b939250505056fea2646970667358221220869fc2448cc43b96d75132f038e91bf6f1b9eed722525d3353cfc40a1df0057b64736f6c63430008160033';

type TestSlasherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestSlasherConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestSlasher__factory extends ContractFactory {
  constructor(...args: TestSlasherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<TestSlasher> {
    return super.deploy(overrides || {}) as Promise<TestSlasher>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestSlasher {
    return super.attach(address) as TestSlasher;
  }
  override connect(signer: Signer): TestSlasher__factory {
    return super.connect(signer) as TestSlasher__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestSlasherInterface {
    return new utils.Interface(_abi) as TestSlasherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): TestSlasher {
    return new Contract(address, _abi, signerOrProvider) as TestSlasher;
  }
}
