/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  TestAVSDirectory,
  TestAVSDirectoryInterface,
} from '../../../../contracts/test/avs/TestAVSDirectory.js';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'avs',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
    ],
    name: 'AVSMetadataURIUpdated',
    type: 'event',
  },
  {
    inputs: [],
    name: 'DOMAIN_TYPEHASH',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'OPERATOR_AVS_REGISTRATION_TYPEHASH',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'avsOperatorStatus',
    outputs: [
      {
        internalType: 'enum IAVSDirectory.OperatorAVSRegistrationStatus',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'avs',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: 'salt',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
    ],
    name: 'calculateOperatorAVSRegistrationDigestHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
    ],
    name: 'deregisterOperatorFromAVS',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'domainSeparator',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
          {
            internalType: 'bytes32',
            name: 'salt',
            type: 'bytes32',
          },
          {
            internalType: 'uint256',
            name: 'expiry',
            type: 'uint256',
          },
        ],
        internalType: 'struct ISignatureUtils.SignatureWithSaltAndExpiry',
        name: 'operatorSignature',
        type: 'tuple',
      },
    ],
    name: 'registerOperatorToAVS',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'metadataURI',
        type: 'string',
      },
    ],
    name: 'updateAVSMetadataURI',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b50610cae806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a364f4da1161005b578063a364f4da14610127578063a98fb3551461018c578063d79aceab1461019f578063f698da25146101c657600080fd5b806320606b701461008d57806349075da3146100c75780639926ee7d146100ff578063a1060c8814610114575b600080fd5b6100b47f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6040519081526020015b60405180910390f35b6100f26100d5366004610908565b600060208181529281526040808220909352908152205460ff1681565b6040516100be919061096a565b61011261010d366004610a52565b610272565b005b6100b4610122366004610b55565b6103d9565b610112610135366004610b97565b3360009081526020818152604080832073ffffffffffffffffffffffffffffffffffffffff9490941683529290522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b61011261019a366004610bb9565b61057d565b6100b47fda2c89bafdd34776a2b8bb9c83c82f419e20cc8c67207f70edd58249b92661bd81565b604080518082018252600a81527f456967656e4c617965720000000000000000000000000000000000000000000060209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527f71b625cfad44bac63b13dba07f2e1d6084ee04b6f8752101ece6126d584ee6ea81840152466060820152306080808301919091528351808303909101815260a090910190925281519101206100b4565b60006102888333846020015185604001516103d9565b90508273ffffffffffffffffffffffffffffffffffffffff166102af8284600001516105d1565b73ffffffffffffffffffffffffffffffffffffffff161461037d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604760248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a207369676e6174757265206e6f742066726f6d60648201527f207369676e657200000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b50503360009081526020818152604080832073ffffffffffffffffffffffffffffffffffffffff9490941683529290522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b604080517fda2c89bafdd34776a2b8bb9c83c82f419e20cc8c67207f70edd58249b92661bd60208083019190915273ffffffffffffffffffffffffffffffffffffffff87811683850152861660608301526080820185905260a08083018590528351808403909101815260c0909201909252805191012060009081610501604080518082018252600a81527f456967656e4c617965720000000000000000000000000000000000000000000060209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527f71b625cfad44bac63b13dba07f2e1d6084ee04b6f8752101ece6126d584ee6ea81840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101839052606201604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529190528051602090910120979650505050505050565b3373ffffffffffffffffffffffffffffffffffffffff167fa89c1dc243d8908a96dd84944bcc97d6bc6ac00dd78e20621576be6a3c94371383836040516105c5929190610c2b565b60405180910390a25050565b60008060006105e085856105f5565b915091506105ed8161063a565b509392505050565b600080825160410361062b5760208301516040840151606085015160001a61061f878285856107f0565b94509450505050610633565b506000905060025b9250929050565b600081600481111561064e5761064e61093b565b036106565750565b600181600481111561066a5761066a61093b565b036106d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610374565b60028160048111156106e5576106e561093b565b0361074c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610374565b60038160048111156107605761076061093b565b036107ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610374565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561082757506000905060036108d6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561087b573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166108cf576000600192509250506108d6565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461090357600080fd5b919050565b6000806040838503121561091b57600080fd5b610924836108df565b9150610932602084016108df565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600283106109a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156109fd576109fd6109ab565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610a4a57610a4a6109ab565b604052919050565b60008060408385031215610a6557600080fd5b610a6e836108df565b915060208084013567ffffffffffffffff80821115610a8c57600080fd5b9085019060608288031215610aa057600080fd5b610aa86109da565b823582811115610ab757600080fd5b8301601f81018913610ac857600080fd5b803583811115610ada57610ada6109ab565b610b0a867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610a03565b93508084528986828401011115610b2057600080fd5b808683018786013760008682860101525050818152838301358482015260408301356040820152809450505050509250929050565b60008060008060808587031215610b6b57600080fd5b610b74856108df565b9350610b82602086016108df565b93969395505050506040820135916060013590565b600060208284031215610ba957600080fd5b610bb2826108df565b9392505050565b60008060208385031215610bcc57600080fd5b823567ffffffffffffffff80821115610be457600080fd5b818501915085601f830112610bf857600080fd5b813581811115610c0757600080fd5b866020828501011115610c1957600080fd5b60209290920196919550909350505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010191905056fea2646970667358221220028afefaa06e271b2342e7b26196bcd69082842a2032478c7ddbe54de3aad96b64736f6c63430008160033';

type TestAVSDirectoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestAVSDirectoryConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestAVSDirectory__factory extends ContractFactory {
  constructor(...args: TestAVSDirectoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<TestAVSDirectory> {
    return super.deploy(overrides || {}) as Promise<TestAVSDirectory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestAVSDirectory {
    return super.attach(address) as TestAVSDirectory;
  }
  override connect(signer: Signer): TestAVSDirectory__factory {
    return super.connect(signer) as TestAVSDirectory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAVSDirectoryInterface {
    return new utils.Interface(_abi) as TestAVSDirectoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): TestAVSDirectory {
    return new Contract(address, _abi, signerOrProvider) as TestAVSDirectory;
  }
}
