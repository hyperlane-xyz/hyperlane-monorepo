/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  TestPostDispatchHook,
  TestPostDispatchHookInterface,
} from '../../../contracts/test/TestPostDispatchHook.js';

const _abi = [
  {
    inputs: [],
    name: 'PACKAGE_VERSION',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hookType',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'messageId',
        type: 'bytes32',
      },
    ],
    name: 'messageDispatched',
    outputs: [
      {
        internalType: 'bool',
        name: 'dispatched',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'metadata',
        type: 'bytes',
      },
      {
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'postDispatch',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'metadata',
        type: 'bytes',
      },
      {
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'quoteDispatch',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_fee',
        type: 'uint256',
      },
    ],
    name: 'setFee',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    name: 'supportsMetadata',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60806040526000805534801561001457600080fd5b50610434806100246000396000f3fe60806040526004361061007b5760003560e01c8063ddca3f431161004e578063ddca3f4314610148578063e445e7dd1461015e578063e5320bb91461017a578063f667ee91146101ad57600080fd5b8063086011b91461008057806369fe0e2d1461009557806393c44847146100b5578063aaccd23014610114575b600080fd5b61009361008e3660046102ca565b6101dd565b005b3480156100a157600080fd5b506100936100b0366004610336565b600055565b3480156100c157600080fd5b506100fe6040518060400160405280600581526020017f372e312e3400000000000000000000000000000000000000000000000000000081525081565b60405161010b919061034f565b60405180910390f35b34801561012057600080fd5b5061013a61012f3660046102ca565b505060005492915050565b60405190815260200161010b565b34801561015457600080fd5b5061013a60005481565b34801561016a57600080fd5b506040516000815260200161010b565b34801561018657600080fd5b5061019d6101953660046103bc565b600192915050565b604051901515815260200161010b565b3480156101b957600080fd5b5061019d6101c8366004610336565b60016020526000908152604090205460ff1681565b6101e9848484846101ef565b50505050565b600180600061023385858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061027692505050565b8152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905550505050565b805160209091012090565b60008083601f84011261029357600080fd5b50813567ffffffffffffffff8111156102ab57600080fd5b6020830191508360208285010111156102c357600080fd5b9250929050565b600080600080604085870312156102e057600080fd5b843567ffffffffffffffff808211156102f857600080fd5b61030488838901610281565b9096509450602087013591508082111561031d57600080fd5b5061032a87828801610281565b95989497509550505050565b60006020828403121561034857600080fd5b5035919050565b60006020808352835180602085015260005b8181101561037d57858101830151858201604001528201610361565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600080602083850312156103cf57600080fd5b823567ffffffffffffffff8111156103e657600080fd5b6103f285828601610281565b9096909550935050505056fea2646970667358221220b8e4db362bae39af77e2bcb66823508e0dad3e1d55c4f9ca348cd5f637da84b764736f6c63430008160033';

type TestPostDispatchHookConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPostDispatchHookConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPostDispatchHook__factory extends ContractFactory {
  constructor(...args: TestPostDispatchHookConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<TestPostDispatchHook> {
    return super.deploy(overrides || {}) as Promise<TestPostDispatchHook>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestPostDispatchHook {
    return super.attach(address) as TestPostDispatchHook;
  }
  override connect(signer: Signer): TestPostDispatchHook__factory {
    return super.connect(signer) as TestPostDispatchHook__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPostDispatchHookInterface {
    return new utils.Interface(_abi) as TestPostDispatchHookInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): TestPostDispatchHook {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as TestPostDispatchHook;
  }
}
