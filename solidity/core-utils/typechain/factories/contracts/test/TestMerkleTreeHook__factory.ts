/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  TestMerkleTreeHook,
  TestMerkleTreeHookInterface,
} from '../../../contracts/test/TestMerkleTreeHook.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_mailbox',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_hook',
        type: 'address',
      },
    ],
    name: 'HookSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint8',
        name: 'version',
        type: 'uint8',
      },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'bytes32',
        name: 'messageId',
        type: 'bytes32',
      },
      {
        indexed: false,
        internalType: 'uint32',
        name: 'index',
        type: 'uint32',
      },
    ],
    name: 'InsertedIntoTree',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_ism',
        type: 'address',
      },
    ],
    name: 'IsmSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'PACKAGE_VERSION',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'count',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'deployedBlock',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hook',
    outputs: [
      {
        internalType: 'contract IPostDispatchHook',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hookType',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '_id',
        type: 'bytes32',
      },
    ],
    name: 'insert',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'interchainSecurityModule',
    outputs: [
      {
        internalType: 'contract IInterchainSecurityModule',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'latestCheckpoint',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'localDomain',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'mailbox',
    outputs: [
      {
        internalType: 'contract IMailbox',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'metadata',
        type: 'bytes',
      },
      {
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'postDispatch',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'proof',
    outputs: [
      {
        internalType: 'bytes32[32]',
        name: '',
        type: 'bytes32[32]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'metadata',
        type: 'bytes',
      },
      {
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'quoteDispatch',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'root',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_hook',
        type: 'address',
      },
    ],
    name: 'setHook',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_module',
        type: 'address',
      },
    ],
    name: 'setInterchainSecurityModule',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'metadata',
        type: 'bytes',
      },
    ],
    name: 'supportsMetadata',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'tree',
    outputs: [
      {
        components: [
          {
            internalType: 'bytes32[32]',
            name: 'branch',
            type: 'bytes32[32]',
          },
          {
            internalType: 'uint256',
            name: 'count',
            type: 'uint256',
          },
        ],
        internalType: 'struct MerkleLib.Tree',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60e06040523480156200001157600080fd5b5060405162001ce138038062001ce1833981016040819052620000349162000179565b8080806001600160a01b0381163b620000935760405162461bcd60e51b815260206004820152601e60248201527f4d61696c626f78436c69656e743a20696e76616c6964206d61696c626f780000604482015260640160405180910390fd5b6001600160a01b03821660808190526040805163234d8e3d60e21b81529051638d3638f4916004808201926020929091908290030181865afa158015620000de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001049190620001ab565b63ffffffff1660a052620001183362000127565b50504360c05250620001d39050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200018c57600080fd5b81516001600160a01b0381168114620001a457600080fd5b9392505050565b600060208284031215620001be57600080fd5b815163ffffffff81168114620001a457600080fd5b60805160a05160c051611ad76200020a6000396000610288015260006102ca0152600081816103ce01526114120152611ad76000f3fe60806040526004361061016a5760003560e01c8063907c0f92116100cb578063e445e7dd1161007f578063f2fde38b11610059578063f2fde38b14610489578063faf924cf146104a9578063fd54b228146104cb57600080fd5b8063e445e7dd1461041d578063e5320bb914610444578063ebf0c7171461047457600080fd5b8063aaccd230116100b0578063aaccd2301461039c578063d5438eae146103bc578063de523cf3146103f057600080fd5b8063907c0f921461031757806393c448471461034657600080fd5b8063715018a61161012257806382ea7bfe1161010757806382ea7bfe146102765780638d3638f4146102b85780638da5cb5b146102ec57600080fd5b8063715018a61461020f5780637f5a7c7b1461022457600080fd5b80630e72cc06116101535780630e72cc06146101af5780632d287e43146101cf5780633dfd3873146101ef57600080fd5b806306661abd1461016f578063086011b91461019a575b600080fd5b34801561017b57600080fd5b5060b7545b60405163ffffffff90911681526020015b60405180910390f35b6101ad6101a83660046115f5565b6104ed565b005b3480156101bb57600080fd5b506101ad6101ca366004611661565b61059a565b3480156101db57600080fd5b506101ad6101ea36600461169e565b6106e3565b3480156101fb57600080fd5b506101ad61020a366004611661565b6106f1565b34801561021b57600080fd5b506101ad610832565b34801561023057600080fd5b506065546102519073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610191565b34801561028257600080fd5b506102aa7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610191565b3480156102c457600080fd5b506101807f000000000000000000000000000000000000000000000000000000000000000081565b3480156102f857600080fd5b5060335473ffffffffffffffffffffffffffffffffffffffff16610251565b34801561032357600080fd5b5061032c610846565b6040805192835263ffffffff909116602083015201610191565b34801561035257600080fd5b5061038f6040518060400160405280600581526020017f372e312e3400000000000000000000000000000000000000000000000000000081525081565b60405161019191906116b7565b3480156103a857600080fd5b506102aa6103b73660046115f5565b61086e565b3480156103c857600080fd5b506102517f000000000000000000000000000000000000000000000000000000000000000081565b3480156103fc57600080fd5b506066546102519073ffffffffffffffffffffffffffffffffffffffff1681565b34801561042957600080fd5b50610432610911565b60405160ff9091168152602001610191565b34801561045057600080fd5b5061046461045f366004611724565b61091b565b6040519015158152602001610191565b34801561048057600080fd5b506102aa610940565b34801561049557600080fd5b506101ad6104a4366004611661565b61094c565b3480156104b557600080fd5b506104be610a00565b604051610191919061178d565b3480156104d757600080fd5b506104e0610abe565b604051610191919061179c565b6104f7848461091b565b610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4162737472616374506f73744469737061746368486f6f6b3a20696e76616c6960448201527f64206d657461646174612076617269616e74000000000000000000000000000060648201526084015b60405180910390fd5b61059484848484610b0d565b50505050565b8073ffffffffffffffffffffffffffffffffffffffff81163b1515806105d4575073ffffffffffffffffffffffffffffffffffffffff8116155b610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201527f73657474696e6700000000000000000000000000000000000000000000000000606482015260840161057f565b610668610cab565b606680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fc47cbcc588c67679e52261c45cc315e56562f8d0ccaba16facb9093ff9498799906020015b60405180910390a15050565b6106ee609782610d2c565b50565b8073ffffffffffffffffffffffffffffffffffffffff81163b15158061072b575073ffffffffffffffffffffffffffffffffffffffff8116155b6107b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201527f73657474696e6700000000000000000000000000000000000000000000000000606482015260840161057f565b6107bf610cab565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527f4eab7b127c764308788622363ad3e9532de3dfba7845bd4f84c125a22544255a906020016106d7565b61083a610cab565b6108446000610e66565b565b600080610851610940565b600161085c60b75490565b61086691906117f0565b915091509091565b600061087a858561091b565b610906576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4162737472616374506f73744469737061746368486f6f6b3a20696e76616c6960448201527f64206d657461646174612076617269616e740000000000000000000000000000606482015260840161057f565b600095945050505050565b600060035b905090565b6000811580610937575060016109318484610edd565b61ffff16145b90505b92915050565b60006109166097610f2e565b610954610cab565b73ffffffffffffffffffffffffffffffffffffffff81166109f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161057f565b6106ee81610e66565b610a0861156d565b6000610a12610f41565b905060006001609760200154610a289190611814565b9050610a3261156d565b60005b6020811015610ab657600183821c811690819003610a7e5760978260208110610a6057610a60611827565b0154838360208110610a7457610a74611827565b6020020152610aad565b848260208110610a9057610a90611827565b6020020151838360208110610aa757610aa7611827565b60200201525b50600101610a35565b509392505050565b610ac661158c565b60408051610440810180835290916097918391820190839060209082845b815481526020019060010190808311610ae4575050509183525050602091820154910152919050565b3415610b9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4d65726b6c6554726565486f6f6b3a206e6f2076616c7565206578706563746560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161057f565b6000610bdc83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061140292505050565b9050610be78161140d565b610c4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f6d657373616765206e6f74206469737061746368696e67000000000000000000604482015260640161057f565b6000610c5860b75490565b9050610c65609783610d2c565b6040805183815263ffffffff831660208201527f253a3a04cab70d47c1504809242d9350cd81627b4f1d50753e159cf8cd76ed33910160405180910390a1505050505050565b60335473ffffffffffffffffffffffffffffffffffffffff163314610844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161057f565b6001610d3a60206002611976565b610d449190611814565b826020015410610db0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6d65726b6c6520747265652066756c6c00000000000000000000000000000000604482015260640161057f565b6001826020016000828254610dc59190611982565b9091555050602082015460005b6020811015610e585781600116600103610e015782848260208110610df957610df9611827565b015550505050565b838160208110610e1357610e13611827565b01546040805160208101929092528101849052606001604051602081830303815290604052805190602001209250600282610e4e9190611995565b9150600101610dd2565b50610e616119d0565b505050565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610eea8160026119ff565b60ff16821015610efc5750600061093a565b82600083610f0b8260026119ff565b60ff1692610f1b93929190611a18565b610f2491611a42565b60f01c9392505050565b600061093a82610f3c610f41565b6114a6565b610f4961156d565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b805160209091012090565b6000817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663134fbb4f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f9190611a88565b1492915050565b6020820154600090815b602081101561156557600182821c1660008683602081106114d3576114d3611827565b015490508160010361151057604080516020810183905290810186905260600160405160208183030381529060405280519060200120945061155b565b8486846020811061152357611523611827565b6020020151604051602001611542929190918252602082015260400190565b6040516020818303038152906040528051906020012094505b50506001016114b0565b505092915050565b6040518061040001604052806020906020820280368337509192915050565b604051806040016040528061159f61156d565b8152602001600081525090565b60008083601f8401126115be57600080fd5b50813567ffffffffffffffff8111156115d657600080fd5b6020830191508360208285010111156115ee57600080fd5b9250929050565b6000806000806040858703121561160b57600080fd5b843567ffffffffffffffff8082111561162357600080fd5b61162f888389016115ac565b9096509450602087013591508082111561164857600080fd5b50611655878288016115ac565b95989497509550505050565b60006020828403121561167357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461169757600080fd5b9392505050565b6000602082840312156116b057600080fd5b5035919050565b60006020808352835180602085015260005b818110156116e5578581018301518582016040015282016116c9565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000806020838503121561173757600080fd5b823567ffffffffffffffff81111561174e57600080fd5b61175a858286016115ac565b90969095509350505050565b8060005b60208082106117795750610594565b82518552938401939091019060010161176a565b610400810161093a8284611766565b6000610420820190506117b0828451611766565b602083015161040083015292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b63ffffffff82811682821603908082111561180d5761180d6117c1565b5092915050565b8181038181111561093a5761093a6117c1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181815b808511156118af57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611895576118956117c1565b808516156118a257918102915b93841c939080029061185b565b509250929050565b6000826118c65750600161093a565b816118d35750600061093a565b81600181146118e957600281146118f35761190f565b600191505061093a565b60ff841115611904576119046117c1565b50506001821b61093a565b5060208310610133831016604e8410600b8410161715611932575081810a61093a565b61193c8383611856565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561196e5761196e6117c1565b029392505050565b600061093783836118b7565b8082018082111561093a5761093a6117c1565b6000826119cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60ff818116838216019081111561093a5761093a6117c1565b60008085851115611a2857600080fd5b83861115611a3557600080fd5b5050820193919092039150565b7fffff00000000000000000000000000000000000000000000000000000000000081358181169160028510156115655760029490940360031b84901b1690921692915050565b600060208284031215611a9a57600080fd5b505191905056fea2646970667358221220b2d4ed375cfd9340f8eb6eafaae3dcd02feac70ae5c1ad0f75a7842893a1b18864736f6c63430008160033';

type TestMerkleTreeHookConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestMerkleTreeHookConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestMerkleTreeHook__factory extends ContractFactory {
  constructor(...args: TestMerkleTreeHookConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _mailbox: string,
    overrides?: Overrides & { from?: string },
  ): Promise<TestMerkleTreeHook> {
    return super.deploy(
      _mailbox,
      overrides || {},
    ) as Promise<TestMerkleTreeHook>;
  }
  override getDeployTransaction(
    _mailbox: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_mailbox, overrides || {});
  }
  override attach(address: string): TestMerkleTreeHook {
    return super.attach(address) as TestMerkleTreeHook;
  }
  override connect(signer: Signer): TestMerkleTreeHook__factory {
    return super.connect(signer) as TestMerkleTreeHook__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMerkleTreeHookInterface {
    return new utils.Interface(_abi) as TestMerkleTreeHookInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): TestMerkleTreeHook {
    return new Contract(address, _abi, signerOrProvider) as TestMerkleTreeHook;
  }
}
