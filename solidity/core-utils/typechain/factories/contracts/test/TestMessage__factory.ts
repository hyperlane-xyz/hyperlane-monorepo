/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  TestMessage,
  TestMessageInterface,
} from '../../../contracts/test/TestMessage.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'body',
    outputs: [
      {
        internalType: 'bytes',
        name: '_body',
        type: 'bytes',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'destination',
    outputs: [
      {
        internalType: 'uint32',
        name: '_destination',
        type: 'uint32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'id',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'nonce',
    outputs: [
      {
        internalType: 'uint256',
        name: '_nonce',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'origin',
    outputs: [
      {
        internalType: 'uint32',
        name: '_origin',
        type: 'uint32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'recipient',
    outputs: [
      {
        internalType: 'bytes32',
        name: '_recipient',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'recipientAddress',
    outputs: [
      {
        internalType: 'address',
        name: '_recipient',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'sender',
    outputs: [
      {
        internalType: 'bytes32',
        name: '_sender',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'version',
    outputs: [
      {
        internalType: 'uint32',
        name: '_version',
        type: 'uint32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b506105c9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063985a5c3111610076578063c97c703a1161005b578063c97c703a14610142578063cb3eb0e114610163578063f45387ba1461017657600080fd5b8063985a5c311461011c578063c81aa9c81461012f57600080fd5b80634e765004146100a85780636dc3c4f7146100ce57806379384787146100e15780637d67c5a7146100f4575b600080fd5b6100bb6100b63660046103e0565b6101ae565b6040519081526020015b60405180910390f35b6100bb6100dc3660046103e0565b6101c9565b6100bb6100ef3660046103e0565b6101dc565b6101076101023660046103e0565b61021d565b60405163ffffffff90911681526020016100c5565b6100bb61012a3660046103e0565b610233565b61010761013d3660046103e0565b61023f565b6101556101503660046103e0565b61024b565b6040516100c5929190610452565b6101076101713660046103e0565b610263565b6101896101843660046103e0565b61026f565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c5565b60006101ba838361027b565b63ffffffff1690505b92915050565b60006101d5838361029e565b9392505050565b60006101d583838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506102b792505050565b600061022983836102c2565b60ff169392505050565b60006101d583836102e4565b60006101d583836102f4565b3660006102588484610304565b915091509250929050565b60006101d58383610314565b60006101d58383610324565b600061028b60056001848661049f565b610294916104c9565b60e01c9392505050565b60006102ae60296009848661049f565b6101d591610511565b805160209091012090565b60006102d1600182848661049f565b6102da9161054d565b60f81c9392505050565b60006102ae604d602d848661049f565b600061028b602d6029848661049f565b36600061025883604d818761049f565b600061028b60096005848661049f565b60006101d561033384846102e4565b600073ffffffffffffffffffffffffffffffffffffffff8211156103dc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f76657260448201527f666c6f7700000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b5090565b600080602083850312156103f357600080fd5b823567ffffffffffffffff8082111561040b57600080fd5b818501915085601f83011261041f57600080fd5b81358181111561042e57600080fd5b86602082850101111561044057600080fd5b60209290920196919550909350505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b600080858511156104af57600080fd5b838611156104bc57600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156105095780818660040360031b1b83161692505b505092915050565b803560208310156101c3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156105095760019490940360031b84901b169092169291505056fea2646970667358221220ce42ca70916833452a7464569ae64aaf172f6e1655af73bea481e0293150798364736f6c63430008160033';

type TestMessageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestMessageConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestMessage__factory extends ContractFactory {
  constructor(...args: TestMessageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string },
  ): Promise<TestMessage> {
    return super.deploy(overrides || {}) as Promise<TestMessage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestMessage {
    return super.attach(address) as TestMessage;
  }
  override connect(signer: Signer): TestMessage__factory {
    return super.connect(signer) as TestMessage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMessageInterface {
    return new utils.Interface(_abi) as TestMessageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): TestMessage {
    return new Contract(address, _abi, signerOrProvider) as TestMessage;
  }
}
