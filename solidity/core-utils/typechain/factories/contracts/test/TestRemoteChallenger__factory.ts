/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  TestRemoteChallenger,
  TestRemoteChallengerInterface,
} from '../../../contracts/test/TestRemoteChallenger.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract HyperlaneServiceManager',
        name: '_hsm',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'challengeDelayBlocks',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
    ],
    name: 'handleChallenge',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60a060405234801561001057600080fd5b5060405161020638038061020683398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161017c61008a600039600060aa015261017c6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806348a345481461003b578063fad8b5c414610050575b600080fd5b61c4e060405190815260200160405180910390f35b61006361005e366004610109565b610065565b005b6040517f38c8ee6400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f000000000000000000000000000000000000000000000000000000000000000016906338c8ee6490602401600060405180830381600087803b1580156100ee57600080fd5b505af1158015610102573d6000803e3d6000fd5b5050505050565b60006020828403121561011b57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461013f57600080fd5b939250505056fea26469706673582212200bd19faca9cef2b7c705d9dcd5e782465b23ca7a8603a4dcd878ad84553f85c964736f6c63430008160033';

type TestRemoteChallengerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestRemoteChallengerConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestRemoteChallenger__factory extends ContractFactory {
  constructor(...args: TestRemoteChallengerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _hsm: string,
    overrides?: Overrides & { from?: string },
  ): Promise<TestRemoteChallenger> {
    return super.deploy(_hsm, overrides || {}) as Promise<TestRemoteChallenger>;
  }
  override getDeployTransaction(
    _hsm: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_hsm, overrides || {});
  }
  override attach(address: string): TestRemoteChallenger {
    return super.attach(address) as TestRemoteChallenger;
  }
  override connect(signer: Signer): TestRemoteChallenger__factory {
    return super.connect(signer) as TestRemoteChallenger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestRemoteChallengerInterface {
    return new utils.Interface(_abi) as TestRemoteChallengerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): TestRemoteChallenger {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as TestRemoteChallenger;
  }
}
