/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  ValidatorAnnounce,
  ValidatorAnnounceInterface,
} from '../../../../contracts/isms/multisig/ValidatorAnnounce.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_mailbox',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_hook',
        type: 'address',
      },
    ],
    name: 'HookSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint8',
        name: 'version',
        type: 'uint8',
      },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: '_ism',
        type: 'address',
      },
    ],
    name: 'IsmSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'validator',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'string',
        name: 'storageLocation',
        type: 'string',
      },
    ],
    name: 'ValidatorAnnouncement',
    type: 'event',
  },
  {
    inputs: [],
    name: 'PACKAGE_VERSION',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_validator',
        type: 'address',
      },
      {
        internalType: 'string',
        name: '_storageLocation',
        type: 'string',
      },
      {
        internalType: 'bytes',
        name: '_signature',
        type: 'bytes',
      },
    ],
    name: 'announce',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_validators',
        type: 'address[]',
      },
    ],
    name: 'getAnnouncedStorageLocations',
    outputs: [
      {
        internalType: 'string[][]',
        name: '',
        type: 'string[][]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAnnouncedValidators',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: '_storageLocation',
        type: 'string',
      },
    ],
    name: 'getAnnouncementDigest',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hook',
    outputs: [
      {
        internalType: 'contract IPostDispatchHook',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'interchainSecurityModule',
    outputs: [
      {
        internalType: 'contract IInterchainSecurityModule',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'localDomain',
    outputs: [
      {
        internalType: 'uint32',
        name: '',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'mailbox',
    outputs: [
      {
        internalType: 'contract IMailbox',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_hook',
        type: 'address',
      },
    ],
    name: 'setHook',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_module',
        type: 'address',
      },
    ],
    name: 'setInterchainSecurityModule',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60c06040523480156200001157600080fd5b5060405162001a5738038062001a57833981016040819052620000349162000172565b80806001600160a01b0381163b620000925760405162461bcd60e51b815260206004820152601e60248201527f4d61696c626f78436c69656e743a20696e76616c6964206d61696c626f780000604482015260640160405180910390fd5b6001600160a01b03821660808190526040805163234d8e3d60e21b81529051638d3638f4916004808201926020929091908290030181865afa158015620000dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001039190620001a4565b63ffffffff1660a052620001173362000120565b505050620001cc565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200018557600080fd5b81516001600160a01b03811681146200019d57600080fd5b9392505050565b600060208284031215620001b757600080fd5b815163ffffffff811681146200019d57600080fd5b60805160a05161185762000200600039600081816101c60152610a3301526000818161028a0152610a6901526118576000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638d3638f41161008c578063b91e6a5111610066578063b91e6a5114610264578063d5438eae14610285578063de523cf3146102ac578063f2fde38b146102cc57600080fd5b80638d3638f4146101c15780638da5cb5b146101fd57806393c448471461021b57600080fd5b806351abe7cc116100c857806351abe7cc1461013f578063690cb7861461015f578063715018a6146101745780637f5a7c7b1461017c57600080fd5b80630e72cc06146100ef57806321f71781146101045780633dfd38731461012c575b600080fd5b6101026100fd366004611144565b6102df565b005b6101176101123660046111a1565b61042d565b60405190151581526020015b60405180910390f35b61010261013a366004611144565b6106ff565b61015261014d366004611222565b610840565b6040516101239190611305565b610167610a02565b60405161012391906113e7565b610102610a13565b60655461019c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610123565b6101e87f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610123565b60335473ffffffffffffffffffffffffffffffffffffffff1661019c565b6102576040518060400160405280600581526020017f372e312e3400000000000000000000000000000000000000000000000000000081525081565b6040516101239190611441565b610277610272366004611483565b610a27565b604051908152602001610123565b61019c7f000000000000000000000000000000000000000000000000000000000000000081565b60665461019c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101026102da366004611144565b610b5d565b8073ffffffffffffffffffffffffffffffffffffffff81163b151580610319575073ffffffffffffffffffffffffffffffffffffffff8116155b6103aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201527f73657474696e670000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103b2610c14565b606680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fc47cbcc588c67679e52261c45cc315e56562f8d0ccaba16facb9093ff9498799906020015b60405180910390a15050565b60008086868660405160200161044593929190611552565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152609a90935291205490915060ff16156104f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f7265706c6179000000000000000000000000000000000000000000000000000060448201526064016103a1565b6000818152609a6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558051601f8901839004830281018301909152878152610568918990899081908401838280828437600092019190915250610a2792505050565b905060006105ac8287878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c9592505050565b90508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f217369676e61747572650000000000000000000000000000000000000000000060448201526064016103a1565b61064e60978a610cb1565b61065f5761065d60978a610ce3565b505b73ffffffffffffffffffffffffffffffffffffffff891660009081526099602090815260408220805460018101825590835291200161069f888a83611635565b508873ffffffffffffffffffffffffffffffffffffffff167f78066d8adb677a1353d1fc8be28cf03e2a8de7157bbab979953587d78076c11e89896040516106e8929190611750565b60405180910390a250600198975050505050505050565b8073ffffffffffffffffffffffffffffffffffffffff81163b151580610739575073ffffffffffffffffffffffffffffffffffffffff8116155b6107c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201527f73657474696e670000000000000000000000000000000000000000000000000060648201526084016103a1565b6107cd610c14565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527f4eab7b127c764308788622363ad3e9532de3dfba7845bd4f84c125a22544255a90602001610421565b606060008267ffffffffffffffff81111561085d5761085d611454565b60405190808252806020026020018201604052801561089057816020015b606081526020019060019003908161087b5790505b50905060005b838110156109f857609960008686848181106108b4576108b461179d565b90506020020160208101906108c99190611144565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156109cf57838290600052602060002001805461094290611591565b80601f016020809104026020016040519081016040528092919081815260200182805461096e90611591565b80156109bb5780601f10610990576101008083540402835291602001916109bb565b820191906000526020600020905b81548152906001019060200180831161099e57829003601f168201915b505050505081526020019060010190610923565b505050508282815181106109e5576109e561179d565b6020908102919091010152600101610896565b5090505b92915050565b6060610a0e6097610d05565b905090565b610a1b610c14565b610a256000610d12565b565b60006109fc610b0260007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660405160e09290921b7fffffffff0000000000000000000000000000000000000000000000000000000016602083015260248201527f48595045524c414e455f414e4e4f554e43454d454e54000000000000000000006044820152605a0160405160208183030381529060405280519060200120905090565b83604051602001610b149291906117cc565b604051602081830303815290604052805190602001207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b610b65610c14565b73ffffffffffffffffffffffffffffffffffffffff8116610c08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103a1565b610c1181610d12565b50565b60335473ffffffffffffffffffffffffffffffffffffffff163314610a25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103a1565b6000806000610ca48585610d89565b915091506109f881610dce565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205415155b9392505050565b6000610cdc8373ffffffffffffffffffffffffffffffffffffffff8416610f81565b60606000610cdc83610fd0565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000808251604103610dbf5760208301516040840151606085015160001a610db38782858561102c565b94509450505050610dc7565b506000905060025b9250929050565b6000816004811115610de257610de26117f2565b03610dea5750565b6001816004811115610dfe57610dfe6117f2565b03610e65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016103a1565b6002816004811115610e7957610e796117f2565b03610ee0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103a1565b6003816004811115610ef457610ef46117f2565b03610c11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016103a1565b6000818152600183016020526040812054610fc8575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109fc565b5060006109fc565b60608160000180548060200260200160405190810160405280929190818152602001828054801561102057602002820191906000526020600020905b81548152602001906001019080831161100c575b50505050509050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156110635750600090506003611112565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156110b7573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661110b57600060019250925050611112565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461113f57600080fd5b919050565b60006020828403121561115657600080fd5b610cdc8261111b565b60008083601f84011261117157600080fd5b50813567ffffffffffffffff81111561118957600080fd5b602083019150836020828501011115610dc757600080fd5b6000806000806000606086880312156111b957600080fd5b6111c28661111b565b9450602086013567ffffffffffffffff808211156111df57600080fd5b6111eb89838a0161115f565b9096509450604088013591508082111561120457600080fd5b506112118882890161115f565b969995985093965092949392505050565b6000806020838503121561123557600080fd5b823567ffffffffffffffff8082111561124d57600080fd5b818501915085601f83011261126157600080fd5b81358181111561127057600080fd5b8660208260051b850101111561128557600080fd5b60209290920196919550909350505050565b60005b838110156112b257818101518382015260200161129a565b50506000910152565b600081518084526112d3816020860160208601611297565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600060208083018184528085518083526040860191506005925060408160051b8701018488016000805b848110156113d8578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018652825180518086529089019089860190808a1b87018b01855b828110156113c2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08983030184526113b08286516112bb565b948d0194938d01939150600101611376565b50988b019896505050928801925060010161132f565b50919998505050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561143557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611403565b50909695505050505050565b602081526000610cdc60208301846112bb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561149557600080fd5b813567ffffffffffffffff808211156114ad57600080fd5b818401915084601f8301126114c157600080fd5b8135818111156114d3576114d3611454565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561151957611519611454565b8160405282815287602084870101111561153257600080fd5b826020860160208301376000928101602001929092525095945050505050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b168152818360148301376000910160140190815292915050565b600181811c908216806115a557607f821691505b6020821081036115de577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115611630576000816000526020600020601f850160051c8101602086101561160d5750805b601f850160051c820191505b8181101561162c57828155600101611619565b5050505b505050565b67ffffffffffffffff83111561164d5761164d611454565b6116618361165b8354611591565b836115e4565b6000601f8411600181146116b3576000851561167d5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611749565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561170257868501358255602094850194600190920191016116e2565b508682101561173d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b828152600082516117e4816020850160208701611297565b919091016020019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea264697066735822122084edec3a450647224ad39da3b13b6a4ab123fc6f4e57a0fc3dd2be82b15053df64736f6c63430008160033';

type ValidatorAnnounceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ValidatorAnnounceConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ValidatorAnnounce__factory extends ContractFactory {
  constructor(...args: ValidatorAnnounceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _mailbox: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ValidatorAnnounce> {
    return super.deploy(
      _mailbox,
      overrides || {},
    ) as Promise<ValidatorAnnounce>;
  }
  override getDeployTransaction(
    _mailbox: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_mailbox, overrides || {});
  }
  override attach(address: string): ValidatorAnnounce {
    return super.attach(address) as ValidatorAnnounce;
  }
  override connect(signer: Signer): ValidatorAnnounce__factory {
    return super.connect(signer) as ValidatorAnnounce__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ValidatorAnnounceInterface {
    return new utils.Interface(_abi) as ValidatorAnnounceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ValidatorAnnounce {
    return new Contract(address, _abi, signerOrProvider) as ValidatorAnnounce;
  }
}
