/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import {
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
  Signer,
  utils,
} from 'ethers';

import type {
  StorageMerkleRootMultisigIsm,
  StorageMerkleRootMultisigIsmInterface,
} from '../../../../../contracts/isms/multisig/StorageMultisigIsm.sol/StorageMerkleRootMultisigIsm.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_validators',
        type: 'address[]',
      },
      {
        internalType: 'uint8',
        name: '_threshold',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint8',
        name: 'version',
        type: 'uint8',
      },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferStarted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address[]',
        name: 'validators',
        type: 'address[]',
      },
      {
        indexed: false,
        internalType: 'uint8',
        name: 'threshold',
        type: 'uint8',
      },
    ],
    name: 'ValidatorsAndThresholdSet',
    type: 'event',
  },
  {
    inputs: [],
    name: 'PACKAGE_VERSION',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_owner',
        type: 'address',
      },
      {
        internalType: 'address[]',
        name: '_validators',
        type: 'address[]',
      },
      {
        internalType: 'uint8',
        name: '_threshold',
        type: 'uint8',
      },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'moduleType',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingOwner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_validators',
        type: 'address[]',
      },
      {
        internalType: 'uint8',
        name: '_threshold',
        type: 'uint8',
      },
    ],
    name: 'setValidatorsAndThreshold',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_metadata',
        type: 'bytes',
      },
    ],
    name: 'signatureCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'threshold',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'validators',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    name: 'validatorsAndThreshold',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_metadata',
        type: 'bytes',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'verify',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162001df438038062001df48339810160408190526200003491620001f8565b8151829082906200004d90609790602085019062000132565b506098805460ff191660ff83161790556200006762000071565b50505050620002de565b600054610100900460ff1615620000de5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000130576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b8280548282559060005260206000209081019282156200018a579160200282015b828111156200018a57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000153565b50620001989291506200019c565b5090565b5b808211156200019857600081556001016200019d565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620001e157600080fd5b919050565b805160ff81168114620001e157600080fd5b600080604083850312156200020c57600080fd5b82516001600160401b03808211156200022457600080fd5b818501915085601f8301126200023957600080fd5b8151602082821115620002505762000250620001b3565b8160051b604051601f19603f83011681018181108682111715620002785762000278620001b3565b6040529283528183019350848101820192898411156200029757600080fd5b948201945b83861015620002c057620002b086620001c9565b855294820194938201936200029c565b9650620002d19050878201620001e6565b9450505050509250929050565b611b0680620002ee6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806379ba50971161008c578063d1b7d63e11610066578063d1b7d63e14610221578063e30c397814610234578063f2fde38b14610252578063f7e83aee1461026557600080fd5b806379ba5097146101b25780638da5cb5b146101ba57806393c44847146101d857600080fd5b806335aa2e44116100c857806335aa2e441461014b57806342cde4e8146101835780636465e69f146101a2578063715018a6146101aa57600080fd5b806322a8d6fc146100ef5780632dac3b21146101155780632e0ed2341461012a575b600080fd5b6101026100fd36600461148c565b610288565b6040519081526020015b60405180910390f35b6101286101233660046115ef565b61029d565b005b61013d61013836600461148c565b61044a565b60405161010c92919061164d565b61015e6101593660046116b4565b6104cd565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010c565b6098546101909060ff1681565b60405160ff909116815260200161010c565b610190600481565b610128610504565b610128610518565b60335473ffffffffffffffffffffffffffffffffffffffff1661015e565b6102146040518060400160405280600581526020017f372e312e3400000000000000000000000000000000000000000000000000000081525081565b60405161010c91906116cd565b61012861022f36600461173a565b6105cd565b60655473ffffffffffffffffffffffffffffffffffffffff1661015e565b610128610260366004611788565b6106d1565b6102786102733660046117a3565b610781565b604051901515815260200161010c565b6000610294838361098c565b90505b92915050565b600054610100900460ff16158080156102bd5750600054600160ff909116105b806102d75750303b1580156102d7575060005460ff166001145b610368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156103c657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6103ce610a22565b6103d883836105cd565b6103e184610ac1565b801561044457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60985460978054604080516020808402820181019092528281526060946000949360ff909116928491908301828280156104ba57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161048f575b50505050509150915091505b9250929050565b609781815481106104dd57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b61050c610af2565b6105166000610ac1565b565b606554339073ffffffffffffffffffffffffffffffffffffffff1681146105c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e65720000000000000000000000000000000000000000000000606482015260840161035f565b6105ca81610ac1565b50565b6105d5610af2565b8060ff1660001080156105ec575081518160ff1611155b610652576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207468726573686f6c64000000000000000000000000000000604482015260640161035f565b815161066590609790602085019061138c565b50609880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff83161790556040517fad139d49eba34197fd93debea81087c9847944af1850061285a663a39d688f4e906106c5908490849061164d565b60405180910390a15050565b6106d9610af2565b6065805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561073c60335473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60008061079086868686610b73565b905060008061079f868661044a565b9150915060008160ff1611610836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4e6f204d756c746973696749534d207468726573686f6c642070726573656e7460448201527f20666f72206d6573736167650000000000000000000000000000000000000000606482015260840161035f565b81516000805b8360ff1681101561097b576000610892876108588e8e86610c9d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cb792505050565b90505b83831080156108e957508583815181106108b1576108b161183e565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b156108fe576108f78361189c565b9250610895565b838310610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f217468726573686f6c6400000000000000000000000000000000000000000000604482015260640161035f565b6109708361189c565b92505060010161083c565b5060019a9950505050505050505050565b60008061099b610448846118d4565b90506109a8604182611916565b15610a0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c6964207369676e617475726573206c656e67746800000000000000604482015260640161035f565b610a1a60418261192a565b949350505050565b600054610100900460ff16610ab9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161035f565b610516610cdb565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556105ca81610d7b565b60335473ffffffffffffffffffffffffffffffffffffffff163314610516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035f565b6000610b7f8585610df2565b63ffffffff16610b8f8686610e28565b63ffffffff161115610bfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f496e76616c6964206d65726b6c6520696e646578206d65746164617461000000604482015260640161035f565b6000610c60610c4185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e4992505050565b610c4b8888610e54565b610c558989610e28565b63ffffffff16610e8a565b9050610c93610c6f8585610f28565b610c798888610f38565b83610c848a8a610df2565b610c8e8b8b610f61565b610f72565b9695505050505050565b366000610cab858585611062565b91509150935093915050565b6000806000610cc685856110a8565b91509150610cd3816110ea565b509392505050565b600054610100900460ff16610d72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161035f565b61051633610ac1565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008261044483610e0482600461193e565b61ffff1692610e1593929190611960565b610e1e9161198a565b60e01c9392505050565b600082602083610e398260046119d2565b60ff1692610e1593929190611960565b805160209091012090565b610e5c611416565b82604483610e6c6104008361193e565b61ffff1692610e7d93929190611960565b81019061029491906119eb565b8260005b6020811015610cd357600183821c166000858360208110610eb157610eb161183e565b6020020151905081600103610ef1576040805160208101839052908101859052606001604051602081830303815290604052805190602001209350610f1e565b60408051602081018690529081018290526060016040516020818303038152906040528051906020012093505b5050600101610e8e565b6000610e15600960058486611960565b6000828183610f488260206119d2565b60ff1692610f5893929190611960565b61029491611a6a565b600082602483610f488260206119d2565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088811b8216602080850191909152602484018990527f48595045524c414e45000000000000000000000000000000000000000000000060448501528451808503602d018152604d85018652805190820120606d8501819052608d85018990529187901b90921660ad84015260b18084018690528451808503909101815260d190930190935281519101207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c81209091905b979650505050505050565b36600080611071604185611aa6565b61107d90610448611abd565b9050600061108c604183611abd565b905061109a8183888a611960565b935093505050935093915050565b60008082516041036110de5760208301516040840151606085015160001a6110d28782858561129d565b945094505050506104c6565b506000905060026104c6565b60008160048111156110fe576110fe61180f565b036111065750565b600181600481111561111a5761111a61180f565b03611181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161035f565b60028160048111156111955761119561180f565b036111fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161035f565b60038160048111156112105761121061180f565b036105ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161035f565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112d45750600090506003611383565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611328573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661137c57600060019250925050611383565b9150600090505b94509492505050565b828054828255906000526020600020908101928215611406579160200282015b8281111561140657825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906113ac565b50611412929150611435565b5090565b6040518061040001604052806020906020820280368337509192915050565b5b808211156114125760008155600101611436565b60008083601f84011261145c57600080fd5b50813567ffffffffffffffff81111561147457600080fd5b6020830191508360208285010111156104c657600080fd5b6000806020838503121561149f57600080fd5b823567ffffffffffffffff8111156114b657600080fd5b6114c28582860161144a565b90969095509350505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146114f257600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261153757600080fd5b8135602067ffffffffffffffff80831115611554576115546114f7565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715611597576115976114f7565b60405293845260208187018101949081019250878511156115b757600080fd5b6020870191505b84821015611057576115cf826114ce565b835291830191908301906115be565b803560ff811681146114f257600080fd5b60008060006060848603121561160457600080fd5b61160d846114ce565b9250602084013567ffffffffffffffff81111561162957600080fd5b61163586828701611526565b925050611644604085016115de565b90509250925092565b604080825283519082018190526000906020906060840190828701845b8281101561169c57815173ffffffffffffffffffffffffffffffffffffffff168452928401929084019060010161166a565b505050809250505060ff831660208301529392505050565b6000602082840312156116c657600080fd5b5035919050565b60006020808352835180602085015260005b818110156116fb578581018301518582016040015282016116df565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000806040838503121561174d57600080fd5b823567ffffffffffffffff81111561176457600080fd5b61177085828601611526565b92505061177f602084016115de565b90509250929050565b60006020828403121561179a57600080fd5b610294826114ce565b600080600080604085870312156117b957600080fd5b843567ffffffffffffffff808211156117d157600080fd5b6117dd8883890161144a565b909650945060208701359150808211156117f657600080fd5b506118038782880161144a565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118cd576118cd61186d565b5060010190565b818103818111156102975761029761186d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611925576119256118e7565b500690565b600082611939576119396118e7565b500490565b61ffff8181168382160190808211156119595761195961186d565b5092915050565b6000808585111561197057600080fd5b8386111561197d57600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156119ca5780818660040360031b1b83161692505b505092915050565b60ff81811683821601908111156102975761029761186d565b60006104008083850312156119ff57600080fd5b83601f840112611a0e57600080fd5b60405181810181811067ffffffffffffffff82111715611a3057611a306114f7565b604052908301908085831115611a4557600080fd5b845b83811015611a5f578035825260209182019101611a47565b509095945050505050565b80356020831015610297577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b80820281158282048414176102975761029761186d565b808201808211156102975761029761186d56fea26469706673582212208783625e41c85617814e781c45c7afd3d084885762b11e98edf57f3bfe3fa79564736f6c63430008160033';

type StorageMerkleRootMultisigIsmConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageMerkleRootMultisigIsmConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StorageMerkleRootMultisigIsm__factory extends ContractFactory {
  constructor(...args: StorageMerkleRootMultisigIsmConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _validators: string[],
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<StorageMerkleRootMultisigIsm> {
    return super.deploy(
      _validators,
      _threshold,
      overrides || {},
    ) as Promise<StorageMerkleRootMultisigIsm>;
  }
  override getDeployTransaction(
    _validators: string[],
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_validators, _threshold, overrides || {});
  }
  override attach(address: string): StorageMerkleRootMultisigIsm {
    return super.attach(address) as StorageMerkleRootMultisigIsm;
  }
  override connect(signer: Signer): StorageMerkleRootMultisigIsm__factory {
    return super.connect(signer) as StorageMerkleRootMultisigIsm__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageMerkleRootMultisigIsmInterface {
    return new utils.Interface(_abi) as StorageMerkleRootMultisigIsmInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): StorageMerkleRootMultisigIsm {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as StorageMerkleRootMultisigIsm;
  }
}
