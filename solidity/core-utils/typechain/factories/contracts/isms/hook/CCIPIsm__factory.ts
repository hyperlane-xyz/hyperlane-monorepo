/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import {
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
  Signer,
  utils,
} from 'ethers';

import type {
  CCIPIsm,
  CCIPIsmInterface,
} from '../../../../contracts/isms/hook/CCIPIsm.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_ccipRouter',
        type: 'address',
      },
      {
        internalType: 'uint64',
        name: '_ccipOrigin',
        type: 'uint64',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'router',
        type: 'address',
      },
    ],
    name: 'InvalidRouter',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint8',
        name: 'version',
        type: 'uint8',
      },
    ],
    name: 'Initialized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'messageId',
        type: 'bytes32',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'msgValue',
        type: 'uint256',
      },
    ],
    name: 'ReceivedMessage',
    type: 'event',
  },
  {
    inputs: [],
    name: 'PACKAGE_VERSION',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'VERIFIED_MASK_INDEX',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'authorizedHook',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'ccipOrigin',
    outputs: [
      {
        internalType: 'uint64',
        name: '',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'bytes32',
            name: 'messageId',
            type: 'bytes32',
          },
          {
            internalType: 'uint64',
            name: 'sourceChainSelector',
            type: 'uint64',
          },
          {
            internalType: 'bytes',
            name: 'sender',
            type: 'bytes',
          },
          {
            internalType: 'bytes',
            name: 'data',
            type: 'bytes',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'token',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
              },
            ],
            internalType: 'struct Client.EVMTokenAmount[]',
            name: 'destTokenAmounts',
            type: 'tuple[]',
          },
        ],
        internalType: 'struct Client.Any2EVMMessage',
        name: 'message',
        type: 'tuple',
      },
    ],
    name: 'ccipReceive',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getRouter',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'isVerified',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'moduleType',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'messageId',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'msgValue',
        type: 'uint256',
      },
    ],
    name: 'preVerifyMessage',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '_hook',
        type: 'bytes32',
      },
    ],
    name: 'setAuthorizedHook',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    name: 'verifiedMessages',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
      {
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'verify',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60c060405234801561001057600080fd5b506040516115ff3803806115ff83398101604081905261002f9161007c565b816001600160a01b03811661005e576040516335fdcccd60e21b81526000600482015260240160405180910390fd5b6001600160a01b03166080526001600160401b031660a052506100ce565b6000806040838503121561008f57600080fd5b82516001600160a01b03811681146100a657600080fd5b60208401519092506001600160401b03811681146100c357600080fd5b809150509250929050565b60805160a0516114f76101086000396000818161022d015261097b01526000818161028f015281816105f501526106d001526114f76000f3fe6080604052600436106100d25760003560e01c806393c448471161007f578063c0762af511610059578063c0762af5146102b9578063c9941806146102cf578063f313ac8c146102ef578063f7e83aee1461030257600080fd5b806393c44847146101c5578063af47a7f91461021b578063b0f479a11461026857600080fd5b80634c89ca95116100b05780634c89ca951461015c5780636465e69f1461017e57806385572ffb146101a557600080fd5b806301ffc9a7146100d7578063273dca2f1461010c5780633cf7f1d41461012f575b600080fd5b3480156100e357600080fd5b506100f76100f2366004610dcf565b610322565b60405190151581526020015b60405180910390f35b34801561011857600080fd5b5061012160ff81565b604051908152602001610103565b34801561013b57600080fd5b5061012161014a366004610e11565b60016020526000908152604090205481565b34801561016857600080fd5b5061017c610177366004610e11565b6103bb565b005b34801561018a57600080fd5b50610193600681565b60405160ff9091168152602001610103565b3480156101b157600080fd5b5061017c6101c0366004610e2a565b6105dd565b3480156101d157600080fd5b5061020e6040518060400160405280600581526020017f372e312e3400000000000000000000000000000000000000000000000000000081525081565b6040516101039190610e65565b34801561022757600080fd5b5061024f7f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff9091168152602001610103565b34801561027457600080fd5b5060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610103565b3480156102c557600080fd5b5061012160025481565b3480156102db57600080fd5b506100f76102ea366004610f1b565b610662565b61017c6102fd366004610f5d565b6106ce565b34801561030e57600080fd5b506100f761031d366004610f7f565b610942565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f85572ffb0000000000000000000000000000000000000000000000000000000014806103b557507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b600054610100900460ff16158080156103db5750600054600160ff909116105b806103f55750303b1580156103f5575060005460ff166001145b610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156104e457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b81610571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f41627374726163744d6573736167654964417574686f72697a656449736d3a2060448201527f696e76616c696420617574686f72697a656420686f6f6b000000000000000000606482015260840161047d565b600282905580156105d957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461064e576040517fd7f7333400000000000000000000000000000000000000000000000000000000815233600482015260240161047d565b61065f61065a82611227565b61096a565b50565b6000806106a484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610abe92505050565b6000818152600160205260409020549091506106c69060ff1c60019081161490565b949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610793576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f41627374726163744d6573736167654964417574686f72697a656449736d3a2060448201527f73656e646572206973206e6f742074686520686f6f6b00000000000000000000606482015260840161047d565b61079f60ff6002611423565b341080156107ac57508034145b610838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f41627374726163744d6573736167654964417574686f72697a656449736d3a2060448201527f696e76616c6964206d73672e76616c7565000000000000000000000000000000606482015260840161047d565b600082815260016020526040902054156108d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f41627374726163744d6573736167654964417574686f72697a656449736d3a2060448201527f6d65737361676520616c72656164792076657269666965640000000000000000606482015260840161047d565b7f80000000000000000000000000000000000000000000000000000000000000003417600083815260016020908152604091829020929092555182815283917f67bb630afc52bb7882961d318eb6e0b3e79683d05153a7f4381c27604e996f93910160405180910390a25050565b60008061094f8484610662565b90508015610961576109618484610ac9565b95945050505050565b806020015167ffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff1614610a0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f556e617574686f72697a6564206f726967696e00000000000000000000000000604482015260640161047d565b60008160400151806020019051810190610a25919061142f565b90506002548114610a92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e617574686f72697a656420686f6f6b000000000000000000000000000000604482015260640161047d565b60008260600151806020019051810190610aac919061142f565b9050610ab98160006106ce565b505050565b805160209091012090565b6000610b0a83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610abe92505050565b6000818152600160205260409020549091507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff168015610b925760008281526001602052604081208054839290610b62908490611448565b90915550610b92905081610b768686610b98565b73ffffffffffffffffffffffffffffffffffffffff1690610bb3565b50505050565b6000610bac610ba78484610d0d565b610d26565b9392505050565b80471015610c1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161047d565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610c77576040519150601f19603f3d011682016040523d82523d6000602084013e610c7c565b606091505b5050905080610ab9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161047d565b6000610d1d604d602d848661145b565b610bac91611485565b600073ffffffffffffffffffffffffffffffffffffffff821115610dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f76657260448201527f666c6f7700000000000000000000000000000000000000000000000000000000606482015260840161047d565b5090565b600060208284031215610de157600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610bac57600080fd5b600060208284031215610e2357600080fd5b5035919050565b600060208284031215610e3c57600080fd5b813567ffffffffffffffff811115610e5357600080fd5b820160a08185031215610bac57600080fd5b60006020808352835180602085015260005b81811015610e9357858101830151858201604001528201610e77565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60008083601f840112610ee457600080fd5b50813567ffffffffffffffff811115610efc57600080fd5b602083019150836020828501011115610f1457600080fd5b9250929050565b60008060208385031215610f2e57600080fd5b823567ffffffffffffffff811115610f4557600080fd5b610f5185828601610ed2565b90969095509350505050565b60008060408385031215610f7057600080fd5b50508035926020909101359150565b60008060008060408587031215610f9557600080fd5b843567ffffffffffffffff80821115610fad57600080fd5b610fb988838901610ed2565b90965094506020870135915080821115610fd257600080fd5b50610fdf87828801610ed2565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561103d5761103d610feb565b60405290565b60405160a0810167ffffffffffffffff8111828210171561103d5761103d610feb565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156110ad576110ad610feb565b604052919050565b803567ffffffffffffffff811681146110cd57600080fd5b919050565b600082601f8301126110e357600080fd5b813567ffffffffffffffff8111156110fd576110fd610feb565b61112e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611066565b81815284602083860101111561114357600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261117157600080fd5b8135602067ffffffffffffffff82111561118d5761118d610feb565b61119b818360051b01611066565b82815260069290921b840181019181810190868411156111ba57600080fd5b8286015b8481101561121c57604081890312156111d75760008081fd5b6111df61101a565b813573ffffffffffffffffffffffffffffffffffffffff811681146112045760008081fd5b815281850135858201528352918301916040016111be565b509695505050505050565b600060a0823603121561123957600080fd5b611241611043565b82358152611251602084016110b5565b6020820152604083013567ffffffffffffffff8082111561127157600080fd5b61127d368387016110d2565b6040840152606085013591508082111561129657600080fd5b6112a2368387016110d2565b606084015260808501359150808211156112bb57600080fd5b506112c836828601611160565b60808301525092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561135c57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611342576113426112d4565b8085161561134f57918102915b93841c9390800290611308565b509250929050565b600082611373575060016103b5565b81611380575060006103b5565b816001811461139657600281146113a0576113bc565b60019150506103b5565b60ff8411156113b1576113b16112d4565b50506001821b6103b5565b5060208310610133831016604e8410600b84101617156113df575081810a6103b5565b6113e98383611303565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561141b5761141b6112d4565b029392505050565b6000610bac8383611364565b60006020828403121561144157600080fd5b5051919050565b818103818111156103b5576103b56112d4565b6000808585111561146b57600080fd5b8386111561147857600080fd5b5050820193919092039150565b803560208310156103b5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b169291505056fea264697066735822122072e7bb8aadd213e7f5e3ec1b36708ca4c4f038448224e89bbb6512f3eda0afa564736f6c63430008160033';

type CCIPIsmConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CCIPIsmConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CCIPIsm__factory extends ContractFactory {
  constructor(...args: CCIPIsmConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ccipRouter: string,
    _ccipOrigin: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<CCIPIsm> {
    return super.deploy(
      _ccipRouter,
      _ccipOrigin,
      overrides || {},
    ) as Promise<CCIPIsm>;
  }
  override getDeployTransaction(
    _ccipRouter: string,
    _ccipOrigin: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _ccipRouter,
      _ccipOrigin,
      overrides || {},
    );
  }
  override attach(address: string): CCIPIsm {
    return super.attach(address) as CCIPIsm;
  }
  override connect(signer: Signer): CCIPIsm__factory {
    return super.connect(signer) as CCIPIsm__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CCIPIsmInterface {
    return new utils.Interface(_abi) as CCIPIsmInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): CCIPIsm {
    return new Contract(address, _abi, signerOrProvider) as CCIPIsm;
  }
}
