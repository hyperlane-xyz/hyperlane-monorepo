/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';

import type {
  InterchainAccountIsm,
  InterchainAccountIsmInterface,
} from '../../../../contracts/isms/routing/InterchainAccountIsm.js';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_mailbox',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'PACKAGE_VERSION',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'moduleType',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'route',
    outputs: [
      {
        internalType: 'contract IInterchainSecurityModule',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: '_metadata',
        type: 'bytes',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'verify',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60a060405234801561001057600080fd5b5060405161062538038061062583398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161059a61008b6000396000610148015261059a6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806315ce45a2146100515780636465e69f1461008e57806393c44847146100a8578063f7e83aee146100f1575b600080fd5b61006461005f3660046102fd565b610114565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610096600181565b60405160ff9091168152602001610085565b6100e46040518060400160405280600581526020017f372e312e3400000000000000000000000000000000000000000000000000000081525081565b604051610085919061033f565b6101046100ff3660046103ac565b6101e6565b6040519015158152602001610085565b600080610129610124858561027c565b610298565b905073ffffffffffffffffffffffffffffffffffffffff81166101dd577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e5f516e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d59190610418565b9150506101e0565b90505b92915050565b60006101f28383610114565b73ffffffffffffffffffffffffffffffffffffffff1663f7e83aee868686866040518563ffffffff1660e01b8152600401610230949392919061049e565b6020604051808303816000875af115801561024f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027391906104d0565b95945050505050565b36600061028c83604d81876104f2565b915091505b9250929050565b60006102a86040602c84866104f2565b6102b19161051c565b60601c9392505050565b60008083601f8401126102cd57600080fd5b50813567ffffffffffffffff8111156102e557600080fd5b60208301915083602082850101111561029157600080fd5b6000806020838503121561031057600080fd5b823567ffffffffffffffff81111561032757600080fd5b610333858286016102bb565b90969095509350505050565b60006020808352835180602085015260005b8181101561036d57858101830151858201604001528201610351565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600080600080604085870312156103c257600080fd5b843567ffffffffffffffff808211156103da57600080fd5b6103e6888389016102bb565b909650945060208701359150808211156103ff57600080fd5b5061040c878288016102bb565b95989497509550505050565b60006020828403121561042a57600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461044e57600080fd5b9392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6040815260006104b2604083018688610455565b82810360208401526104c5818587610455565b979650505050505050565b6000602082840312156104e257600080fd5b8151801515811461044e57600080fd5b6000808585111561050257600080fd5b8386111561050f57600080fd5b5050820193919092039150565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000813581811691601485101561055c5780818660140360031b1b83161692505b50509291505056fea264697066735822122067616c8264010329a168f2dc6c4d79db96291a1c7a443c343f9af85551b0380864736f6c63430008160033';

type InterchainAccountIsmConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InterchainAccountIsmConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InterchainAccountIsm__factory extends ContractFactory {
  constructor(...args: InterchainAccountIsmConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _mailbox: string,
    overrides?: Overrides & { from?: string },
  ): Promise<InterchainAccountIsm> {
    return super.deploy(
      _mailbox,
      overrides || {},
    ) as Promise<InterchainAccountIsm>;
  }
  override getDeployTransaction(
    _mailbox: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(_mailbox, overrides || {});
  }
  override attach(address: string): InterchainAccountIsm {
    return super.attach(address) as InterchainAccountIsm;
  }
  override connect(signer: Signer): InterchainAccountIsm__factory {
    return super.connect(signer) as InterchainAccountIsm__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InterchainAccountIsmInterface {
    return new utils.Interface(_abi) as InterchainAccountIsmInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): InterchainAccountIsm {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as InterchainAccountIsm;
  }
}
