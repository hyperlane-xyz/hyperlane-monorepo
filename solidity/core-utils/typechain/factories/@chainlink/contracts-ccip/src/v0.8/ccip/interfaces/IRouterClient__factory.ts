/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

import type {
  IRouterClient,
  IRouterClientInterface,
} from '../../../../../../../@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.js';

const _abi = [
  {
    inputs: [],
    name: 'InsufficientFeeTokenAmount',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidMsgValue',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'destChainSelector',
        type: 'uint64',
      },
    ],
    name: 'UnsupportedDestinationChain',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'destinationChainSelector',
        type: 'uint64',
      },
      {
        components: [
          {
            internalType: 'bytes',
            name: 'receiver',
            type: 'bytes',
          },
          {
            internalType: 'bytes',
            name: 'data',
            type: 'bytes',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'token',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
              },
            ],
            internalType: 'struct Client.EVMTokenAmount[]',
            name: 'tokenAmounts',
            type: 'tuple[]',
          },
          {
            internalType: 'address',
            name: 'feeToken',
            type: 'address',
          },
          {
            internalType: 'bytes',
            name: 'extraArgs',
            type: 'bytes',
          },
        ],
        internalType: 'struct Client.EVM2AnyMessage',
        name: 'message',
        type: 'tuple',
      },
    ],
    name: 'ccipSend',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'destinationChainSelector',
        type: 'uint64',
      },
      {
        components: [
          {
            internalType: 'bytes',
            name: 'receiver',
            type: 'bytes',
          },
          {
            internalType: 'bytes',
            name: 'data',
            type: 'bytes',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'token',
                type: 'address',
              },
              {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
              },
            ],
            internalType: 'struct Client.EVMTokenAmount[]',
            name: 'tokenAmounts',
            type: 'tuple[]',
          },
          {
            internalType: 'address',
            name: 'feeToken',
            type: 'address',
          },
          {
            internalType: 'bytes',
            name: 'extraArgs',
            type: 'bytes',
          },
        ],
        internalType: 'struct Client.EVM2AnyMessage',
        name: 'message',
        type: 'tuple',
      },
    ],
    name: 'getFee',
    outputs: [
      {
        internalType: 'uint256',
        name: 'fee',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'destChainSelector',
        type: 'uint64',
      },
    ],
    name: 'isChainSupported',
    outputs: [
      {
        internalType: 'bool',
        name: 'supported',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

export class IRouterClient__factory {
  static readonly abi = _abi;
  static createInterface(): IRouterClientInterface {
    return new utils.Interface(_abi) as IRouterClientInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): IRouterClient {
    return new Contract(address, _abi, signerOrProvider) as IRouterClient;
  }
}
