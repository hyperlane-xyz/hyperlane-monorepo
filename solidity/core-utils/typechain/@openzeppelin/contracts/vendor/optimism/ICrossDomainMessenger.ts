/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../../common.js';

export interface ICrossDomainMessengerInterface extends utils.Interface {
  functions: {
    'sendMessage(address,bytes,uint32)': FunctionFragment;
    'xDomainMessageSender()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'sendMessage'
      | 'sendMessage(address,bytes,uint32)'
      | 'xDomainMessageSender'
      | 'xDomainMessageSender()',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'sendMessage',
    values: [string, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendMessage(address,bytes,uint32)',
    values: [string, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'xDomainMessageSender',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'xDomainMessageSender()',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'sendMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sendMessage(address,bytes,uint32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'xDomainMessageSender',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'xDomainMessageSender()',
    data: BytesLike,
  ): Result;

  events: {
    'FailedRelayedMessage(bytes32)': EventFragment;
    'RelayedMessage(bytes32)': EventFragment;
    'SentMessage(address,address,bytes,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FailedRelayedMessage'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'FailedRelayedMessage(bytes32)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RelayedMessage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RelayedMessage(bytes32)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SentMessage'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'SentMessage(address,address,bytes,uint256,uint256)',
  ): EventFragment;
}

export interface FailedRelayedMessageEventObject {
  msgHash: string;
}
export type FailedRelayedMessageEvent = TypedEvent<
  [string],
  FailedRelayedMessageEventObject
>;

export type FailedRelayedMessageEventFilter =
  TypedEventFilter<FailedRelayedMessageEvent>;

export interface RelayedMessageEventObject {
  msgHash: string;
}
export type RelayedMessageEvent = TypedEvent<
  [string],
  RelayedMessageEventObject
>;

export type RelayedMessageEventFilter = TypedEventFilter<RelayedMessageEvent>;

export interface SentMessageEventObject {
  target: string;
  sender: string;
  message: string;
  messageNonce: BigNumber;
  gasLimit: BigNumber;
}
export type SentMessageEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  SentMessageEventObject
>;

export type SentMessageEventFilter = TypedEventFilter<SentMessageEvent>;

export interface ICrossDomainMessenger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICrossDomainMessengerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'sendMessage(address,bytes,uint32)'(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<[string]>;

    'xDomainMessageSender()'(overrides?: CallOverrides): Promise<[string]>;
  };

  sendMessage(
    _target: string,
    _message: BytesLike,
    _gasLimit: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'sendMessage(address,bytes,uint32)'(
    _target: string,
    _message: BytesLike,
    _gasLimit: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  xDomainMessageSender(overrides?: CallOverrides): Promise<string>;

  'xDomainMessageSender()'(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'sendMessage(address,bytes,uint32)'(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<string>;

    'xDomainMessageSender()'(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'FailedRelayedMessage(bytes32)'(
      msgHash?: BytesLike | null,
    ): FailedRelayedMessageEventFilter;
    FailedRelayedMessage(
      msgHash?: BytesLike | null,
    ): FailedRelayedMessageEventFilter;

    'RelayedMessage(bytes32)'(
      msgHash?: BytesLike | null,
    ): RelayedMessageEventFilter;
    RelayedMessage(msgHash?: BytesLike | null): RelayedMessageEventFilter;

    'SentMessage(address,address,bytes,uint256,uint256)'(
      target?: string | null,
      sender?: null,
      message?: null,
      messageNonce?: null,
      gasLimit?: null,
    ): SentMessageEventFilter;
    SentMessage(
      target?: string | null,
      sender?: null,
      message?: null,
      messageNonce?: null,
      gasLimit?: null,
    ): SentMessageEventFilter;
  };

  estimateGas: {
    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'sendMessage(address,bytes,uint32)'(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<BigNumber>;

    'xDomainMessageSender()'(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    sendMessage(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'sendMessage(address,bytes,uint32)'(
      _target: string,
      _message: BytesLike,
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    xDomainMessageSender(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'xDomainMessageSender()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
