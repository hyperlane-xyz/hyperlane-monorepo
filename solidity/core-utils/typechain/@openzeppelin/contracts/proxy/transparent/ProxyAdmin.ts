/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../../common.js';

export interface ProxyAdminInterface extends utils.Interface {
  functions: {
    'changeProxyAdmin(address,address)': FunctionFragment;
    'getProxyAdmin(address)': FunctionFragment;
    'getProxyImplementation(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'upgrade(address,address)': FunctionFragment;
    'upgradeAndCall(address,address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'changeProxyAdmin'
      | 'changeProxyAdmin(address,address)'
      | 'getProxyAdmin'
      | 'getProxyAdmin(address)'
      | 'getProxyImplementation'
      | 'getProxyImplementation(address)'
      | 'owner'
      | 'owner()'
      | 'renounceOwnership'
      | 'renounceOwnership()'
      | 'transferOwnership'
      | 'transferOwnership(address)'
      | 'upgrade'
      | 'upgrade(address,address)'
      | 'upgradeAndCall'
      | 'upgradeAndCall(address,address,bytes)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'changeProxyAdmin',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'changeProxyAdmin(address,address)',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProxyAdmin',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProxyAdmin(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProxyImplementation',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProxyImplementation(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'upgrade',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'upgrade(address,address)',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'upgradeAndCall',
    values: [string, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'upgradeAndCall(address,address,bytes)',
    values: [string, string, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'changeProxyAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'changeProxyAdmin(address,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProxyAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProxyAdmin(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProxyImplementation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProxyImplementation(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'upgrade', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'upgrade(address,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'upgradeAndCall',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'upgradeAndCall(address,address,bytes)',
    data: BytesLike,
  ): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OwnershipTransferred(address,address)',
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProxyAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProxyAdminInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeProxyAdmin(
      proxy: string,
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'changeProxyAdmin(address,address)'(
      proxy: string,
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getProxyAdmin(proxy: string, overrides?: CallOverrides): Promise<[string]>;

    'getProxyAdmin(address)'(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getProxyImplementation(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'getProxyImplementation(address)'(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    upgrade(
      proxy: string,
      implementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'upgrade(address,address)'(
      proxy: string,
      implementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    upgradeAndCall(
      proxy: string,
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'upgradeAndCall(address,address,bytes)'(
      proxy: string,
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  changeProxyAdmin(
    proxy: string,
    newAdmin: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'changeProxyAdmin(address,address)'(
    proxy: string,
    newAdmin: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getProxyAdmin(proxy: string, overrides?: CallOverrides): Promise<string>;

  'getProxyAdmin(address)'(
    proxy: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  getProxyImplementation(
    proxy: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  'getProxyImplementation(address)'(
    proxy: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'renounceOwnership()'(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  upgrade(
    proxy: string,
    implementation: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'upgrade(address,address)'(
    proxy: string,
    implementation: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  upgradeAndCall(
    proxy: string,
    implementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'upgradeAndCall(address,address,bytes)'(
    proxy: string,
    implementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    changeProxyAdmin(
      proxy: string,
      newAdmin: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'changeProxyAdmin(address,address)'(
      proxy: string,
      newAdmin: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    getProxyAdmin(proxy: string, overrides?: CallOverrides): Promise<string>;

    'getProxyAdmin(address)'(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    getProxyImplementation(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    'getProxyImplementation(address)'(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgrade(
      proxy: string,
      implementation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'upgrade(address,address)'(
      proxy: string,
      implementation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeAndCall(
      proxy: string,
      implementation: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'upgradeAndCall(address,address,bytes)'(
      proxy: string,
      implementation: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    changeProxyAdmin(
      proxy: string,
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'changeProxyAdmin(address,address)'(
      proxy: string,
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getProxyAdmin(proxy: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getProxyAdmin(address)'(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getProxyImplementation(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getProxyImplementation(address)'(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    upgrade(
      proxy: string,
      implementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'upgrade(address,address)'(
      proxy: string,
      implementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    upgradeAndCall(
      proxy: string,
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'upgradeAndCall(address,address,bytes)'(
      proxy: string,
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeProxyAdmin(
      proxy: string,
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'changeProxyAdmin(address,address)'(
      proxy: string,
      newAdmin: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getProxyAdmin(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getProxyAdmin(address)'(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProxyImplementation(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getProxyImplementation(address)'(
      proxy: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'renounceOwnership()'(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    upgrade(
      proxy: string,
      implementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'upgrade(address,address)'(
      proxy: string,
      implementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    upgradeAndCall(
      proxy: string,
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'upgradeAndCall(address,address,bytes)'(
      proxy: string,
      implementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
