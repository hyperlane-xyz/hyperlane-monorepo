/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../../../common.js';

export interface IMessagingComposerInterface extends utils.Interface {
  functions: {
    'composeQueue(address,address,bytes32,uint16)': FunctionFragment;
    'lzCompose(address,address,bytes32,uint16,bytes,bytes)': FunctionFragment;
    'sendCompose(address,bytes32,uint16,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'composeQueue'
      | 'composeQueue(address,address,bytes32,uint16)'
      | 'lzCompose'
      | 'lzCompose(address,address,bytes32,uint16,bytes,bytes)'
      | 'sendCompose'
      | 'sendCompose(address,bytes32,uint16,bytes)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'composeQueue',
    values: [string, string, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'composeQueue(address,address,bytes32,uint16)',
    values: [string, string, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'lzCompose',
    values: [string, string, BytesLike, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'lzCompose(address,address,bytes32,uint16,bytes,bytes)',
    values: [string, string, BytesLike, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendCompose',
    values: [string, BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendCompose(address,bytes32,uint16,bytes)',
    values: [string, BytesLike, BigNumberish, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'composeQueue',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'composeQueue(address,address,bytes32,uint16)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'lzCompose', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lzCompose(address,address,bytes32,uint16,bytes,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sendCompose',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'sendCompose(address,bytes32,uint16,bytes)',
    data: BytesLike,
  ): Result;

  events: {
    'ComposeDelivered(address,address,bytes32,uint16)': EventFragment;
    'ComposeSent(address,address,bytes32,uint16,bytes)': EventFragment;
    'LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ComposeDelivered'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ComposeDelivered(address,address,bytes32,uint16)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ComposeSent'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ComposeSent(address,address,bytes32,uint16,bytes)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LzComposeAlert'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)',
  ): EventFragment;
}

export interface ComposeDeliveredEventObject {
  from: string;
  to: string;
  guid: string;
  index: number;
}
export type ComposeDeliveredEvent = TypedEvent<
  [string, string, string, number],
  ComposeDeliveredEventObject
>;

export type ComposeDeliveredEventFilter =
  TypedEventFilter<ComposeDeliveredEvent>;

export interface ComposeSentEventObject {
  from: string;
  to: string;
  guid: string;
  index: number;
  message: string;
}
export type ComposeSentEvent = TypedEvent<
  [string, string, string, number, string],
  ComposeSentEventObject
>;

export type ComposeSentEventFilter = TypedEventFilter<ComposeSentEvent>;

export interface LzComposeAlertEventObject {
  from: string;
  to: string;
  executor: string;
  guid: string;
  index: number;
  gas: BigNumber;
  value: BigNumber;
  message: string;
  extraData: string;
  reason: string;
}
export type LzComposeAlertEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
  ],
  LzComposeAlertEventObject
>;

export type LzComposeAlertEventFilter = TypedEventFilter<LzComposeAlertEvent>;

export interface IMessagingComposer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMessagingComposerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    composeQueue(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { messageHash: string }>;

    'composeQueue(address,address,bytes32,uint16)'(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { messageHash: string }>;

    lzCompose(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    'lzCompose(address,address,bytes32,uint16,bytes,bytes)'(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    sendCompose(
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    'sendCompose(address,bytes32,uint16,bytes)'(
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  composeQueue(
    _from: string,
    _to: string,
    _guid: BytesLike,
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'composeQueue(address,address,bytes32,uint16)'(
    _from: string,
    _to: string,
    _guid: BytesLike,
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  lzCompose(
    _from: string,
    _to: string,
    _guid: BytesLike,
    _index: BigNumberish,
    _message: BytesLike,
    _extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  'lzCompose(address,address,bytes32,uint16,bytes,bytes)'(
    _from: string,
    _to: string,
    _guid: BytesLike,
    _index: BigNumberish,
    _message: BytesLike,
    _extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  sendCompose(
    _to: string,
    _guid: BytesLike,
    _index: BigNumberish,
    _message: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  'sendCompose(address,bytes32,uint16,bytes)'(
    _to: string,
    _guid: BytesLike,
    _index: BigNumberish,
    _message: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    composeQueue(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'composeQueue(address,address,bytes32,uint16)'(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    lzCompose(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      _extraData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'lzCompose(address,address,bytes32,uint16,bytes,bytes)'(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      _extraData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    sendCompose(
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'sendCompose(address,bytes32,uint16,bytes)'(
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ComposeDelivered(address,address,bytes32,uint16)'(
      from?: null,
      to?: null,
      guid?: null,
      index?: null,
    ): ComposeDeliveredEventFilter;
    ComposeDelivered(
      from?: null,
      to?: null,
      guid?: null,
      index?: null,
    ): ComposeDeliveredEventFilter;

    'ComposeSent(address,address,bytes32,uint16,bytes)'(
      from?: null,
      to?: null,
      guid?: null,
      index?: null,
      message?: null,
    ): ComposeSentEventFilter;
    ComposeSent(
      from?: null,
      to?: null,
      guid?: null,
      index?: null,
      message?: null,
    ): ComposeSentEventFilter;

    'LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)'(
      from?: string | null,
      to?: string | null,
      executor?: string | null,
      guid?: null,
      index?: null,
      gas?: null,
      value?: null,
      message?: null,
      extraData?: null,
      reason?: null,
    ): LzComposeAlertEventFilter;
    LzComposeAlert(
      from?: string | null,
      to?: string | null,
      executor?: string | null,
      guid?: null,
      index?: null,
      gas?: null,
      value?: null,
      message?: null,
      extraData?: null,
      reason?: null,
    ): LzComposeAlertEventFilter;
  };

  estimateGas: {
    composeQueue(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'composeQueue(address,address,bytes32,uint16)'(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lzCompose(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    'lzCompose(address,address,bytes32,uint16,bytes,bytes)'(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    sendCompose(
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    'sendCompose(address,bytes32,uint16,bytes)'(
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    composeQueue(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'composeQueue(address,address,bytes32,uint16)'(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lzCompose(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'lzCompose(address,address,bytes32,uint16,bytes,bytes)'(
      _from: string,
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    sendCompose(
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    'sendCompose(address,bytes32,uint16,bytes)'(
      _to: string,
      _guid: BytesLike,
      _index: BigNumberish,
      _message: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
