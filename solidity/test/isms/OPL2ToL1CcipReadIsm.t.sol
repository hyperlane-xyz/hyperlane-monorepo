import "forge-std/Test.sol";

import {Message} from "../../contracts/libs/Message.sol";
import {TypeCasts} from "../../contracts/libs/TypeCasts.sol";
import {MockMailbox} from "../../contracts/mock/MockMailbox.sol";
import {TokenMessage} from "../../contracts/token/libs/TokenMessage.sol";
import {MockOptimismPortal} from "../../contracts/mock/MockOptimism.sol";
import {OPL2ToL1CcipReadIsm} from "../../contracts/isms/hook/OPL2ToL1CcipReadIsm.sol";
import {IOptimismPortal} from "../../contracts/interfaces/optimism/IOptimismPortal.sol";
import {MockHyperlaneEnvironment} from "../../contracts/mock/MockHyperlaneEnvironment.sol";
import {LightTestRecipient} from "../../contracts/test/LightTestRecipient.sol";

import {console} from "forge-std/console.sol";

contract OPL2ToL1CcipReadIsmTest is Test {
    using TypeCasts for address;
    using TokenMessage for bytes;

    address payable internal constant L2_BRIDGE_ADDRESS =
        payable(0x4200000000000000000000000000000000000010);

    uint256 internal constant scale = 1;

    uint32 internal constant origin = 1;
    uint32 internal constant destination = 2;

    address tokenBridgeOrigin;
    address tokenBridgeDestination;

    // bytes PROVE_WITHDRAWAL_METADATA =
    //     vm.parseBytes(
    //         "0x00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000283350000000000000000000000000000000000000000000000000000000000000000f9feb26dbc7c95b8834511c338a8a5732f05c4a614ef95ebcb5426012f6da4769b601024be8cee1fbd42d432ba39ee54fe23237a04b59ee169434f5151f64cd64a263ca32fe094699a130a5ebfe6d2a2b91dea4b1b48da93d8f47813bf32b0e6000000000000000000000000000000000000000000000000000000000000038000010000000000000000000000000000000000000000000000000000000133580000000000000000000000004200000000000000000000000000000000000007000000000000000000000000c19a60d9e8c27b9a43527c3283b4dd8edc8be15c0000000000000000000000000000000000000000000000000000000000002b5d00000000000000000000000000000000000000000000000000000000000529f100000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001a4d764ad0b00010000000000000000000000000000000000000000000000000000000133550000000000000000000000004200000000000000000000000000000000000010000000000000000000000000bc5c679879b2965296756cd959c3c739769995e20000000000000000000000000000000000000000000000000000000000002b5d000000000000000000000000000000000000000000000000000000000000c35000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000a41635f5fd000000000000000000000000956ef284dc569fd423fd9a342bc35a63c943b90c000000000000000000000000d9a4b7d7e6da696cb8bed9f26ee4a3998a0d724f0000000000000000000000000000000000000000000000000000000000002b5d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000005400000000000000000000000000000000000000000000000000000000000000780000000000000000000000000000000000000000000000000000000000000094000000000000000000000000000000000000000000000000000000000000009e00000000000000000000000000000000000000000000000000000000000000214f90211a0a4d3711c545a96794a1ea24634b3ad6654e32bae7dfc84462d13e00134be4991a04abde7eaee322a7ec2486e023e3433825aa818481da3dbf2dca7ddf1d904cdc3a092488305c22d72fa4fbe0e8cd89cb5823015cabadd43594defa8f281117521f9a0cb6e62c677a873848438e128f5261b2277a888d0690974c667ab58d010f33fc8a0ee05fbaa4cc74b08891931f284959972d2dedd65aa35dea1cbe3cb8d089cc728a00e95dabab475b1cea852325d16a9823aee1166efb55dba4eb6ac9ee185dba2f0a0b1904e95e9b11f6f196cdbbc263f08aaea115ed4265bbfa402734ee9c63fdf57a0ff7ff4c9c6a8d22681a6df6a5c7c02a5d8b5600d335d34aa425a62755566a0e1a00455663716118729d9ee886f341fa2257a39372f34fb25e15f25fa674a76ea2ca047043af7c7b08a15bc4f644d04cc62ee5bfd1cbfa7073ddb984604e5015bc14ba0c1375d0a2bfe74569519d9ab2147a7ed7db435c5a4eda57b4b3f7142c2f998eca003085f3f1fa8be53bcc186308a8362082f26ef72665286a4cd71154d2ae5ffe7a0628c4b8dec6317a896ca0a512fdebbc10989e8875a952ce37d334157c516fca8a0c81133c39dc10769edf401cfa7d08df08406834c4baebc3b805c7f59e13dcb87a046d9d2aa047268c2f26508cd63e4a9e41655d8040876c750c88e58cc4fb80889a00c75dfb90f6e91e2d309bd55d9760688befa194b82e81d59f38bf16b12bae0d9800000000000000000000000000000000000000000000000000000000000000000000000000000000000000214f90211a0402737623935fee3a2e8c478ee1b81af282cbf952399c032520934e20f24a4b3a04b28cbcd7d33007d64c290d2d5195de7bd430e95ecb64fe167b33d6bbac2a0caa06156a7160e7ea218c22a58e68b5800f53b4a4ac4aad0aadfd609f42edece5008a00eb1ef615a64924df14e10b885fa1cec99574d19e91f829188313a2ef48f5f99a009a22189bbb46d51d08830cb848472f1d660f44ff7b975f6a034cd5a2d44dc31a0901c681f7790def06521814e6ad0b176355f68e2780cf8d78f3ccf4b80482b46a0ffdd9ed88a66bb6d527ccb356e51ceea011aae8b557534dc25313347e37f031fa0bcceb1e93cae3d2c1b5b922e5d8b282e6a27f09ad02496efcb66c8f915889484a0fe0a8b9ad58da0b2a08fb7c10f1de153fdd5917f24d3b9954436a89b8b3cad52a02374a7e6001e6f6c16d104b2e08ef0d8ab600f169c82d0f57736e53fcd8531d0a081f6bb670621da3ec6e5582726af084e614188c88c2d35a7e8ab566a50a221b3a0cfb286e002b23806c54d8b9272bed800efed0a56bd049b168282afb4fbb325c6a0720b5f0448ed255ddbd8e5b3411ed7a7a8be9d4ec59fdef659b163850b57f01fa06752224a92e7be6a93fb7c298e08c021e06aa09749aa49b6c5f3e9a8047d85a5a02a9abfb41acccad17dbdf84508c2d76d743c1caddc38a59f39f4e8f25523fe96a0c37d58203bf0f1cff597f06de6f2414cba2d394effa3aba2032facf406669730800000000000000000000000000000000000000000000000000000000000000000000000000000000000000214f90211a0f5c9f568ad32c6eed8afda757b0c56530b1eadb114668447d925db9e5c7fd690a0e51e5da79a1c34c687646cfdb10cf30f3930220333b29a2bbf48bb825b98d901a098243354a07a74fea079c7967f72cafd628236b67344db417abab4f5492da725a01f8c6d01bc97278b8f220aa62ea617cddb2ea46b45178e7bd0ec7a70af0d3f6fa07eb01d384b6b98c1f7a4212cfa9237f6b137361b62baaee9a917787a5da089e5a0b40d79461ccf3ef514e79e3b48a8879366ac73c83a171200dbee2788b40c4e55a0c7a1a133d182ae44e5cee9c92f91b0218b7070f49eab086ab6f86727cc0201b8a04a8b0c8253da6318d6c8c293ee04634af0bc80194a7e59b986421bcc0e595789a0427b4b8b617ce5f6e2d5289d650c38a372e6a25d04ae24751a13c4df63d98ab6a09b4902677f0e47ef4fc9847f0f34788c4c38053c41bed2a36f36cdb42e58d41aa07521f1237473fed43fc4f94110b9c26ce3fd60bc71e57c09d6d0b3eafb7ca043a064561d74a8aa3424944072525ca7513dc60c8e9ca765ad171841b069068d3e34a0011ad98553b0f2f1023f93e2878ea0d4e814d6f03be0bfd150a33325a9ff0188a0b093769d684c23057b46459fc98ff54cb958deac89192337e187c4d16e17adcaa04e379ef6120cc4bb48a850ed8205e89c18dbd09171580174f0c6b3d9ec3ccd3ea0957f915fdadedf50895b5efd73638287a4c2083dd52ac1bd02a48e8a75a6cd84800000000000000000000000000000000000000000000000000000000000000000000000000000000000000194f90191a027aaf5098788b7a4819f8948a947525f50a8b53931b3dceb6833bb9fb791133380a0dc75016c6ce29112630a5d4f558e8d322a34c88151c2a26368cd4fbe7a7772b58080a0c4ced575aa7585bbbfd323d7409297f52e9ef6ceca2cd316aa2426a3651d5b62a037e42b88f25c12ab090ddbf53444ae757ea9b0abee92fac92554589e24c4b11ca03db4cfce0a0f75247d9a03b3486d16c37f83f7d34dcb6a558e82175581a55fe3a0835fd9c2e8bfc7344b14da6fce5f424d0d7c54b37646fe44cbb103343505df7a80a0042a619043d2ba8ff0d0f79e3ca5d77f7db10f5d480f688300faf3dbc14f6361a07cdc31c9f7a7fc330d7bb2441a6a6eef84ebfa1c27734e92554a42f8373c0de6a05666e5271b204276bb956b3a7e1b8a7a5c549c01701b3efaf2ec8c9e2fb32d17a0e9ab15c6f0a84e13a31e23707f0660111cc32bfc8989c2a82d5502c9e124e0b7a09cb54703adf83051c6220bc51d39bcae71bef6ca667b0b55ae2e9633f35df626a05f4f230cecb5816bacd01738cfbd6dfa47051a280bc28880a975e0d95320799a800000000000000000000000000000000000000000000000000000000000000000000000000000000000000073f871a0f6e5554a1c7d6af2c4e92612042e340d7ce713457a7b14ebcfdd76b8d07cc5ef80808080a0d4202ca953648633c7bf97c3180b017f8f8a59ce75653d5dc79e66f2939ec942808080808080808080a02ee15a729d677547b4b15153166fee23476d564481c5d4ebfe3d564494bac71c80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021e09e37685179db708dd34b798f7aedfff13d2ec8a04ce4c920964cd1ed2725f60100000000000000000000000000000000000000000000000000000000000000"
    //     );
    // bytes FINALIZE_WITHDRAWAL_METADATA =
    //     vm.parseBytes(
    //         "0x000000000000000000000000000000000000000000000000000000000000002000010000000000000000000000000000000000000000000000000000000133580000000000000000000000004200000000000000000000000000000000000007000000000000000000000000c19a60d9e8c27b9a43527c3283b4dd8edc8be15c0000000000000000000000000000000000000000000000000000000000002b5d00000000000000000000000000000000000000000000000000000000000529f100000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001a4d764ad0b00010000000000000000000000000000000000000000000000000000000133550000000000000000000000004200000000000000000000000000000000000010000000000000000000000000bc5c679879b2965296756cd959c3c739769995e20000000000000000000000000000000000000000000000000000000000002b5d000000000000000000000000000000000000000000000000000000000000c35000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000a41635f5fd000000000000000000000000956ef284dc569fd423fd9a342bc35a63c943b90c000000000000000000000000d9a4b7d7e6da696cb8bed9f26ee4a3998a0d724f0000000000000000000000000000000000000000000000000000000000002b5d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    //     );

    OPL2ToL1CcipReadIsm internal ism;

    string[] urls;
    IOptimismPortal portal;
    MockHyperlaneEnvironment internal environment;
    MockMailbox mailboxOrigin;
    MockMailbox mailboxDestination;

    ///////////////////////////////////////////////////////////////////
    ///                            SETUP                            ///
    ///////////////////////////////////////////////////////////////////

    function setUp() public {
        urls = new string[](1);
        urls[0] = "https://ccip-read-gateway.io";
        environment = new MockHyperlaneEnvironment(origin, destination);
        mailboxOrigin = environment.mailboxes(origin);
        mailboxDestination = environment.mailboxes(destination);
        portal = new MockOptimismPortal();

        // We just need two contracts
        tokenBridgeOrigin = address(new LightTestRecipient());
        tokenBridgeDestination = address(new LightTestRecipient());

        ism = new OPL2ToL1CcipReadIsm(
            urls,
            address(portal),
            address(mailboxDestination)
        );

        mailboxDestination.setDefaultIsm(address(ism));
        mailboxDestination.addRemoteMailbox(origin, mailboxOrigin);
    }

    function test_verify_revertsWhen_mailboxTryToCallVerify() public {
        mailboxOrigin.dispatch(
            destination,
            address(ism).addressToBytes32(),
            bytes("")
        );

        uint256 nonce = mailboxDestination.inboundProcessedNonce();
        bytes memory message = mailboxDestination.inboundMessages(nonce);

        vm.expectRevert();
        environment.processNextPendingMessage();
    }

    function _getDummyVerifyMetadata(
        IOptimismPortal.WithdrawalTransaction memory _tx
    ) internal returns (bytes memory) {
        uint256 gameIndex = 0;
        IOptimismPortal.OutputRootProof memory outputRootProof;
        bytes[] memory proof;
        return abi.encode(_tx, gameIndex, outputRootProof, proof);
    }

    function _getDummyWithdrawalTx(
        uint256 nonce,
        uint256 amount,
        bytes memory data
    ) internal returns (IOptimismPortal.WithdrawalTransaction memory) {
        uint256 gasLimit = 200_000;

        return
            IOptimismPortal.WithdrawalTransaction(
                nonce,
                tokenBridgeOrigin,
                tokenBridgeDestination,
                amount,
                gasLimit,
                data
            );
    }

    function test_verify_proveWithdrawalSuccessfully() public {
        uint256 amount = 0.001 ether;

        IOptimismPortal.WithdrawalTransaction
            memory withdrawalTx = _getDummyWithdrawalTx(0, amount, bytes(""));

        mailboxOrigin.dispatch(
            destination,
            address(ism).addressToBytes32(),
            bytes("")
        );

        uint256 nonce = mailboxDestination.inboundProcessedNonce();
        bytes memory message = mailboxDestination.inboundMessages(nonce);
        bytes memory metadata = _getDummyVerifyMetadata(withdrawalTx);

        ism.verify(metadata, message);
    }

    function test_verify_finalizeWithdrawalSuccessfully() public {
        uint256 amount = 0.001 ether;
        IOptimismPortal.WithdrawalTransaction
            memory withdrawalTx = _getDummyWithdrawalTx(0, amount, bytes(""));

        mailboxOrigin.dispatch(
            destination,
            address(tokenBridgeDestination).addressToBytes32(),
            bytes("")
        );

        vm.deal(address(portal), amount);

        uint256 nonce = mailboxDestination.inboundProcessedNonce();
        bytes memory message = mailboxDestination.inboundMessages(nonce);
        bytes memory metadata = _getDummyVerifyMetadata(withdrawalTx);

        ism.verify(metadata, message);
    }

    function test_interchainSecurityModule_givenIsmIsCorrect() public {
        assertEq(address(ism.interchainSecurityModule()), address(ism));
    }

    function test_handle_emitReceivedMessageEvent() public {
        uint256 amount = 0.001 ether;
        IOptimismPortal.WithdrawalTransaction
            memory withdrawalTx = _getDummyWithdrawalTx(0, amount, bytes(""));

        mailboxOrigin.dispatch(
            destination,
            address(ism).addressToBytes32(),
            bytes("")
        );

        vm.deal(address(portal), amount);

        uint256 nonce = mailboxDestination.inboundProcessedNonce();
        bytes memory message = mailboxDestination.inboundMessages(nonce);
        bytes memory metadata = _getDummyVerifyMetadata(withdrawalTx);

        vm.expectEmit(address(ism));
        emit OPL2ToL1CcipReadIsm.ReceivedMessage(
            origin,
            address(this).addressToBytes32(),
            0,
            bytes("")
        );
        ism.process(metadata, message);
    }
}
