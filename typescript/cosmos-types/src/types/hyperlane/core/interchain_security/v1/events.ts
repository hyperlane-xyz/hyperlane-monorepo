// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/interchain_security/v1/events.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

export const protobufPackage = 'hyperlane.core.interchain_security.v1';

/** EventCreateNoopIsm ... */
export interface EventCreateNoopIsm {
  /** ism_id ... */
  ism_id: string;
  /** owner ... */
  owner: string;
}

/** EventCreateMerkleRootMultisigIsm ... */
export interface EventCreateMerkleRootMultisigIsm {
  ism_id: string;
  owner: string;
  validators: string[];
  threshold: number;
}

/** EventCreateMessageIdMultisigIsm ... */
export interface EventCreateMessageIdMultisigIsm {
  ism_id: string;
  owner: string;
  validators: string[];
  threshold: number;
}

/** EventCreateMessageIdMultisigIsm ... */
export interface EventAnnounceStorageLocation {
  mailbox_id: string;
  sender: string;
  validator: string;
  storage_location: string;
}

/** EventSetRoutingIsmDomain ... */
export interface EventSetRoutingIsmDomain {
  ism_id: string;
  owner: string;
  route_ism_id: string;
  route_domain: number;
}

/** EventRemoveRoutingIsmDomain ... */
export interface EventRemoveRoutingIsmDomain {
  ism_id: string;
  owner: string;
  route_domain: number;
}

/** EventRemoveRoutingIsmDomain ... */
export interface EventSetRoutingIsm {
  ism_id: string;
  owner: string;
  new_owner: string;
  renounce_ownership: boolean;
}

/** EventCreateMessageIdMultisigIsm ... */
export interface EventCreateRoutingIsm {
  ism_id: string;
  owner: string;
}

function createBaseEventCreateNoopIsm(): EventCreateNoopIsm {
  return { ism_id: '', owner: '' };
}

export const EventCreateNoopIsm = {
  encode(
    message: EventCreateNoopIsm,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.ism_id !== '') {
      writer.uint32(10).string(message.ism_id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateNoopIsm {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateNoopIsm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ism_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCreateNoopIsm {
    return {
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
    };
  },

  toJSON(message: EventCreateNoopIsm): unknown {
    const obj: any = {};
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCreateNoopIsm>, I>>(
    base?: I,
  ): EventCreateNoopIsm {
    return EventCreateNoopIsm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCreateNoopIsm>, I>>(
    object: I,
  ): EventCreateNoopIsm {
    const message = createBaseEventCreateNoopIsm();
    message.ism_id = object.ism_id ?? '';
    message.owner = object.owner ?? '';
    return message;
  },
};

function createBaseEventCreateMerkleRootMultisigIsm(): EventCreateMerkleRootMultisigIsm {
  return { ism_id: '', owner: '', validators: [], threshold: 0 };
}

export const EventCreateMerkleRootMultisigIsm = {
  encode(
    message: EventCreateMerkleRootMultisigIsm,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.ism_id !== '') {
      writer.uint32(10).string(message.ism_id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    for (const v of message.validators) {
      writer.uint32(26).string(v!);
    }
    if (message.threshold !== 0) {
      writer.uint32(32).uint32(message.threshold);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): EventCreateMerkleRootMultisigIsm {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateMerkleRootMultisigIsm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ism_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validators.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.threshold = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCreateMerkleRootMultisigIsm {
    return {
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      validators: globalThis.Array.isArray(object?.validators)
        ? object.validators.map((e: any) => globalThis.String(e))
        : [],
      threshold: isSet(object.threshold)
        ? globalThis.Number(object.threshold)
        : 0,
    };
  },

  toJSON(message: EventCreateMerkleRootMultisigIsm): unknown {
    const obj: any = {};
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.validators?.length) {
      obj.validators = message.validators;
    }
    if (message.threshold !== 0) {
      obj.threshold = Math.round(message.threshold);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCreateMerkleRootMultisigIsm>, I>>(
    base?: I,
  ): EventCreateMerkleRootMultisigIsm {
    return EventCreateMerkleRootMultisigIsm.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<EventCreateMerkleRootMultisigIsm>, I>,
  >(object: I): EventCreateMerkleRootMultisigIsm {
    const message = createBaseEventCreateMerkleRootMultisigIsm();
    message.ism_id = object.ism_id ?? '';
    message.owner = object.owner ?? '';
    message.validators = object.validators?.map((e) => e) || [];
    message.threshold = object.threshold ?? 0;
    return message;
  },
};

function createBaseEventCreateMessageIdMultisigIsm(): EventCreateMessageIdMultisigIsm {
  return { ism_id: '', owner: '', validators: [], threshold: 0 };
}

export const EventCreateMessageIdMultisigIsm = {
  encode(
    message: EventCreateMessageIdMultisigIsm,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.ism_id !== '') {
      writer.uint32(10).string(message.ism_id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    for (const v of message.validators) {
      writer.uint32(26).string(v!);
    }
    if (message.threshold !== 0) {
      writer.uint32(32).uint32(message.threshold);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): EventCreateMessageIdMultisigIsm {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateMessageIdMultisigIsm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ism_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validators.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.threshold = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCreateMessageIdMultisigIsm {
    return {
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      validators: globalThis.Array.isArray(object?.validators)
        ? object.validators.map((e: any) => globalThis.String(e))
        : [],
      threshold: isSet(object.threshold)
        ? globalThis.Number(object.threshold)
        : 0,
    };
  },

  toJSON(message: EventCreateMessageIdMultisigIsm): unknown {
    const obj: any = {};
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.validators?.length) {
      obj.validators = message.validators;
    }
    if (message.threshold !== 0) {
      obj.threshold = Math.round(message.threshold);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCreateMessageIdMultisigIsm>, I>>(
    base?: I,
  ): EventCreateMessageIdMultisigIsm {
    return EventCreateMessageIdMultisigIsm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCreateMessageIdMultisigIsm>, I>>(
    object: I,
  ): EventCreateMessageIdMultisigIsm {
    const message = createBaseEventCreateMessageIdMultisigIsm();
    message.ism_id = object.ism_id ?? '';
    message.owner = object.owner ?? '';
    message.validators = object.validators?.map((e) => e) || [];
    message.threshold = object.threshold ?? 0;
    return message;
  },
};

function createBaseEventAnnounceStorageLocation(): EventAnnounceStorageLocation {
  return { mailbox_id: '', sender: '', validator: '', storage_location: '' };
}

export const EventAnnounceStorageLocation = {
  encode(
    message: EventAnnounceStorageLocation,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.mailbox_id !== '') {
      writer.uint32(10).string(message.mailbox_id);
    }
    if (message.sender !== '') {
      writer.uint32(18).string(message.sender);
    }
    if (message.validator !== '') {
      writer.uint32(26).string(message.validator);
    }
    if (message.storage_location !== '') {
      writer.uint32(34).string(message.storage_location);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): EventAnnounceStorageLocation {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAnnounceStorageLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mailbox_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validator = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.storage_location = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAnnounceStorageLocation {
    return {
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      validator: isSet(object.validator)
        ? globalThis.String(object.validator)
        : '',
      storage_location: isSet(object.storage_location)
        ? globalThis.String(object.storage_location)
        : '',
    };
  },

  toJSON(message: EventAnnounceStorageLocation): unknown {
    const obj: any = {};
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.validator !== '') {
      obj.validator = message.validator;
    }
    if (message.storage_location !== '') {
      obj.storage_location = message.storage_location;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAnnounceStorageLocation>, I>>(
    base?: I,
  ): EventAnnounceStorageLocation {
    return EventAnnounceStorageLocation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAnnounceStorageLocation>, I>>(
    object: I,
  ): EventAnnounceStorageLocation {
    const message = createBaseEventAnnounceStorageLocation();
    message.mailbox_id = object.mailbox_id ?? '';
    message.sender = object.sender ?? '';
    message.validator = object.validator ?? '';
    message.storage_location = object.storage_location ?? '';
    return message;
  },
};

function createBaseEventSetRoutingIsmDomain(): EventSetRoutingIsmDomain {
  return { ism_id: '', owner: '', route_ism_id: '', route_domain: 0 };
}

export const EventSetRoutingIsmDomain = {
  encode(
    message: EventSetRoutingIsmDomain,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.ism_id !== '') {
      writer.uint32(10).string(message.ism_id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (message.route_ism_id !== '') {
      writer.uint32(26).string(message.route_ism_id);
    }
    if (message.route_domain !== 0) {
      writer.uint32(32).uint32(message.route_domain);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): EventSetRoutingIsmDomain {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSetRoutingIsmDomain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ism_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.route_ism_id = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.route_domain = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSetRoutingIsmDomain {
    return {
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      route_ism_id: isSet(object.route_ism_id)
        ? globalThis.String(object.route_ism_id)
        : '',
      route_domain: isSet(object.route_domain)
        ? globalThis.Number(object.route_domain)
        : 0,
    };
  },

  toJSON(message: EventSetRoutingIsmDomain): unknown {
    const obj: any = {};
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.route_ism_id !== '') {
      obj.route_ism_id = message.route_ism_id;
    }
    if (message.route_domain !== 0) {
      obj.route_domain = Math.round(message.route_domain);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSetRoutingIsmDomain>, I>>(
    base?: I,
  ): EventSetRoutingIsmDomain {
    return EventSetRoutingIsmDomain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSetRoutingIsmDomain>, I>>(
    object: I,
  ): EventSetRoutingIsmDomain {
    const message = createBaseEventSetRoutingIsmDomain();
    message.ism_id = object.ism_id ?? '';
    message.owner = object.owner ?? '';
    message.route_ism_id = object.route_ism_id ?? '';
    message.route_domain = object.route_domain ?? 0;
    return message;
  },
};

function createBaseEventRemoveRoutingIsmDomain(): EventRemoveRoutingIsmDomain {
  return { ism_id: '', owner: '', route_domain: 0 };
}

export const EventRemoveRoutingIsmDomain = {
  encode(
    message: EventRemoveRoutingIsmDomain,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.ism_id !== '') {
      writer.uint32(10).string(message.ism_id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (message.route_domain !== 0) {
      writer.uint32(24).uint32(message.route_domain);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): EventRemoveRoutingIsmDomain {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventRemoveRoutingIsmDomain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ism_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.route_domain = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventRemoveRoutingIsmDomain {
    return {
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      route_domain: isSet(object.route_domain)
        ? globalThis.Number(object.route_domain)
        : 0,
    };
  },

  toJSON(message: EventRemoveRoutingIsmDomain): unknown {
    const obj: any = {};
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.route_domain !== 0) {
      obj.route_domain = Math.round(message.route_domain);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventRemoveRoutingIsmDomain>, I>>(
    base?: I,
  ): EventRemoveRoutingIsmDomain {
    return EventRemoveRoutingIsmDomain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventRemoveRoutingIsmDomain>, I>>(
    object: I,
  ): EventRemoveRoutingIsmDomain {
    const message = createBaseEventRemoveRoutingIsmDomain();
    message.ism_id = object.ism_id ?? '';
    message.owner = object.owner ?? '';
    message.route_domain = object.route_domain ?? 0;
    return message;
  },
};

function createBaseEventSetRoutingIsm(): EventSetRoutingIsm {
  return { ism_id: '', owner: '', new_owner: '', renounce_ownership: false };
}

export const EventSetRoutingIsm = {
  encode(
    message: EventSetRoutingIsm,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.ism_id !== '') {
      writer.uint32(10).string(message.ism_id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (message.new_owner !== '') {
      writer.uint32(26).string(message.new_owner);
    }
    if (message.renounce_ownership !== false) {
      writer.uint32(32).bool(message.renounce_ownership);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventSetRoutingIsm {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSetRoutingIsm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ism_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.new_owner = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.renounce_ownership = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSetRoutingIsm {
    return {
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      new_owner: isSet(object.new_owner)
        ? globalThis.String(object.new_owner)
        : '',
      renounce_ownership: isSet(object.renounce_ownership)
        ? globalThis.Boolean(object.renounce_ownership)
        : false,
    };
  },

  toJSON(message: EventSetRoutingIsm): unknown {
    const obj: any = {};
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.new_owner !== '') {
      obj.new_owner = message.new_owner;
    }
    if (message.renounce_ownership !== false) {
      obj.renounce_ownership = message.renounce_ownership;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSetRoutingIsm>, I>>(
    base?: I,
  ): EventSetRoutingIsm {
    return EventSetRoutingIsm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSetRoutingIsm>, I>>(
    object: I,
  ): EventSetRoutingIsm {
    const message = createBaseEventSetRoutingIsm();
    message.ism_id = object.ism_id ?? '';
    message.owner = object.owner ?? '';
    message.new_owner = object.new_owner ?? '';
    message.renounce_ownership = object.renounce_ownership ?? false;
    return message;
  },
};

function createBaseEventCreateRoutingIsm(): EventCreateRoutingIsm {
  return { ism_id: '', owner: '' };
}

export const EventCreateRoutingIsm = {
  encode(
    message: EventCreateRoutingIsm,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.ism_id !== '') {
      writer.uint32(10).string(message.ism_id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): EventCreateRoutingIsm {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateRoutingIsm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ism_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCreateRoutingIsm {
    return {
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
    };
  },

  toJSON(message: EventCreateRoutingIsm): unknown {
    const obj: any = {};
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCreateRoutingIsm>, I>>(
    base?: I,
  ): EventCreateRoutingIsm {
    return EventCreateRoutingIsm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCreateRoutingIsm>, I>>(
    object: I,
  ): EventCreateRoutingIsm {
    const message = createBaseEventCreateRoutingIsm();
    message.ism_id = object.ism_id ?? '';
    message.owner = object.owner ?? '';
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
