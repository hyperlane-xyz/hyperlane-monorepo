// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/post_dispatch/v1/query.proto

/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

import {
  PageRequest,
  PageResponse,
} from '../../../../cosmos/base/query/v1beta1/pagination.js';
import { Coin } from '../../../../cosmos/base/v1beta1/coin.js';

import {
  DestinationGasConfig,
  InterchainGasPaymaster,
  NoopHook,
} from './types.js';

export const protobufPackage = 'hyperlane.core.post_dispatch.v1';

/** QueryIgpsRequest ... */
export interface QueryIgpsRequest {
  /** pagination defines an optional pagination for the request. */
  pagination?: PageRequest | undefined;
}

/** QueryIgpsResponse ... */
export interface QueryIgpsResponse {
  igps: InterchainGasPaymaster[];
  /** pagination defines the pagination in the response. */
  pagination?: PageResponse | undefined;
}

/** QueryIgpRequest ... */
export interface QueryIgpRequest {
  id: string;
}

/** QueryIgpResponse ... */
export interface QueryIgpResponse {
  igp?: InterchainGasPaymaster | undefined;
}

/** QueryDestinationGasConfigsRequest ... */
export interface QueryDestinationGasConfigsRequest {
  id: string;
  /** pagination defines an optional pagination for the request. */
  pagination?: PageRequest | undefined;
}

/** QueryDestinationGasConfigsResponse ... */
export interface QueryDestinationGasConfigsResponse {
  destination_gas_configs: DestinationGasConfig[];
  /** pagination defines the pagination in the response. */
  pagination?: PageResponse | undefined;
}

/** QueryQuoteGasPaymentRequest ... */
export interface QueryQuoteGasPaymentRequest {
  igp_id: string;
  destination_domain: string;
  gas_limit: string;
}

/** QueryQuoteGasPaymentResponse ... */
export interface QueryQuoteGasPaymentResponse {
  gas_payment: Coin[];
}

/** QueryMerkleTreeHooksRequest ... */
export interface QueryMerkleTreeHooksRequest {
  pagination?: PageRequest | undefined;
}

/** QueryMerkleTreeHooksResponse ... */
export interface QueryMerkleTreeHooksResponse {
  merkle_tree_hooks: WrappedMerkleTreeHookResponse[];
  pagination?: PageResponse | undefined;
}

/** QueryMerkleTreeHookRequest ... */
export interface QueryMerkleTreeHookRequest {
  id: string;
}

/** QueryMerkleTreeHookResponse */
export interface QueryMerkleTreeHookResponse {
  merkle_tree_hook?: WrappedMerkleTreeHookResponse | undefined;
}

/** WrappedMerkleTreeHookResponse */
export interface WrappedMerkleTreeHookResponse {
  id: string;
  owner: string;
  mailbox_id: string;
  merkle_tree?: TreeResponse | undefined;
}

/** TreeResponse */
export interface TreeResponse {
  /** leafs ... */
  leafs: Uint8Array[];
  /** count ... */
  count: number;
  /** root ... */
  root: Uint8Array;
}

/** QueryNoopHookRequest ... */
export interface QueryNoopHookRequest {
  id: string;
}

/** QueryNoopHookResponse ... */
export interface QueryNoopHookResponse {
  noop_hook?: NoopHook | undefined;
}

/** QueryNoopHooksRequest ... */
export interface QueryNoopHooksRequest {
  pagination?: PageRequest | undefined;
}

/** QueryNoopHooksResponse ... */
export interface QueryNoopHooksResponse {
  noop_hooks: NoopHook[];
  pagination?: PageResponse | undefined;
}

function createBaseQueryIgpsRequest(): QueryIgpsRequest {
  return { pagination: undefined };
}

export const QueryIgpsRequest = {
  encode(
    message: QueryIgpsRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryIgpsRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIgpsRequest {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryIgpsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryIgpsRequest>, I>>(
    base?: I,
  ): QueryIgpsRequest {
    return QueryIgpsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryIgpsRequest>, I>>(
    object: I,
  ): QueryIgpsRequest {
    const message = createBaseQueryIgpsRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryIgpsResponse(): QueryIgpsResponse {
  return { igps: [], pagination: undefined };
}

export const QueryIgpsResponse = {
  encode(
    message: QueryIgpsResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.igps) {
      InterchainGasPaymaster.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryIgpsResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.igps.push(
            InterchainGasPaymaster.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIgpsResponse {
    return {
      igps: globalThis.Array.isArray(object?.igps)
        ? object.igps.map((e: any) => InterchainGasPaymaster.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryIgpsResponse): unknown {
    const obj: any = {};
    if (message.igps?.length) {
      obj.igps = message.igps.map((e) => InterchainGasPaymaster.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryIgpsResponse>, I>>(
    base?: I,
  ): QueryIgpsResponse {
    return QueryIgpsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryIgpsResponse>, I>>(
    object: I,
  ): QueryIgpsResponse {
    const message = createBaseQueryIgpsResponse();
    message.igps =
      object.igps?.map((e) => InterchainGasPaymaster.fromPartial(e)) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryIgpRequest(): QueryIgpRequest {
  return { id: '' };
}

export const QueryIgpRequest = {
  encode(
    message: QueryIgpRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryIgpRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIgpRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: QueryIgpRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryIgpRequest>, I>>(
    base?: I,
  ): QueryIgpRequest {
    return QueryIgpRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryIgpRequest>, I>>(
    object: I,
  ): QueryIgpRequest {
    const message = createBaseQueryIgpRequest();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseQueryIgpResponse(): QueryIgpResponse {
  return { igp: undefined };
}

export const QueryIgpResponse = {
  encode(
    message: QueryIgpResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.igp !== undefined) {
      InterchainGasPaymaster.encode(
        message.igp,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryIgpResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.igp = InterchainGasPaymaster.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIgpResponse {
    return {
      igp: isSet(object.igp)
        ? InterchainGasPaymaster.fromJSON(object.igp)
        : undefined,
    };
  },

  toJSON(message: QueryIgpResponse): unknown {
    const obj: any = {};
    if (message.igp !== undefined) {
      obj.igp = InterchainGasPaymaster.toJSON(message.igp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryIgpResponse>, I>>(
    base?: I,
  ): QueryIgpResponse {
    return QueryIgpResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryIgpResponse>, I>>(
    object: I,
  ): QueryIgpResponse {
    const message = createBaseQueryIgpResponse();
    message.igp =
      object.igp !== undefined && object.igp !== null
        ? InterchainGasPaymaster.fromPartial(object.igp)
        : undefined;
    return message;
  },
};

function createBaseQueryDestinationGasConfigsRequest(): QueryDestinationGasConfigsRequest {
  return { id: '', pagination: undefined };
}

export const QueryDestinationGasConfigsRequest = {
  encode(
    message: QueryDestinationGasConfigsRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryDestinationGasConfigsRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDestinationGasConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDestinationGasConfigsRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryDestinationGasConfigsRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDestinationGasConfigsRequest>, I>>(
    base?: I,
  ): QueryDestinationGasConfigsRequest {
    return QueryDestinationGasConfigsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<QueryDestinationGasConfigsRequest>, I>,
  >(object: I): QueryDestinationGasConfigsRequest {
    const message = createBaseQueryDestinationGasConfigsRequest();
    message.id = object.id ?? '';
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryDestinationGasConfigsResponse(): QueryDestinationGasConfigsResponse {
  return { destination_gas_configs: [], pagination: undefined };
}

export const QueryDestinationGasConfigsResponse = {
  encode(
    message: QueryDestinationGasConfigsResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.destination_gas_configs) {
      DestinationGasConfig.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryDestinationGasConfigsResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDestinationGasConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.destination_gas_configs.push(
            DestinationGasConfig.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDestinationGasConfigsResponse {
    return {
      destination_gas_configs: globalThis.Array.isArray(
        object?.destination_gas_configs,
      )
        ? object.destination_gas_configs.map((e: any) =>
            DestinationGasConfig.fromJSON(e),
          )
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryDestinationGasConfigsResponse): unknown {
    const obj: any = {};
    if (message.destination_gas_configs?.length) {
      obj.destination_gas_configs = message.destination_gas_configs.map((e) =>
        DestinationGasConfig.toJSON(e),
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDestinationGasConfigsResponse>, I>>(
    base?: I,
  ): QueryDestinationGasConfigsResponse {
    return QueryDestinationGasConfigsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<QueryDestinationGasConfigsResponse>, I>,
  >(object: I): QueryDestinationGasConfigsResponse {
    const message = createBaseQueryDestinationGasConfigsResponse();
    message.destination_gas_configs =
      object.destination_gas_configs?.map((e) =>
        DestinationGasConfig.fromPartial(e),
      ) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryQuoteGasPaymentRequest(): QueryQuoteGasPaymentRequest {
  return { igp_id: '', destination_domain: '', gas_limit: '' };
}

export const QueryQuoteGasPaymentRequest = {
  encode(
    message: QueryQuoteGasPaymentRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.igp_id !== '') {
      writer.uint32(10).string(message.igp_id);
    }
    if (message.destination_domain !== '') {
      writer.uint32(18).string(message.destination_domain);
    }
    if (message.gas_limit !== '') {
      writer.uint32(26).string(message.gas_limit);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryQuoteGasPaymentRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQuoteGasPaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.igp_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destination_domain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gas_limit = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryQuoteGasPaymentRequest {
    return {
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
      destination_domain: isSet(object.destination_domain)
        ? globalThis.String(object.destination_domain)
        : '',
      gas_limit: isSet(object.gas_limit)
        ? globalThis.String(object.gas_limit)
        : '',
    };
  },

  toJSON(message: QueryQuoteGasPaymentRequest): unknown {
    const obj: any = {};
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    if (message.destination_domain !== '') {
      obj.destination_domain = message.destination_domain;
    }
    if (message.gas_limit !== '') {
      obj.gas_limit = message.gas_limit;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryQuoteGasPaymentRequest>, I>>(
    base?: I,
  ): QueryQuoteGasPaymentRequest {
    return QueryQuoteGasPaymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryQuoteGasPaymentRequest>, I>>(
    object: I,
  ): QueryQuoteGasPaymentRequest {
    const message = createBaseQueryQuoteGasPaymentRequest();
    message.igp_id = object.igp_id ?? '';
    message.destination_domain = object.destination_domain ?? '';
    message.gas_limit = object.gas_limit ?? '';
    return message;
  },
};

function createBaseQueryQuoteGasPaymentResponse(): QueryQuoteGasPaymentResponse {
  return { gas_payment: [] };
}

export const QueryQuoteGasPaymentResponse = {
  encode(
    message: QueryQuoteGasPaymentResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.gas_payment) {
      Coin.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryQuoteGasPaymentResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQuoteGasPaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gas_payment.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryQuoteGasPaymentResponse {
    return {
      gas_payment: globalThis.Array.isArray(object?.gas_payment)
        ? object.gas_payment.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryQuoteGasPaymentResponse): unknown {
    const obj: any = {};
    if (message.gas_payment?.length) {
      obj.gas_payment = message.gas_payment.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryQuoteGasPaymentResponse>, I>>(
    base?: I,
  ): QueryQuoteGasPaymentResponse {
    return QueryQuoteGasPaymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryQuoteGasPaymentResponse>, I>>(
    object: I,
  ): QueryQuoteGasPaymentResponse {
    const message = createBaseQueryQuoteGasPaymentResponse();
    message.gas_payment =
      object.gas_payment?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryMerkleTreeHooksRequest(): QueryMerkleTreeHooksRequest {
  return { pagination: undefined };
}

export const QueryMerkleTreeHooksRequest = {
  encode(
    message: QueryMerkleTreeHooksRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryMerkleTreeHooksRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHooksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMerkleTreeHooksRequest {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryMerkleTreeHooksRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMerkleTreeHooksRequest>, I>>(
    base?: I,
  ): QueryMerkleTreeHooksRequest {
    return QueryMerkleTreeHooksRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMerkleTreeHooksRequest>, I>>(
    object: I,
  ): QueryMerkleTreeHooksRequest {
    const message = createBaseQueryMerkleTreeHooksRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryMerkleTreeHooksResponse(): QueryMerkleTreeHooksResponse {
  return { merkle_tree_hooks: [], pagination: undefined };
}

export const QueryMerkleTreeHooksResponse = {
  encode(
    message: QueryMerkleTreeHooksResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.merkle_tree_hooks) {
      WrappedMerkleTreeHookResponse.encode(
        v!,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryMerkleTreeHooksResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHooksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.merkle_tree_hooks.push(
            WrappedMerkleTreeHookResponse.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMerkleTreeHooksResponse {
    return {
      merkle_tree_hooks: globalThis.Array.isArray(object?.merkle_tree_hooks)
        ? object.merkle_tree_hooks.map((e: any) =>
            WrappedMerkleTreeHookResponse.fromJSON(e),
          )
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryMerkleTreeHooksResponse): unknown {
    const obj: any = {};
    if (message.merkle_tree_hooks?.length) {
      obj.merkle_tree_hooks = message.merkle_tree_hooks.map((e) =>
        WrappedMerkleTreeHookResponse.toJSON(e),
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMerkleTreeHooksResponse>, I>>(
    base?: I,
  ): QueryMerkleTreeHooksResponse {
    return QueryMerkleTreeHooksResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMerkleTreeHooksResponse>, I>>(
    object: I,
  ): QueryMerkleTreeHooksResponse {
    const message = createBaseQueryMerkleTreeHooksResponse();
    message.merkle_tree_hooks =
      object.merkle_tree_hooks?.map((e) =>
        WrappedMerkleTreeHookResponse.fromPartial(e),
      ) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryMerkleTreeHookRequest(): QueryMerkleTreeHookRequest {
  return { id: '' };
}

export const QueryMerkleTreeHookRequest = {
  encode(
    message: QueryMerkleTreeHookRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryMerkleTreeHookRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMerkleTreeHookRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: QueryMerkleTreeHookRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMerkleTreeHookRequest>, I>>(
    base?: I,
  ): QueryMerkleTreeHookRequest {
    return QueryMerkleTreeHookRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMerkleTreeHookRequest>, I>>(
    object: I,
  ): QueryMerkleTreeHookRequest {
    const message = createBaseQueryMerkleTreeHookRequest();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseQueryMerkleTreeHookResponse(): QueryMerkleTreeHookResponse {
  return { merkle_tree_hook: undefined };
}

export const QueryMerkleTreeHookResponse = {
  encode(
    message: QueryMerkleTreeHookResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.merkle_tree_hook !== undefined) {
      WrappedMerkleTreeHookResponse.encode(
        message.merkle_tree_hook,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryMerkleTreeHookResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.merkle_tree_hook = WrappedMerkleTreeHookResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMerkleTreeHookResponse {
    return {
      merkle_tree_hook: isSet(object.merkle_tree_hook)
        ? WrappedMerkleTreeHookResponse.fromJSON(object.merkle_tree_hook)
        : undefined,
    };
  },

  toJSON(message: QueryMerkleTreeHookResponse): unknown {
    const obj: any = {};
    if (message.merkle_tree_hook !== undefined) {
      obj.merkle_tree_hook = WrappedMerkleTreeHookResponse.toJSON(
        message.merkle_tree_hook,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMerkleTreeHookResponse>, I>>(
    base?: I,
  ): QueryMerkleTreeHookResponse {
    return QueryMerkleTreeHookResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMerkleTreeHookResponse>, I>>(
    object: I,
  ): QueryMerkleTreeHookResponse {
    const message = createBaseQueryMerkleTreeHookResponse();
    message.merkle_tree_hook =
      object.merkle_tree_hook !== undefined && object.merkle_tree_hook !== null
        ? WrappedMerkleTreeHookResponse.fromPartial(object.merkle_tree_hook)
        : undefined;
    return message;
  },
};

function createBaseWrappedMerkleTreeHookResponse(): WrappedMerkleTreeHookResponse {
  return { id: '', owner: '', mailbox_id: '', merkle_tree: undefined };
}

export const WrappedMerkleTreeHookResponse = {
  encode(
    message: WrappedMerkleTreeHookResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (message.mailbox_id !== '') {
      writer.uint32(26).string(message.mailbox_id);
    }
    if (message.merkle_tree !== undefined) {
      TreeResponse.encode(
        message.merkle_tree,
        writer.uint32(34).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): WrappedMerkleTreeHookResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrappedMerkleTreeHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mailbox_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.merkle_tree = TreeResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrappedMerkleTreeHookResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
      merkle_tree: isSet(object.merkle_tree)
        ? TreeResponse.fromJSON(object.merkle_tree)
        : undefined,
    };
  },

  toJSON(message: WrappedMerkleTreeHookResponse): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.merkle_tree !== undefined) {
      obj.merkle_tree = TreeResponse.toJSON(message.merkle_tree);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WrappedMerkleTreeHookResponse>, I>>(
    base?: I,
  ): WrappedMerkleTreeHookResponse {
    return WrappedMerkleTreeHookResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WrappedMerkleTreeHookResponse>, I>>(
    object: I,
  ): WrappedMerkleTreeHookResponse {
    const message = createBaseWrappedMerkleTreeHookResponse();
    message.id = object.id ?? '';
    message.owner = object.owner ?? '';
    message.mailbox_id = object.mailbox_id ?? '';
    message.merkle_tree =
      object.merkle_tree !== undefined && object.merkle_tree !== null
        ? TreeResponse.fromPartial(object.merkle_tree)
        : undefined;
    return message;
  },
};

function createBaseTreeResponse(): TreeResponse {
  return { leafs: [], count: 0, root: new Uint8Array(0) };
}

export const TreeResponse = {
  encode(
    message: TreeResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.leafs) {
      writer.uint32(10).bytes(v!);
    }
    if (message.count !== 0) {
      writer.uint32(16).uint32(message.count);
    }
    if (message.root.length !== 0) {
      writer.uint32(26).bytes(message.root);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TreeResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTreeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.leafs.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.count = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.root = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TreeResponse {
    return {
      leafs: globalThis.Array.isArray(object?.leafs)
        ? object.leafs.map((e: any) => bytesFromBase64(e))
        : [],
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      root: isSet(object.root)
        ? bytesFromBase64(object.root)
        : new Uint8Array(0),
    };
  },

  toJSON(message: TreeResponse): unknown {
    const obj: any = {};
    if (message.leafs?.length) {
      obj.leafs = message.leafs.map((e) => base64FromBytes(e));
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.root.length !== 0) {
      obj.root = base64FromBytes(message.root);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TreeResponse>, I>>(
    base?: I,
  ): TreeResponse {
    return TreeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TreeResponse>, I>>(
    object: I,
  ): TreeResponse {
    const message = createBaseTreeResponse();
    message.leafs = object.leafs?.map((e) => e) || [];
    message.count = object.count ?? 0;
    message.root = object.root ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryNoopHookRequest(): QueryNoopHookRequest {
  return { id: '' };
}

export const QueryNoopHookRequest = {
  encode(
    message: QueryNoopHookRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryNoopHookRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNoopHookRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: QueryNoopHookRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryNoopHookRequest>, I>>(
    base?: I,
  ): QueryNoopHookRequest {
    return QueryNoopHookRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryNoopHookRequest>, I>>(
    object: I,
  ): QueryNoopHookRequest {
    const message = createBaseQueryNoopHookRequest();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseQueryNoopHookResponse(): QueryNoopHookResponse {
  return { noop_hook: undefined };
}

export const QueryNoopHookResponse = {
  encode(
    message: QueryNoopHookResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.noop_hook !== undefined) {
      NoopHook.encode(message.noop_hook, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryNoopHookResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.noop_hook = NoopHook.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNoopHookResponse {
    return {
      noop_hook: isSet(object.noop_hook)
        ? NoopHook.fromJSON(object.noop_hook)
        : undefined,
    };
  },

  toJSON(message: QueryNoopHookResponse): unknown {
    const obj: any = {};
    if (message.noop_hook !== undefined) {
      obj.noop_hook = NoopHook.toJSON(message.noop_hook);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryNoopHookResponse>, I>>(
    base?: I,
  ): QueryNoopHookResponse {
    return QueryNoopHookResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryNoopHookResponse>, I>>(
    object: I,
  ): QueryNoopHookResponse {
    const message = createBaseQueryNoopHookResponse();
    message.noop_hook =
      object.noop_hook !== undefined && object.noop_hook !== null
        ? NoopHook.fromPartial(object.noop_hook)
        : undefined;
    return message;
  },
};

function createBaseQueryNoopHooksRequest(): QueryNoopHooksRequest {
  return { pagination: undefined };
}

export const QueryNoopHooksRequest = {
  encode(
    message: QueryNoopHooksRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryNoopHooksRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHooksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNoopHooksRequest {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryNoopHooksRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryNoopHooksRequest>, I>>(
    base?: I,
  ): QueryNoopHooksRequest {
    return QueryNoopHooksRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryNoopHooksRequest>, I>>(
    object: I,
  ): QueryNoopHooksRequest {
    const message = createBaseQueryNoopHooksRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryNoopHooksResponse(): QueryNoopHooksResponse {
  return { noop_hooks: [], pagination: undefined };
}

export const QueryNoopHooksResponse = {
  encode(
    message: QueryNoopHooksResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.noop_hooks) {
      NoopHook.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryNoopHooksResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHooksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.noop_hooks.push(NoopHook.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNoopHooksResponse {
    return {
      noop_hooks: globalThis.Array.isArray(object?.noop_hooks)
        ? object.noop_hooks.map((e: any) => NoopHook.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryNoopHooksResponse): unknown {
    const obj: any = {};
    if (message.noop_hooks?.length) {
      obj.noop_hooks = message.noop_hooks.map((e) => NoopHook.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryNoopHooksResponse>, I>>(
    base?: I,
  ): QueryNoopHooksResponse {
    return QueryNoopHooksResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryNoopHooksResponse>, I>>(
    object: I,
  ): QueryNoopHooksResponse {
    const message = createBaseQueryNoopHooksResponse();
    message.noop_hooks =
      object.noop_hooks?.map((e) => NoopHook.fromPartial(e)) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

/** Msg defines the module Msg service. */
export interface Query {
  /** Igps ... */
  Igps(request: QueryIgpsRequest): Promise<QueryIgpsResponse>;
  /** Igp ... */
  Igp(request: QueryIgpRequest): Promise<QueryIgpResponse>;
  /** DestinationGasConfigs ... */
  DestinationGasConfigs(
    request: QueryDestinationGasConfigsRequest,
  ): Promise<QueryDestinationGasConfigsResponse>;
  /** QuoteGasPayment ... */
  QuoteGasPayment(
    request: QueryQuoteGasPaymentRequest,
  ): Promise<QueryQuoteGasPaymentResponse>;
  /** MerkleTreeHooks ... */
  MerkleTreeHooks(
    request: QueryMerkleTreeHooksRequest,
  ): Promise<QueryMerkleTreeHooksResponse>;
  /** MerkleTreeHook ... */
  MerkleTreeHook(
    request: QueryMerkleTreeHookRequest,
  ): Promise<QueryMerkleTreeHookResponse>;
  /** NoopHooks ... */
  NoopHooks(request: QueryNoopHooksRequest): Promise<QueryNoopHooksResponse>;
  /** NoopHook ... */
  NoopHook(request: QueryNoopHookRequest): Promise<QueryNoopHookResponse>;
}

export const QueryServiceName = 'hyperlane.core.post_dispatch.v1.Query';
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Igps = this.Igps.bind(this);
    this.Igp = this.Igp.bind(this);
    this.DestinationGasConfigs = this.DestinationGasConfigs.bind(this);
    this.QuoteGasPayment = this.QuoteGasPayment.bind(this);
    this.MerkleTreeHooks = this.MerkleTreeHooks.bind(this);
    this.MerkleTreeHook = this.MerkleTreeHook.bind(this);
    this.NoopHooks = this.NoopHooks.bind(this);
    this.NoopHook = this.NoopHook.bind(this);
  }
  Igps(request: QueryIgpsRequest): Promise<QueryIgpsResponse> {
    const data = QueryIgpsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Igps', data);
    return promise.then((data) =>
      QueryIgpsResponse.decode(_m0.Reader.create(data)),
    );
  }

  Igp(request: QueryIgpRequest): Promise<QueryIgpResponse> {
    const data = QueryIgpRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Igp', data);
    return promise.then((data) =>
      QueryIgpResponse.decode(_m0.Reader.create(data)),
    );
  }

  DestinationGasConfigs(
    request: QueryDestinationGasConfigsRequest,
  ): Promise<QueryDestinationGasConfigsResponse> {
    const data = QueryDestinationGasConfigsRequest.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'DestinationGasConfigs',
      data,
    );
    return promise.then((data) =>
      QueryDestinationGasConfigsResponse.decode(_m0.Reader.create(data)),
    );
  }

  QuoteGasPayment(
    request: QueryQuoteGasPaymentRequest,
  ): Promise<QueryQuoteGasPaymentResponse> {
    const data = QueryQuoteGasPaymentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'QuoteGasPayment', data);
    return promise.then((data) =>
      QueryQuoteGasPaymentResponse.decode(_m0.Reader.create(data)),
    );
  }

  MerkleTreeHooks(
    request: QueryMerkleTreeHooksRequest,
  ): Promise<QueryMerkleTreeHooksResponse> {
    const data = QueryMerkleTreeHooksRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'MerkleTreeHooks', data);
    return promise.then((data) =>
      QueryMerkleTreeHooksResponse.decode(_m0.Reader.create(data)),
    );
  }

  MerkleTreeHook(
    request: QueryMerkleTreeHookRequest,
  ): Promise<QueryMerkleTreeHookResponse> {
    const data = QueryMerkleTreeHookRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'MerkleTreeHook', data);
    return promise.then((data) =>
      QueryMerkleTreeHookResponse.decode(_m0.Reader.create(data)),
    );
  }

  NoopHooks(request: QueryNoopHooksRequest): Promise<QueryNoopHooksResponse> {
    const data = QueryNoopHooksRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'NoopHooks', data);
    return promise.then((data) =>
      QueryNoopHooksResponse.decode(_m0.Reader.create(data)),
    );
  }

  NoopHook(request: QueryNoopHookRequest): Promise<QueryNoopHookResponse> {
    const data = QueryNoopHookRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'NoopHook', data);
    return promise.then((data) =>
      QueryNoopHookResponse.decode(_m0.Reader.create(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString('base64');
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(''));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
