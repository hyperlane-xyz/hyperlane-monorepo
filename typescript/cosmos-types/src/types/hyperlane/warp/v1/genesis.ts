// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/warp/v1/genesis.proto

/* eslint-disable */
import Long from 'long';
import _m0 from 'protobufjs/minimal.js';

import { HypToken, Params, RemoteRouter } from './types.js';

export const protobufPackage = 'hyperlane.warp.v1';

/** GenesisState is the state that must be provided at genesis. */
export interface GenesisState {
  params?: Params | undefined;
  tokens: HypToken[];
  remote_routers: GenesisRemoteRouterWrapper[];
}

/** GenesisRemoteRouterWrapper ... */
export interface GenesisRemoteRouterWrapper {
  token_id: string;
  remote_router?: RemoteRouter | undefined;
}

function createBaseGenesisState(): GenesisState {
  return { params: undefined, tokens: [], remote_routers: [] };
}

export const GenesisState = {
  encode(
    message: GenesisState,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.tokens) {
      HypToken.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.remote_routers) {
      GenesisRemoteRouterWrapper.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokens.push(HypToken.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.remote_routers.push(
            GenesisRemoteRouterWrapper.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      tokens: globalThis.Array.isArray(object?.tokens)
        ? object.tokens.map((e: any) => HypToken.fromJSON(e))
        : [],
      remote_routers: globalThis.Array.isArray(object?.remote_routers)
        ? object.remote_routers.map((e: any) =>
            GenesisRemoteRouterWrapper.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.tokens?.length) {
      obj.tokens = message.tokens.map((e) => HypToken.toJSON(e));
    }
    if (message.remote_routers?.length) {
      obj.remote_routers = message.remote_routers.map((e) =>
        GenesisRemoteRouterWrapper.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(
    base?: I,
  ): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(
    object: I,
  ): GenesisState {
    const message = createBaseGenesisState();
    message.params =
      object.params !== undefined && object.params !== null
        ? Params.fromPartial(object.params)
        : undefined;
    message.tokens = object.tokens?.map((e) => HypToken.fromPartial(e)) || [];
    message.remote_routers =
      object.remote_routers?.map((e) =>
        GenesisRemoteRouterWrapper.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseGenesisRemoteRouterWrapper(): GenesisRemoteRouterWrapper {
  return { token_id: '0', remote_router: undefined };
}

export const GenesisRemoteRouterWrapper = {
  encode(
    message: GenesisRemoteRouterWrapper,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.token_id !== '0') {
      writer.uint32(8).uint64(message.token_id);
    }
    if (message.remote_router !== undefined) {
      RemoteRouter.encode(
        message.remote_router,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): GenesisRemoteRouterWrapper {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisRemoteRouterWrapper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.token_id = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.remote_router = RemoteRouter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisRemoteRouterWrapper {
    return {
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '0',
      remote_router: isSet(object.remote_router)
        ? RemoteRouter.fromJSON(object.remote_router)
        : undefined,
    };
  },

  toJSON(message: GenesisRemoteRouterWrapper): unknown {
    const obj: any = {};
    if (message.token_id !== '0') {
      obj.token_id = message.token_id;
    }
    if (message.remote_router !== undefined) {
      obj.remote_router = RemoteRouter.toJSON(message.remote_router);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisRemoteRouterWrapper>, I>>(
    base?: I,
  ): GenesisRemoteRouterWrapper {
    return GenesisRemoteRouterWrapper.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisRemoteRouterWrapper>, I>>(
    object: I,
  ): GenesisRemoteRouterWrapper {
    const message = createBaseGenesisRemoteRouterWrapper();
    message.token_id = object.token_id ?? '0';
    message.remote_router =
      object.remote_router !== undefined && object.remote_router !== null
        ? RemoteRouter.fromPartial(object.remote_router)
        : undefined;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
