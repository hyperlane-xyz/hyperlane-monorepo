// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/warp/v1/query.proto

/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

import {
  PageRequest,
  PageResponse,
} from '../../../cosmos/base/query/v1beta1/pagination.js';
import { Coin } from '../../../cosmos/base/v1beta1/coin.js';

import {
  HypTokenType,
  RemoteRouter,
  hypTokenTypeFromJSON,
  hypTokenTypeToJSON,
  hypTokenTypeToNumber,
} from './types.js';

export const protobufPackage = 'hyperlane.warp.v1';

/** QueryTokensRequest ... */
export interface QueryTokensRequest {
  pagination?: PageRequest | undefined;
}

/** QueryTokensResponse ... */
export interface QueryTokensResponse {
  /** params defines the parameters of the module. */
  tokens: WrappedHypToken[];
  /** pagination defines the pagination in the response. */
  pagination?: PageResponse | undefined;
}

/** QueryTokenRequest ... */
export interface QueryTokenRequest {
  id: string;
}

/** QueryTokenResponse ... */
export interface QueryTokenResponse {
  token?: WrappedHypToken | undefined;
}

/** WrappedHypToken */
export interface WrappedHypToken {
  id: string;
  owner: string;
  token_type: HypTokenType;
  origin_mailbox: string;
  origin_denom: string;
  ism_id: string;
}

/** QueryBridgedSupplyRequest ... */
export interface QueryBridgedSupplyRequest {
  id: string;
}

/** QueryBridgedSupplyResponse ... */
export interface QueryBridgedSupplyResponse {
  bridged_supply?: Coin | undefined;
}

/** QueryRemoteRoutersRequest ... */
export interface QueryRemoteRoutersRequest {
  id: string;
  pagination?: PageRequest | undefined;
}

/** QueryRemoteRoutersResponse ... */
export interface QueryRemoteRoutersResponse {
  /** Remote Routers ... */
  remote_routers: RemoteRouter[];
  /** pagination defines the pagination in the response. */
  pagination?: PageResponse | undefined;
}

/** QueryQuoteRemoteTransferRequest ... */
export interface QueryQuoteRemoteTransferRequest {
  id: string;
  destination_domain: string;
}

/** QueryQuoteRemoteTransferResponse ... */
export interface QueryQuoteRemoteTransferResponse {
  gas_payment: Coin[];
}

function createBaseQueryTokensRequest(): QueryTokensRequest {
  return { pagination: undefined };
}

export const QueryTokensRequest = {
  encode(
    message: QueryTokensRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryTokensRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokensRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTokensRequest {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryTokensRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTokensRequest>, I>>(
    base?: I,
  ): QueryTokensRequest {
    return QueryTokensRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTokensRequest>, I>>(
    object: I,
  ): QueryTokensRequest {
    const message = createBaseQueryTokensRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryTokensResponse(): QueryTokensResponse {
  return { tokens: [], pagination: undefined };
}

export const QueryTokensResponse = {
  encode(
    message: QueryTokensResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.tokens) {
      WrappedHypToken.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryTokensResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tokens.push(WrappedHypToken.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTokensResponse {
    return {
      tokens: globalThis.Array.isArray(object?.tokens)
        ? object.tokens.map((e: any) => WrappedHypToken.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryTokensResponse): unknown {
    const obj: any = {};
    if (message.tokens?.length) {
      obj.tokens = message.tokens.map((e) => WrappedHypToken.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTokensResponse>, I>>(
    base?: I,
  ): QueryTokensResponse {
    return QueryTokensResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTokensResponse>, I>>(
    object: I,
  ): QueryTokensResponse {
    const message = createBaseQueryTokensResponse();
    message.tokens =
      object.tokens?.map((e) => WrappedHypToken.fromPartial(e)) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryTokenRequest(): QueryTokenRequest {
  return { id: '' };
}

export const QueryTokenRequest = {
  encode(
    message: QueryTokenRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryTokenRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTokenRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: QueryTokenRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTokenRequest>, I>>(
    base?: I,
  ): QueryTokenRequest {
    return QueryTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTokenRequest>, I>>(
    object: I,
  ): QueryTokenRequest {
    const message = createBaseQueryTokenRequest();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseQueryTokenResponse(): QueryTokenResponse {
  return { token: undefined };
}

export const QueryTokenResponse = {
  encode(
    message: QueryTokenResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.token !== undefined) {
      WrappedHypToken.encode(message.token, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryTokenResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = WrappedHypToken.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTokenResponse {
    return {
      token: isSet(object.token)
        ? WrappedHypToken.fromJSON(object.token)
        : undefined,
    };
  },

  toJSON(message: QueryTokenResponse): unknown {
    const obj: any = {};
    if (message.token !== undefined) {
      obj.token = WrappedHypToken.toJSON(message.token);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTokenResponse>, I>>(
    base?: I,
  ): QueryTokenResponse {
    return QueryTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTokenResponse>, I>>(
    object: I,
  ): QueryTokenResponse {
    const message = createBaseQueryTokenResponse();
    message.token =
      object.token !== undefined && object.token !== null
        ? WrappedHypToken.fromPartial(object.token)
        : undefined;
    return message;
  },
};

function createBaseWrappedHypToken(): WrappedHypToken {
  return {
    id: '',
    owner: '',
    token_type: HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED,
    origin_mailbox: '',
    origin_denom: '',
    ism_id: '',
  };
}

export const WrappedHypToken = {
  encode(
    message: WrappedHypToken,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (message.token_type !== HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED) {
      writer.uint32(24).int32(hypTokenTypeToNumber(message.token_type));
    }
    if (message.origin_mailbox !== '') {
      writer.uint32(34).string(message.origin_mailbox);
    }
    if (message.origin_denom !== '') {
      writer.uint32(42).string(message.origin_denom);
    }
    if (message.ism_id !== '') {
      writer.uint32(58).string(message.ism_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WrappedHypToken {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrappedHypToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.token_type = hypTokenTypeFromJSON(reader.int32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.origin_mailbox = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.origin_denom = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.ism_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrappedHypToken {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_type: isSet(object.token_type)
        ? hypTokenTypeFromJSON(object.token_type)
        : HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED,
      origin_mailbox: isSet(object.origin_mailbox)
        ? globalThis.String(object.origin_mailbox)
        : '',
      origin_denom: isSet(object.origin_denom)
        ? globalThis.String(object.origin_denom)
        : '',
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
    };
  },

  toJSON(message: WrappedHypToken): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_type !== HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED) {
      obj.token_type = hypTokenTypeToJSON(message.token_type);
    }
    if (message.origin_mailbox !== '') {
      obj.origin_mailbox = message.origin_mailbox;
    }
    if (message.origin_denom !== '') {
      obj.origin_denom = message.origin_denom;
    }
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WrappedHypToken>, I>>(
    base?: I,
  ): WrappedHypToken {
    return WrappedHypToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WrappedHypToken>, I>>(
    object: I,
  ): WrappedHypToken {
    const message = createBaseWrappedHypToken();
    message.id = object.id ?? '';
    message.owner = object.owner ?? '';
    message.token_type =
      object.token_type ?? HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED;
    message.origin_mailbox = object.origin_mailbox ?? '';
    message.origin_denom = object.origin_denom ?? '';
    message.ism_id = object.ism_id ?? '';
    return message;
  },
};

function createBaseQueryBridgedSupplyRequest(): QueryBridgedSupplyRequest {
  return { id: '' };
}

export const QueryBridgedSupplyRequest = {
  encode(
    message: QueryBridgedSupplyRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryBridgedSupplyRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBridgedSupplyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBridgedSupplyRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: QueryBridgedSupplyRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBridgedSupplyRequest>, I>>(
    base?: I,
  ): QueryBridgedSupplyRequest {
    return QueryBridgedSupplyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBridgedSupplyRequest>, I>>(
    object: I,
  ): QueryBridgedSupplyRequest {
    const message = createBaseQueryBridgedSupplyRequest();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseQueryBridgedSupplyResponse(): QueryBridgedSupplyResponse {
  return { bridged_supply: undefined };
}

export const QueryBridgedSupplyResponse = {
  encode(
    message: QueryBridgedSupplyResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.bridged_supply !== undefined) {
      Coin.encode(message.bridged_supply, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryBridgedSupplyResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBridgedSupplyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.bridged_supply = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBridgedSupplyResponse {
    return {
      bridged_supply: isSet(object.bridged_supply)
        ? Coin.fromJSON(object.bridged_supply)
        : undefined,
    };
  },

  toJSON(message: QueryBridgedSupplyResponse): unknown {
    const obj: any = {};
    if (message.bridged_supply !== undefined) {
      obj.bridged_supply = Coin.toJSON(message.bridged_supply);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBridgedSupplyResponse>, I>>(
    base?: I,
  ): QueryBridgedSupplyResponse {
    return QueryBridgedSupplyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBridgedSupplyResponse>, I>>(
    object: I,
  ): QueryBridgedSupplyResponse {
    const message = createBaseQueryBridgedSupplyResponse();
    message.bridged_supply =
      object.bridged_supply !== undefined && object.bridged_supply !== null
        ? Coin.fromPartial(object.bridged_supply)
        : undefined;
    return message;
  },
};

function createBaseQueryRemoteRoutersRequest(): QueryRemoteRoutersRequest {
  return { id: '', pagination: undefined };
}

export const QueryRemoteRoutersRequest = {
  encode(
    message: QueryRemoteRoutersRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryRemoteRoutersRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRemoteRoutersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRemoteRoutersRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryRemoteRoutersRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRemoteRoutersRequest>, I>>(
    base?: I,
  ): QueryRemoteRoutersRequest {
    return QueryRemoteRoutersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRemoteRoutersRequest>, I>>(
    object: I,
  ): QueryRemoteRoutersRequest {
    const message = createBaseQueryRemoteRoutersRequest();
    message.id = object.id ?? '';
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryRemoteRoutersResponse(): QueryRemoteRoutersResponse {
  return { remote_routers: [], pagination: undefined };
}

export const QueryRemoteRoutersResponse = {
  encode(
    message: QueryRemoteRoutersResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.remote_routers) {
      RemoteRouter.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryRemoteRoutersResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRemoteRoutersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.remote_routers.push(
            RemoteRouter.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRemoteRoutersResponse {
    return {
      remote_routers: globalThis.Array.isArray(object?.remote_routers)
        ? object.remote_routers.map((e: any) => RemoteRouter.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryRemoteRoutersResponse): unknown {
    const obj: any = {};
    if (message.remote_routers?.length) {
      obj.remote_routers = message.remote_routers.map((e) =>
        RemoteRouter.toJSON(e),
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRemoteRoutersResponse>, I>>(
    base?: I,
  ): QueryRemoteRoutersResponse {
    return QueryRemoteRoutersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRemoteRoutersResponse>, I>>(
    object: I,
  ): QueryRemoteRoutersResponse {
    const message = createBaseQueryRemoteRoutersResponse();
    message.remote_routers =
      object.remote_routers?.map((e) => RemoteRouter.fromPartial(e)) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryQuoteRemoteTransferRequest(): QueryQuoteRemoteTransferRequest {
  return { id: '', destination_domain: '' };
}

export const QueryQuoteRemoteTransferRequest = {
  encode(
    message: QueryQuoteRemoteTransferRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.destination_domain !== '') {
      writer.uint32(18).string(message.destination_domain);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryQuoteRemoteTransferRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQuoteRemoteTransferRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destination_domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryQuoteRemoteTransferRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      destination_domain: isSet(object.destination_domain)
        ? globalThis.String(object.destination_domain)
        : '',
    };
  },

  toJSON(message: QueryQuoteRemoteTransferRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.destination_domain !== '') {
      obj.destination_domain = message.destination_domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryQuoteRemoteTransferRequest>, I>>(
    base?: I,
  ): QueryQuoteRemoteTransferRequest {
    return QueryQuoteRemoteTransferRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryQuoteRemoteTransferRequest>, I>>(
    object: I,
  ): QueryQuoteRemoteTransferRequest {
    const message = createBaseQueryQuoteRemoteTransferRequest();
    message.id = object.id ?? '';
    message.destination_domain = object.destination_domain ?? '';
    return message;
  },
};

function createBaseQueryQuoteRemoteTransferResponse(): QueryQuoteRemoteTransferResponse {
  return { gas_payment: [] };
}

export const QueryQuoteRemoteTransferResponse = {
  encode(
    message: QueryQuoteRemoteTransferResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.gas_payment) {
      Coin.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryQuoteRemoteTransferResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQuoteRemoteTransferResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gas_payment.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryQuoteRemoteTransferResponse {
    return {
      gas_payment: globalThis.Array.isArray(object?.gas_payment)
        ? object.gas_payment.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryQuoteRemoteTransferResponse): unknown {
    const obj: any = {};
    if (message.gas_payment?.length) {
      obj.gas_payment = message.gas_payment.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryQuoteRemoteTransferResponse>, I>>(
    base?: I,
  ): QueryQuoteRemoteTransferResponse {
    return QueryQuoteRemoteTransferResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<QueryQuoteRemoteTransferResponse>, I>,
  >(object: I): QueryQuoteRemoteTransferResponse {
    const message = createBaseQueryQuoteRemoteTransferResponse();
    message.gas_payment =
      object.gas_payment?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the module Query service. */
export interface Query {
  /** Tokens ... */
  Tokens(request: QueryTokensRequest): Promise<QueryTokensResponse>;
  /** Token ... */
  Token(request: QueryTokenRequest): Promise<QueryTokenResponse>;
  /** BridgedSupply ... */
  BridgedSupply(
    request: QueryBridgedSupplyRequest,
  ): Promise<QueryBridgedSupplyResponse>;
  /** RemoteRouters ... */
  RemoteRouters(
    request: QueryRemoteRoutersRequest,
  ): Promise<QueryRemoteRoutersResponse>;
  /** QuoteRemoteTransfer ... */
  QuoteRemoteTransfer(
    request: QueryQuoteRemoteTransferRequest,
  ): Promise<QueryQuoteRemoteTransferResponse>;
}

export const QueryServiceName = 'hyperlane.warp.v1.Query';
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Tokens = this.Tokens.bind(this);
    this.Token = this.Token.bind(this);
    this.BridgedSupply = this.BridgedSupply.bind(this);
    this.RemoteRouters = this.RemoteRouters.bind(this);
    this.QuoteRemoteTransfer = this.QuoteRemoteTransfer.bind(this);
  }
  Tokens(request: QueryTokensRequest): Promise<QueryTokensResponse> {
    const data = QueryTokensRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Tokens', data);
    return promise.then((data) =>
      QueryTokensResponse.decode(_m0.Reader.create(data)),
    );
  }

  Token(request: QueryTokenRequest): Promise<QueryTokenResponse> {
    const data = QueryTokenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Token', data);
    return promise.then((data) =>
      QueryTokenResponse.decode(_m0.Reader.create(data)),
    );
  }

  BridgedSupply(
    request: QueryBridgedSupplyRequest,
  ): Promise<QueryBridgedSupplyResponse> {
    const data = QueryBridgedSupplyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'BridgedSupply', data);
    return promise.then((data) =>
      QueryBridgedSupplyResponse.decode(_m0.Reader.create(data)),
    );
  }

  RemoteRouters(
    request: QueryRemoteRoutersRequest,
  ): Promise<QueryRemoteRoutersResponse> {
    const data = QueryRemoteRoutersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'RemoteRouters', data);
    return promise.then((data) =>
      QueryRemoteRoutersResponse.decode(_m0.Reader.create(data)),
    );
  }

  QuoteRemoteTransfer(
    request: QueryQuoteRemoteTransferRequest,
  ): Promise<QueryQuoteRemoteTransferResponse> {
    const data = QueryQuoteRemoteTransferRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'QuoteRemoteTransfer', data);
    return promise.then((data) =>
      QueryQuoteRemoteTransferResponse.decode(_m0.Reader.create(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
