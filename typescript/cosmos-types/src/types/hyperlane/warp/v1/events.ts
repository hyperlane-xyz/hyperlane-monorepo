// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/warp/v1/events.proto

/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

export const protobufPackage = 'hyperlane.warp.v1';

/** RemoteTransfer ... */
export interface RemoteTransfer {
  destination_domain: number;
  recipient_address: string;
}

function createBaseRemoteTransfer(): RemoteTransfer {
  return { destination_domain: 0, recipient_address: '' };
}

export const RemoteTransfer = {
  encode(
    message: RemoteTransfer,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.destination_domain !== 0) {
      writer.uint32(8).uint32(message.destination_domain);
    }
    if (message.recipient_address !== '') {
      writer.uint32(18).string(message.recipient_address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoteTransfer {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.destination_domain = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.recipient_address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoteTransfer {
    return {
      destination_domain: isSet(object.destination_domain)
        ? globalThis.Number(object.destination_domain)
        : 0,
      recipient_address: isSet(object.recipient_address)
        ? globalThis.String(object.recipient_address)
        : '',
    };
  },

  toJSON(message: RemoteTransfer): unknown {
    const obj: any = {};
    if (message.destination_domain !== 0) {
      obj.destination_domain = Math.round(message.destination_domain);
    }
    if (message.recipient_address !== '') {
      obj.recipient_address = message.recipient_address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoteTransfer>, I>>(
    base?: I,
  ): RemoteTransfer {
    return RemoteTransfer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoteTransfer>, I>>(
    object: I,
  ): RemoteTransfer {
    const message = createBaseRemoteTransfer();
    message.destination_domain = object.destination_domain ?? 0;
    message.recipient_address = object.recipient_address ?? '';
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
