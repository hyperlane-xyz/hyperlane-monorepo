// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/warp/v1/tx.proto

/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

import { Coin } from '../../../cosmos/base/v1beta1/coin.js';

import { RemoteRouter } from './types.js';

export const protobufPackage = 'hyperlane.warp.v1';

/** MsgCreateCollateralToken ... */
export interface MsgCreateCollateralToken {
  /** owner is the message sender. */
  owner: string;
  origin_mailbox: string;
  origin_denom: string;
}

/** MsgCreateCollateralTokenResponse ... */
export interface MsgCreateCollateralTokenResponse {
  id: string;
}

/** MsgCreateSyntheticToken ... */
export interface MsgCreateSyntheticToken {
  /** owner is the message sender. */
  owner: string;
  origin_mailbox: string;
}

/** MsgCreateSyntheticTokenResponse ... */
export interface MsgCreateSyntheticTokenResponse {
  id: string;
}

/** MsgSetToken ... */
export interface MsgSetToken {
  /** owner is the message sender. */
  owner: string;
  token_id: string;
  new_owner: string;
  ism_id: string;
}

/** MsgSetTokenResponse ... */
export interface MsgSetTokenResponse {}

/** MsgEnrollRemoteRouter ... */
export interface MsgEnrollRemoteRouter {
  /** owner is the message sender. */
  owner: string;
  token_id: string;
  remote_router?: RemoteRouter | undefined;
}

/** MsgEnrollRemoteRouterResponse ... */
export interface MsgEnrollRemoteRouterResponse {}

/** MsgUnrollRemoteRouter ... */
export interface MsgUnrollRemoteRouter {
  /** owner is the message sender. */
  owner: string;
  token_id: string;
  receiver_domain: number;
}

/** MsgUnrollRemoteRouterResponse ... */
export interface MsgUnrollRemoteRouterResponse {}

/** MsgRemoteTransfer ... */
export interface MsgRemoteTransfer {
  sender: string;
  token_id: string;
  destination_domain: number;
  recipient: string;
  amount: string;
  /** Post Dispatch */
  custom_hook_id: string;
  gas_limit: string;
  max_fee?: Coin | undefined;
  custom_hook_metadata: string;
}

/** MsgRemoteTransferResponse ... */
export interface MsgRemoteTransferResponse {
  message_id: string;
}

function createBaseMsgCreateCollateralToken(): MsgCreateCollateralToken {
  return { owner: '', origin_mailbox: '', origin_denom: '' };
}

export const MsgCreateCollateralToken = {
  encode(
    message: MsgCreateCollateralToken,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.origin_mailbox !== '') {
      writer.uint32(18).string(message.origin_mailbox);
    }
    if (message.origin_denom !== '') {
      writer.uint32(26).string(message.origin_denom);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateCollateralToken {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateCollateralToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.origin_mailbox = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.origin_denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateCollateralToken {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      origin_mailbox: isSet(object.origin_mailbox)
        ? globalThis.String(object.origin_mailbox)
        : '',
      origin_denom: isSet(object.origin_denom)
        ? globalThis.String(object.origin_denom)
        : '',
    };
  },

  toJSON(message: MsgCreateCollateralToken): unknown {
    const obj: any = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.origin_mailbox !== '') {
      obj.origin_mailbox = message.origin_mailbox;
    }
    if (message.origin_denom !== '') {
      obj.origin_denom = message.origin_denom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateCollateralToken>, I>>(
    base?: I,
  ): MsgCreateCollateralToken {
    return MsgCreateCollateralToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateCollateralToken>, I>>(
    object: I,
  ): MsgCreateCollateralToken {
    const message = createBaseMsgCreateCollateralToken();
    message.owner = object.owner ?? '';
    message.origin_mailbox = object.origin_mailbox ?? '';
    message.origin_denom = object.origin_denom ?? '';
    return message;
  },
};

function createBaseMsgCreateCollateralTokenResponse(): MsgCreateCollateralTokenResponse {
  return { id: '' };
}

export const MsgCreateCollateralTokenResponse = {
  encode(
    message: MsgCreateCollateralTokenResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateCollateralTokenResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateCollateralTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateCollateralTokenResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: MsgCreateCollateralTokenResponse): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateCollateralTokenResponse>, I>>(
    base?: I,
  ): MsgCreateCollateralTokenResponse {
    return MsgCreateCollateralTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<MsgCreateCollateralTokenResponse>, I>,
  >(object: I): MsgCreateCollateralTokenResponse {
    const message = createBaseMsgCreateCollateralTokenResponse();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseMsgCreateSyntheticToken(): MsgCreateSyntheticToken {
  return { owner: '', origin_mailbox: '' };
}

export const MsgCreateSyntheticToken = {
  encode(
    message: MsgCreateSyntheticToken,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.origin_mailbox !== '') {
      writer.uint32(18).string(message.origin_mailbox);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateSyntheticToken {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateSyntheticToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.origin_mailbox = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateSyntheticToken {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      origin_mailbox: isSet(object.origin_mailbox)
        ? globalThis.String(object.origin_mailbox)
        : '',
    };
  },

  toJSON(message: MsgCreateSyntheticToken): unknown {
    const obj: any = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.origin_mailbox !== '') {
      obj.origin_mailbox = message.origin_mailbox;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateSyntheticToken>, I>>(
    base?: I,
  ): MsgCreateSyntheticToken {
    return MsgCreateSyntheticToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateSyntheticToken>, I>>(
    object: I,
  ): MsgCreateSyntheticToken {
    const message = createBaseMsgCreateSyntheticToken();
    message.owner = object.owner ?? '';
    message.origin_mailbox = object.origin_mailbox ?? '';
    return message;
  },
};

function createBaseMsgCreateSyntheticTokenResponse(): MsgCreateSyntheticTokenResponse {
  return { id: '' };
}

export const MsgCreateSyntheticTokenResponse = {
  encode(
    message: MsgCreateSyntheticTokenResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateSyntheticTokenResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateSyntheticTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateSyntheticTokenResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: MsgCreateSyntheticTokenResponse): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateSyntheticTokenResponse>, I>>(
    base?: I,
  ): MsgCreateSyntheticTokenResponse {
    return MsgCreateSyntheticTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateSyntheticTokenResponse>, I>>(
    object: I,
  ): MsgCreateSyntheticTokenResponse {
    const message = createBaseMsgCreateSyntheticTokenResponse();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseMsgSetToken(): MsgSetToken {
  return { owner: '', token_id: '', new_owner: '', ism_id: '' };
}

export const MsgSetToken = {
  encode(
    message: MsgSetToken,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.new_owner !== '') {
      writer.uint32(26).string(message.new_owner);
    }
    if (message.ism_id !== '') {
      writer.uint32(34).string(message.ism_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetToken {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.new_owner = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ism_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetToken {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      new_owner: isSet(object.new_owner)
        ? globalThis.String(object.new_owner)
        : '',
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
    };
  },

  toJSON(message: MsgSetToken): unknown {
    const obj: any = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.new_owner !== '') {
      obj.new_owner = message.new_owner;
    }
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetToken>, I>>(base?: I): MsgSetToken {
    return MsgSetToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetToken>, I>>(
    object: I,
  ): MsgSetToken {
    const message = createBaseMsgSetToken();
    message.owner = object.owner ?? '';
    message.token_id = object.token_id ?? '';
    message.new_owner = object.new_owner ?? '';
    message.ism_id = object.ism_id ?? '';
    return message;
  },
};

function createBaseMsgSetTokenResponse(): MsgSetTokenResponse {
  return {};
}

export const MsgSetTokenResponse = {
  encode(
    _: MsgSetTokenResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetTokenResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetTokenResponse {
    return {};
  },

  toJSON(_: MsgSetTokenResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetTokenResponse>, I>>(
    base?: I,
  ): MsgSetTokenResponse {
    return MsgSetTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetTokenResponse>, I>>(
    _: I,
  ): MsgSetTokenResponse {
    const message = createBaseMsgSetTokenResponse();
    return message;
  },
};

function createBaseMsgEnrollRemoteRouter(): MsgEnrollRemoteRouter {
  return { owner: '', token_id: '', remote_router: undefined };
}

export const MsgEnrollRemoteRouter = {
  encode(
    message: MsgEnrollRemoteRouter,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.remote_router !== undefined) {
      RemoteRouter.encode(
        message.remote_router,
        writer.uint32(26).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgEnrollRemoteRouter {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEnrollRemoteRouter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.remote_router = RemoteRouter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgEnrollRemoteRouter {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      remote_router: isSet(object.remote_router)
        ? RemoteRouter.fromJSON(object.remote_router)
        : undefined,
    };
  },

  toJSON(message: MsgEnrollRemoteRouter): unknown {
    const obj: any = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.remote_router !== undefined) {
      obj.remote_router = RemoteRouter.toJSON(message.remote_router);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgEnrollRemoteRouter>, I>>(
    base?: I,
  ): MsgEnrollRemoteRouter {
    return MsgEnrollRemoteRouter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgEnrollRemoteRouter>, I>>(
    object: I,
  ): MsgEnrollRemoteRouter {
    const message = createBaseMsgEnrollRemoteRouter();
    message.owner = object.owner ?? '';
    message.token_id = object.token_id ?? '';
    message.remote_router =
      object.remote_router !== undefined && object.remote_router !== null
        ? RemoteRouter.fromPartial(object.remote_router)
        : undefined;
    return message;
  },
};

function createBaseMsgEnrollRemoteRouterResponse(): MsgEnrollRemoteRouterResponse {
  return {};
}

export const MsgEnrollRemoteRouterResponse = {
  encode(
    _: MsgEnrollRemoteRouterResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgEnrollRemoteRouterResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEnrollRemoteRouterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgEnrollRemoteRouterResponse {
    return {};
  },

  toJSON(_: MsgEnrollRemoteRouterResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgEnrollRemoteRouterResponse>, I>>(
    base?: I,
  ): MsgEnrollRemoteRouterResponse {
    return MsgEnrollRemoteRouterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgEnrollRemoteRouterResponse>, I>>(
    _: I,
  ): MsgEnrollRemoteRouterResponse {
    const message = createBaseMsgEnrollRemoteRouterResponse();
    return message;
  },
};

function createBaseMsgUnrollRemoteRouter(): MsgUnrollRemoteRouter {
  return { owner: '', token_id: '', receiver_domain: 0 };
}

export const MsgUnrollRemoteRouter = {
  encode(
    message: MsgUnrollRemoteRouter,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.receiver_domain !== 0) {
      writer.uint32(24).uint32(message.receiver_domain);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgUnrollRemoteRouter {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnrollRemoteRouter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.receiver_domain = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUnrollRemoteRouter {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      receiver_domain: isSet(object.receiver_domain)
        ? globalThis.Number(object.receiver_domain)
        : 0,
    };
  },

  toJSON(message: MsgUnrollRemoteRouter): unknown {
    const obj: any = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.receiver_domain !== 0) {
      obj.receiver_domain = Math.round(message.receiver_domain);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUnrollRemoteRouter>, I>>(
    base?: I,
  ): MsgUnrollRemoteRouter {
    return MsgUnrollRemoteRouter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUnrollRemoteRouter>, I>>(
    object: I,
  ): MsgUnrollRemoteRouter {
    const message = createBaseMsgUnrollRemoteRouter();
    message.owner = object.owner ?? '';
    message.token_id = object.token_id ?? '';
    message.receiver_domain = object.receiver_domain ?? 0;
    return message;
  },
};

function createBaseMsgUnrollRemoteRouterResponse(): MsgUnrollRemoteRouterResponse {
  return {};
}

export const MsgUnrollRemoteRouterResponse = {
  encode(
    _: MsgUnrollRemoteRouterResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgUnrollRemoteRouterResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnrollRemoteRouterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUnrollRemoteRouterResponse {
    return {};
  },

  toJSON(_: MsgUnrollRemoteRouterResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUnrollRemoteRouterResponse>, I>>(
    base?: I,
  ): MsgUnrollRemoteRouterResponse {
    return MsgUnrollRemoteRouterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUnrollRemoteRouterResponse>, I>>(
    _: I,
  ): MsgUnrollRemoteRouterResponse {
    const message = createBaseMsgUnrollRemoteRouterResponse();
    return message;
  },
};

function createBaseMsgRemoteTransfer(): MsgRemoteTransfer {
  return {
    sender: '',
    token_id: '',
    destination_domain: 0,
    recipient: '',
    amount: '',
    custom_hook_id: '',
    gas_limit: '',
    max_fee: undefined,
    custom_hook_metadata: '',
  };
}

export const MsgRemoteTransfer = {
  encode(
    message: MsgRemoteTransfer,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.sender !== '') {
      writer.uint32(10).string(message.sender);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.destination_domain !== 0) {
      writer.uint32(24).uint32(message.destination_domain);
    }
    if (message.recipient !== '') {
      writer.uint32(34).string(message.recipient);
    }
    if (message.amount !== '') {
      writer.uint32(42).string(message.amount);
    }
    if (message.custom_hook_id !== '') {
      writer.uint32(50).string(message.custom_hook_id);
    }
    if (message.gas_limit !== '') {
      writer.uint32(58).string(message.gas_limit);
    }
    if (message.max_fee !== undefined) {
      Coin.encode(message.max_fee, writer.uint32(66).fork()).ldelim();
    }
    if (message.custom_hook_metadata !== '') {
      writer.uint32(74).string(message.custom_hook_metadata);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoteTransfer {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoteTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.destination_domain = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.recipient = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.custom_hook_id = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.gas_limit = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.max_fee = Coin.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.custom_hook_metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoteTransfer {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      destination_domain: isSet(object.destination_domain)
        ? globalThis.Number(object.destination_domain)
        : 0,
      recipient: isSet(object.recipient)
        ? globalThis.String(object.recipient)
        : '',
      amount: isSet(object.amount) ? globalThis.String(object.amount) : '',
      custom_hook_id: isSet(object.custom_hook_id)
        ? globalThis.String(object.custom_hook_id)
        : '',
      gas_limit: isSet(object.gas_limit)
        ? globalThis.String(object.gas_limit)
        : '',
      max_fee: isSet(object.max_fee)
        ? Coin.fromJSON(object.max_fee)
        : undefined,
      custom_hook_metadata: isSet(object.custom_hook_metadata)
        ? globalThis.String(object.custom_hook_metadata)
        : '',
    };
  },

  toJSON(message: MsgRemoteTransfer): unknown {
    const obj: any = {};
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.destination_domain !== 0) {
      obj.destination_domain = Math.round(message.destination_domain);
    }
    if (message.recipient !== '') {
      obj.recipient = message.recipient;
    }
    if (message.amount !== '') {
      obj.amount = message.amount;
    }
    if (message.custom_hook_id !== '') {
      obj.custom_hook_id = message.custom_hook_id;
    }
    if (message.gas_limit !== '') {
      obj.gas_limit = message.gas_limit;
    }
    if (message.max_fee !== undefined) {
      obj.max_fee = Coin.toJSON(message.max_fee);
    }
    if (message.custom_hook_metadata !== '') {
      obj.custom_hook_metadata = message.custom_hook_metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoteTransfer>, I>>(
    base?: I,
  ): MsgRemoteTransfer {
    return MsgRemoteTransfer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoteTransfer>, I>>(
    object: I,
  ): MsgRemoteTransfer {
    const message = createBaseMsgRemoteTransfer();
    message.sender = object.sender ?? '';
    message.token_id = object.token_id ?? '';
    message.destination_domain = object.destination_domain ?? 0;
    message.recipient = object.recipient ?? '';
    message.amount = object.amount ?? '';
    message.custom_hook_id = object.custom_hook_id ?? '';
    message.gas_limit = object.gas_limit ?? '';
    message.max_fee =
      object.max_fee !== undefined && object.max_fee !== null
        ? Coin.fromPartial(object.max_fee)
        : undefined;
    message.custom_hook_metadata = object.custom_hook_metadata ?? '';
    return message;
  },
};

function createBaseMsgRemoteTransferResponse(): MsgRemoteTransferResponse {
  return { message_id: '' };
}

export const MsgRemoteTransferResponse = {
  encode(
    message: MsgRemoteTransferResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.message_id !== '') {
      writer.uint32(10).string(message.message_id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgRemoteTransferResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoteTransferResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoteTransferResponse {
    return {
      message_id: isSet(object.message_id)
        ? globalThis.String(object.message_id)
        : '',
    };
  },

  toJSON(message: MsgRemoteTransferResponse): unknown {
    const obj: any = {};
    if (message.message_id !== '') {
      obj.message_id = message.message_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoteTransferResponse>, I>>(
    base?: I,
  ): MsgRemoteTransferResponse {
    return MsgRemoteTransferResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoteTransferResponse>, I>>(
    object: I,
  ): MsgRemoteTransferResponse {
    const message = createBaseMsgRemoteTransferResponse();
    message.message_id = object.message_id ?? '';
    return message;
  },
};

/** Msg defines the module Msg service. */
export interface Msg {
  /** CreateCollateralToken ... */
  CreateCollateralToken(
    request: MsgCreateCollateralToken,
  ): Promise<MsgCreateCollateralTokenResponse>;
  /** CreateSyntheticToken ... */
  CreateSyntheticToken(
    request: MsgCreateSyntheticToken,
  ): Promise<MsgCreateSyntheticTokenResponse>;
  /** SetToken ... */
  SetToken(request: MsgSetToken): Promise<MsgSetTokenResponse>;
  /** EnrollRemoteRouter ... */
  EnrollRemoteRouter(
    request: MsgEnrollRemoteRouter,
  ): Promise<MsgEnrollRemoteRouterResponse>;
  /** UnrollRemoteRouter ... */
  UnrollRemoteRouter(
    request: MsgUnrollRemoteRouter,
  ): Promise<MsgUnrollRemoteRouterResponse>;
  /** RemoteTransfer ... */
  RemoteTransfer(
    request: MsgRemoteTransfer,
  ): Promise<MsgRemoteTransferResponse>;
}

export const MsgServiceName = 'hyperlane.warp.v1.Msg';
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateCollateralToken = this.CreateCollateralToken.bind(this);
    this.CreateSyntheticToken = this.CreateSyntheticToken.bind(this);
    this.SetToken = this.SetToken.bind(this);
    this.EnrollRemoteRouter = this.EnrollRemoteRouter.bind(this);
    this.UnrollRemoteRouter = this.UnrollRemoteRouter.bind(this);
    this.RemoteTransfer = this.RemoteTransfer.bind(this);
  }
  CreateCollateralToken(
    request: MsgCreateCollateralToken,
  ): Promise<MsgCreateCollateralTokenResponse> {
    const data = MsgCreateCollateralToken.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateCollateralToken',
      data,
    );
    return promise.then((data) =>
      MsgCreateCollateralTokenResponse.decode(_m0.Reader.create(data)),
    );
  }

  CreateSyntheticToken(
    request: MsgCreateSyntheticToken,
  ): Promise<MsgCreateSyntheticTokenResponse> {
    const data = MsgCreateSyntheticToken.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateSyntheticToken',
      data,
    );
    return promise.then((data) =>
      MsgCreateSyntheticTokenResponse.decode(_m0.Reader.create(data)),
    );
  }

  SetToken(request: MsgSetToken): Promise<MsgSetTokenResponse> {
    const data = MsgSetToken.encode(request).finish();
    const promise = this.rpc.request(this.service, 'SetToken', data);
    return promise.then((data) =>
      MsgSetTokenResponse.decode(_m0.Reader.create(data)),
    );
  }

  EnrollRemoteRouter(
    request: MsgEnrollRemoteRouter,
  ): Promise<MsgEnrollRemoteRouterResponse> {
    const data = MsgEnrollRemoteRouter.encode(request).finish();
    const promise = this.rpc.request(this.service, 'EnrollRemoteRouter', data);
    return promise.then((data) =>
      MsgEnrollRemoteRouterResponse.decode(_m0.Reader.create(data)),
    );
  }

  UnrollRemoteRouter(
    request: MsgUnrollRemoteRouter,
  ): Promise<MsgUnrollRemoteRouterResponse> {
    const data = MsgUnrollRemoteRouter.encode(request).finish();
    const promise = this.rpc.request(this.service, 'UnrollRemoteRouter', data);
    return promise.then((data) =>
      MsgUnrollRemoteRouterResponse.decode(_m0.Reader.create(data)),
    );
  }

  RemoteTransfer(
    request: MsgRemoteTransfer,
  ): Promise<MsgRemoteTransferResponse> {
    const data = MsgRemoteTransfer.encode(request).finish();
    const promise = this.rpc.request(this.service, 'RemoteTransfer', data);
    return promise.then((data) =>
      MsgRemoteTransferResponse.decode(_m0.Reader.create(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
