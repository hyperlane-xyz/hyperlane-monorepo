// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: google/protobuf/descriptor.proto
/* eslint-disable */
import Long from 'long';
import _m0 from 'protobufjs/minimal.js';

export const protobufPackage = 'google.protobuf';
/** The verification state of the extension range. */
export var ExtensionRangeOptions_VerificationState;
(function (ExtensionRangeOptions_VerificationState) {
  /** DECLARATION - All the extensions of the range must be declared. */
  ExtensionRangeOptions_VerificationState['DECLARATION'] = 'DECLARATION';
  ExtensionRangeOptions_VerificationState['UNVERIFIED'] = 'UNVERIFIED';
  ExtensionRangeOptions_VerificationState['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(
  ExtensionRangeOptions_VerificationState ||
    (ExtensionRangeOptions_VerificationState = {}),
);
export function extensionRangeOptions_VerificationStateFromJSON(object) {
  switch (object) {
    case 0:
    case 'DECLARATION':
      return ExtensionRangeOptions_VerificationState.DECLARATION;
    case 1:
    case 'UNVERIFIED':
      return ExtensionRangeOptions_VerificationState.UNVERIFIED;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return ExtensionRangeOptions_VerificationState.UNRECOGNIZED;
  }
}
export function extensionRangeOptions_VerificationStateToJSON(object) {
  switch (object) {
    case ExtensionRangeOptions_VerificationState.DECLARATION:
      return 'DECLARATION';
    case ExtensionRangeOptions_VerificationState.UNVERIFIED:
      return 'UNVERIFIED';
    case ExtensionRangeOptions_VerificationState.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function extensionRangeOptions_VerificationStateToNumber(object) {
  switch (object) {
    case ExtensionRangeOptions_VerificationState.DECLARATION:
      return 0;
    case ExtensionRangeOptions_VerificationState.UNVERIFIED:
      return 1;
    case ExtensionRangeOptions_VerificationState.UNRECOGNIZED:
    default:
      return -1;
  }
}
export var FieldDescriptorProto_Type;
(function (FieldDescriptorProto_Type) {
  /**
   * TYPE_DOUBLE - 0 is reserved for errors.
   * Order is weird for historical reasons.
   */
  FieldDescriptorProto_Type['TYPE_DOUBLE'] = 'TYPE_DOUBLE';
  FieldDescriptorProto_Type['TYPE_FLOAT'] = 'TYPE_FLOAT';
  /**
   * TYPE_INT64 - Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
   * negative values are likely.
   */
  FieldDescriptorProto_Type['TYPE_INT64'] = 'TYPE_INT64';
  FieldDescriptorProto_Type['TYPE_UINT64'] = 'TYPE_UINT64';
  /**
   * TYPE_INT32 - Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
   * negative values are likely.
   */
  FieldDescriptorProto_Type['TYPE_INT32'] = 'TYPE_INT32';
  FieldDescriptorProto_Type['TYPE_FIXED64'] = 'TYPE_FIXED64';
  FieldDescriptorProto_Type['TYPE_FIXED32'] = 'TYPE_FIXED32';
  FieldDescriptorProto_Type['TYPE_BOOL'] = 'TYPE_BOOL';
  FieldDescriptorProto_Type['TYPE_STRING'] = 'TYPE_STRING';
  /**
   * TYPE_GROUP - Tag-delimited aggregate.
   * Group type is deprecated and not supported in proto3. However, Proto3
   * implementations should still be able to parse the group wire format and
   * treat group fields as unknown fields.
   */
  FieldDescriptorProto_Type['TYPE_GROUP'] = 'TYPE_GROUP';
  /** TYPE_MESSAGE - Length-delimited aggregate. */
  FieldDescriptorProto_Type['TYPE_MESSAGE'] = 'TYPE_MESSAGE';
  /** TYPE_BYTES - New in version 2. */
  FieldDescriptorProto_Type['TYPE_BYTES'] = 'TYPE_BYTES';
  FieldDescriptorProto_Type['TYPE_UINT32'] = 'TYPE_UINT32';
  FieldDescriptorProto_Type['TYPE_ENUM'] = 'TYPE_ENUM';
  FieldDescriptorProto_Type['TYPE_SFIXED32'] = 'TYPE_SFIXED32';
  FieldDescriptorProto_Type['TYPE_SFIXED64'] = 'TYPE_SFIXED64';
  /** TYPE_SINT32 - Uses ZigZag encoding. */
  FieldDescriptorProto_Type['TYPE_SINT32'] = 'TYPE_SINT32';
  /** TYPE_SINT64 - Uses ZigZag encoding. */
  FieldDescriptorProto_Type['TYPE_SINT64'] = 'TYPE_SINT64';
  FieldDescriptorProto_Type['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(FieldDescriptorProto_Type || (FieldDescriptorProto_Type = {}));
export function fieldDescriptorProto_TypeFromJSON(object) {
  switch (object) {
    case 1:
    case 'TYPE_DOUBLE':
      return FieldDescriptorProto_Type.TYPE_DOUBLE;
    case 2:
    case 'TYPE_FLOAT':
      return FieldDescriptorProto_Type.TYPE_FLOAT;
    case 3:
    case 'TYPE_INT64':
      return FieldDescriptorProto_Type.TYPE_INT64;
    case 4:
    case 'TYPE_UINT64':
      return FieldDescriptorProto_Type.TYPE_UINT64;
    case 5:
    case 'TYPE_INT32':
      return FieldDescriptorProto_Type.TYPE_INT32;
    case 6:
    case 'TYPE_FIXED64':
      return FieldDescriptorProto_Type.TYPE_FIXED64;
    case 7:
    case 'TYPE_FIXED32':
      return FieldDescriptorProto_Type.TYPE_FIXED32;
    case 8:
    case 'TYPE_BOOL':
      return FieldDescriptorProto_Type.TYPE_BOOL;
    case 9:
    case 'TYPE_STRING':
      return FieldDescriptorProto_Type.TYPE_STRING;
    case 10:
    case 'TYPE_GROUP':
      return FieldDescriptorProto_Type.TYPE_GROUP;
    case 11:
    case 'TYPE_MESSAGE':
      return FieldDescriptorProto_Type.TYPE_MESSAGE;
    case 12:
    case 'TYPE_BYTES':
      return FieldDescriptorProto_Type.TYPE_BYTES;
    case 13:
    case 'TYPE_UINT32':
      return FieldDescriptorProto_Type.TYPE_UINT32;
    case 14:
    case 'TYPE_ENUM':
      return FieldDescriptorProto_Type.TYPE_ENUM;
    case 15:
    case 'TYPE_SFIXED32':
      return FieldDescriptorProto_Type.TYPE_SFIXED32;
    case 16:
    case 'TYPE_SFIXED64':
      return FieldDescriptorProto_Type.TYPE_SFIXED64;
    case 17:
    case 'TYPE_SINT32':
      return FieldDescriptorProto_Type.TYPE_SINT32;
    case 18:
    case 'TYPE_SINT64':
      return FieldDescriptorProto_Type.TYPE_SINT64;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return FieldDescriptorProto_Type.UNRECOGNIZED;
  }
}
export function fieldDescriptorProto_TypeToJSON(object) {
  switch (object) {
    case FieldDescriptorProto_Type.TYPE_DOUBLE:
      return 'TYPE_DOUBLE';
    case FieldDescriptorProto_Type.TYPE_FLOAT:
      return 'TYPE_FLOAT';
    case FieldDescriptorProto_Type.TYPE_INT64:
      return 'TYPE_INT64';
    case FieldDescriptorProto_Type.TYPE_UINT64:
      return 'TYPE_UINT64';
    case FieldDescriptorProto_Type.TYPE_INT32:
      return 'TYPE_INT32';
    case FieldDescriptorProto_Type.TYPE_FIXED64:
      return 'TYPE_FIXED64';
    case FieldDescriptorProto_Type.TYPE_FIXED32:
      return 'TYPE_FIXED32';
    case FieldDescriptorProto_Type.TYPE_BOOL:
      return 'TYPE_BOOL';
    case FieldDescriptorProto_Type.TYPE_STRING:
      return 'TYPE_STRING';
    case FieldDescriptorProto_Type.TYPE_GROUP:
      return 'TYPE_GROUP';
    case FieldDescriptorProto_Type.TYPE_MESSAGE:
      return 'TYPE_MESSAGE';
    case FieldDescriptorProto_Type.TYPE_BYTES:
      return 'TYPE_BYTES';
    case FieldDescriptorProto_Type.TYPE_UINT32:
      return 'TYPE_UINT32';
    case FieldDescriptorProto_Type.TYPE_ENUM:
      return 'TYPE_ENUM';
    case FieldDescriptorProto_Type.TYPE_SFIXED32:
      return 'TYPE_SFIXED32';
    case FieldDescriptorProto_Type.TYPE_SFIXED64:
      return 'TYPE_SFIXED64';
    case FieldDescriptorProto_Type.TYPE_SINT32:
      return 'TYPE_SINT32';
    case FieldDescriptorProto_Type.TYPE_SINT64:
      return 'TYPE_SINT64';
    case FieldDescriptorProto_Type.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function fieldDescriptorProto_TypeToNumber(object) {
  switch (object) {
    case FieldDescriptorProto_Type.TYPE_DOUBLE:
      return 1;
    case FieldDescriptorProto_Type.TYPE_FLOAT:
      return 2;
    case FieldDescriptorProto_Type.TYPE_INT64:
      return 3;
    case FieldDescriptorProto_Type.TYPE_UINT64:
      return 4;
    case FieldDescriptorProto_Type.TYPE_INT32:
      return 5;
    case FieldDescriptorProto_Type.TYPE_FIXED64:
      return 6;
    case FieldDescriptorProto_Type.TYPE_FIXED32:
      return 7;
    case FieldDescriptorProto_Type.TYPE_BOOL:
      return 8;
    case FieldDescriptorProto_Type.TYPE_STRING:
      return 9;
    case FieldDescriptorProto_Type.TYPE_GROUP:
      return 10;
    case FieldDescriptorProto_Type.TYPE_MESSAGE:
      return 11;
    case FieldDescriptorProto_Type.TYPE_BYTES:
      return 12;
    case FieldDescriptorProto_Type.TYPE_UINT32:
      return 13;
    case FieldDescriptorProto_Type.TYPE_ENUM:
      return 14;
    case FieldDescriptorProto_Type.TYPE_SFIXED32:
      return 15;
    case FieldDescriptorProto_Type.TYPE_SFIXED64:
      return 16;
    case FieldDescriptorProto_Type.TYPE_SINT32:
      return 17;
    case FieldDescriptorProto_Type.TYPE_SINT64:
      return 18;
    case FieldDescriptorProto_Type.UNRECOGNIZED:
    default:
      return -1;
  }
}
export var FieldDescriptorProto_Label;
(function (FieldDescriptorProto_Label) {
  /** LABEL_OPTIONAL - 0 is reserved for errors */
  FieldDescriptorProto_Label['LABEL_OPTIONAL'] = 'LABEL_OPTIONAL';
  FieldDescriptorProto_Label['LABEL_REQUIRED'] = 'LABEL_REQUIRED';
  FieldDescriptorProto_Label['LABEL_REPEATED'] = 'LABEL_REPEATED';
  FieldDescriptorProto_Label['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(FieldDescriptorProto_Label || (FieldDescriptorProto_Label = {}));
export function fieldDescriptorProto_LabelFromJSON(object) {
  switch (object) {
    case 1:
    case 'LABEL_OPTIONAL':
      return FieldDescriptorProto_Label.LABEL_OPTIONAL;
    case 2:
    case 'LABEL_REQUIRED':
      return FieldDescriptorProto_Label.LABEL_REQUIRED;
    case 3:
    case 'LABEL_REPEATED':
      return FieldDescriptorProto_Label.LABEL_REPEATED;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return FieldDescriptorProto_Label.UNRECOGNIZED;
  }
}
export function fieldDescriptorProto_LabelToJSON(object) {
  switch (object) {
    case FieldDescriptorProto_Label.LABEL_OPTIONAL:
      return 'LABEL_OPTIONAL';
    case FieldDescriptorProto_Label.LABEL_REQUIRED:
      return 'LABEL_REQUIRED';
    case FieldDescriptorProto_Label.LABEL_REPEATED:
      return 'LABEL_REPEATED';
    case FieldDescriptorProto_Label.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function fieldDescriptorProto_LabelToNumber(object) {
  switch (object) {
    case FieldDescriptorProto_Label.LABEL_OPTIONAL:
      return 1;
    case FieldDescriptorProto_Label.LABEL_REQUIRED:
      return 2;
    case FieldDescriptorProto_Label.LABEL_REPEATED:
      return 3;
    case FieldDescriptorProto_Label.UNRECOGNIZED:
    default:
      return -1;
  }
}
/** Generated classes can be optimized for speed or code size. */
export var FileOptions_OptimizeMode;
(function (FileOptions_OptimizeMode) {
  /** SPEED - Generate complete code for parsing, serialization, */
  FileOptions_OptimizeMode['SPEED'] = 'SPEED';
  /** CODE_SIZE - etc. */
  FileOptions_OptimizeMode['CODE_SIZE'] = 'CODE_SIZE';
  /** LITE_RUNTIME - Generate code using MessageLite and the lite runtime. */
  FileOptions_OptimizeMode['LITE_RUNTIME'] = 'LITE_RUNTIME';
  FileOptions_OptimizeMode['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(FileOptions_OptimizeMode || (FileOptions_OptimizeMode = {}));
export function fileOptions_OptimizeModeFromJSON(object) {
  switch (object) {
    case 1:
    case 'SPEED':
      return FileOptions_OptimizeMode.SPEED;
    case 2:
    case 'CODE_SIZE':
      return FileOptions_OptimizeMode.CODE_SIZE;
    case 3:
    case 'LITE_RUNTIME':
      return FileOptions_OptimizeMode.LITE_RUNTIME;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return FileOptions_OptimizeMode.UNRECOGNIZED;
  }
}
export function fileOptions_OptimizeModeToJSON(object) {
  switch (object) {
    case FileOptions_OptimizeMode.SPEED:
      return 'SPEED';
    case FileOptions_OptimizeMode.CODE_SIZE:
      return 'CODE_SIZE';
    case FileOptions_OptimizeMode.LITE_RUNTIME:
      return 'LITE_RUNTIME';
    case FileOptions_OptimizeMode.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function fileOptions_OptimizeModeToNumber(object) {
  switch (object) {
    case FileOptions_OptimizeMode.SPEED:
      return 1;
    case FileOptions_OptimizeMode.CODE_SIZE:
      return 2;
    case FileOptions_OptimizeMode.LITE_RUNTIME:
      return 3;
    case FileOptions_OptimizeMode.UNRECOGNIZED:
    default:
      return -1;
  }
}
export var FieldOptions_CType;
(function (FieldOptions_CType) {
  /** STRING - Default mode. */
  FieldOptions_CType['STRING'] = 'STRING';
  /**
   * CORD - The option [ctype=CORD] may be applied to a non-repeated field of type
   * "bytes". It indicates that in C++, the data should be stored in a Cord
   * instead of a string.  For very large strings, this may reduce memory
   * fragmentation. It may also allow better performance when parsing from a
   * Cord, or when parsing with aliasing enabled, as the parsed Cord may then
   * alias the original buffer.
   */
  FieldOptions_CType['CORD'] = 'CORD';
  FieldOptions_CType['STRING_PIECE'] = 'STRING_PIECE';
  FieldOptions_CType['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(FieldOptions_CType || (FieldOptions_CType = {}));
export function fieldOptions_CTypeFromJSON(object) {
  switch (object) {
    case 0:
    case 'STRING':
      return FieldOptions_CType.STRING;
    case 1:
    case 'CORD':
      return FieldOptions_CType.CORD;
    case 2:
    case 'STRING_PIECE':
      return FieldOptions_CType.STRING_PIECE;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return FieldOptions_CType.UNRECOGNIZED;
  }
}
export function fieldOptions_CTypeToJSON(object) {
  switch (object) {
    case FieldOptions_CType.STRING:
      return 'STRING';
    case FieldOptions_CType.CORD:
      return 'CORD';
    case FieldOptions_CType.STRING_PIECE:
      return 'STRING_PIECE';
    case FieldOptions_CType.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function fieldOptions_CTypeToNumber(object) {
  switch (object) {
    case FieldOptions_CType.STRING:
      return 0;
    case FieldOptions_CType.CORD:
      return 1;
    case FieldOptions_CType.STRING_PIECE:
      return 2;
    case FieldOptions_CType.UNRECOGNIZED:
    default:
      return -1;
  }
}
export var FieldOptions_JSType;
(function (FieldOptions_JSType) {
  /** JS_NORMAL - Use the default type. */
  FieldOptions_JSType['JS_NORMAL'] = 'JS_NORMAL';
  /** JS_STRING - Use JavaScript strings. */
  FieldOptions_JSType['JS_STRING'] = 'JS_STRING';
  /** JS_NUMBER - Use JavaScript numbers. */
  FieldOptions_JSType['JS_NUMBER'] = 'JS_NUMBER';
  FieldOptions_JSType['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(FieldOptions_JSType || (FieldOptions_JSType = {}));
export function fieldOptions_JSTypeFromJSON(object) {
  switch (object) {
    case 0:
    case 'JS_NORMAL':
      return FieldOptions_JSType.JS_NORMAL;
    case 1:
    case 'JS_STRING':
      return FieldOptions_JSType.JS_STRING;
    case 2:
    case 'JS_NUMBER':
      return FieldOptions_JSType.JS_NUMBER;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return FieldOptions_JSType.UNRECOGNIZED;
  }
}
export function fieldOptions_JSTypeToJSON(object) {
  switch (object) {
    case FieldOptions_JSType.JS_NORMAL:
      return 'JS_NORMAL';
    case FieldOptions_JSType.JS_STRING:
      return 'JS_STRING';
    case FieldOptions_JSType.JS_NUMBER:
      return 'JS_NUMBER';
    case FieldOptions_JSType.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function fieldOptions_JSTypeToNumber(object) {
  switch (object) {
    case FieldOptions_JSType.JS_NORMAL:
      return 0;
    case FieldOptions_JSType.JS_STRING:
      return 1;
    case FieldOptions_JSType.JS_NUMBER:
      return 2;
    case FieldOptions_JSType.UNRECOGNIZED:
    default:
      return -1;
  }
}
/**
 * If set to RETENTION_SOURCE, the option will be omitted from the binary.
 * Note: as of January 2023, support for this is in progress and does not yet
 * have an effect (b/264593489).
 */
export var FieldOptions_OptionRetention;
(function (FieldOptions_OptionRetention) {
  FieldOptions_OptionRetention['RETENTION_UNKNOWN'] = 'RETENTION_UNKNOWN';
  FieldOptions_OptionRetention['RETENTION_RUNTIME'] = 'RETENTION_RUNTIME';
  FieldOptions_OptionRetention['RETENTION_SOURCE'] = 'RETENTION_SOURCE';
  FieldOptions_OptionRetention['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(FieldOptions_OptionRetention || (FieldOptions_OptionRetention = {}));
export function fieldOptions_OptionRetentionFromJSON(object) {
  switch (object) {
    case 0:
    case 'RETENTION_UNKNOWN':
      return FieldOptions_OptionRetention.RETENTION_UNKNOWN;
    case 1:
    case 'RETENTION_RUNTIME':
      return FieldOptions_OptionRetention.RETENTION_RUNTIME;
    case 2:
    case 'RETENTION_SOURCE':
      return FieldOptions_OptionRetention.RETENTION_SOURCE;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return FieldOptions_OptionRetention.UNRECOGNIZED;
  }
}
export function fieldOptions_OptionRetentionToJSON(object) {
  switch (object) {
    case FieldOptions_OptionRetention.RETENTION_UNKNOWN:
      return 'RETENTION_UNKNOWN';
    case FieldOptions_OptionRetention.RETENTION_RUNTIME:
      return 'RETENTION_RUNTIME';
    case FieldOptions_OptionRetention.RETENTION_SOURCE:
      return 'RETENTION_SOURCE';
    case FieldOptions_OptionRetention.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function fieldOptions_OptionRetentionToNumber(object) {
  switch (object) {
    case FieldOptions_OptionRetention.RETENTION_UNKNOWN:
      return 0;
    case FieldOptions_OptionRetention.RETENTION_RUNTIME:
      return 1;
    case FieldOptions_OptionRetention.RETENTION_SOURCE:
      return 2;
    case FieldOptions_OptionRetention.UNRECOGNIZED:
    default:
      return -1;
  }
}
/**
 * This indicates the types of entities that the field may apply to when used
 * as an option. If it is unset, then the field may be freely used as an
 * option on any kind of entity. Note: as of January 2023, support for this is
 * in progress and does not yet have an effect (b/264593489).
 */
export var FieldOptions_OptionTargetType;
(function (FieldOptions_OptionTargetType) {
  FieldOptions_OptionTargetType['TARGET_TYPE_UNKNOWN'] = 'TARGET_TYPE_UNKNOWN';
  FieldOptions_OptionTargetType['TARGET_TYPE_FILE'] = 'TARGET_TYPE_FILE';
  FieldOptions_OptionTargetType['TARGET_TYPE_EXTENSION_RANGE'] =
    'TARGET_TYPE_EXTENSION_RANGE';
  FieldOptions_OptionTargetType['TARGET_TYPE_MESSAGE'] = 'TARGET_TYPE_MESSAGE';
  FieldOptions_OptionTargetType['TARGET_TYPE_FIELD'] = 'TARGET_TYPE_FIELD';
  FieldOptions_OptionTargetType['TARGET_TYPE_ONEOF'] = 'TARGET_TYPE_ONEOF';
  FieldOptions_OptionTargetType['TARGET_TYPE_ENUM'] = 'TARGET_TYPE_ENUM';
  FieldOptions_OptionTargetType['TARGET_TYPE_ENUM_ENTRY'] =
    'TARGET_TYPE_ENUM_ENTRY';
  FieldOptions_OptionTargetType['TARGET_TYPE_SERVICE'] = 'TARGET_TYPE_SERVICE';
  FieldOptions_OptionTargetType['TARGET_TYPE_METHOD'] = 'TARGET_TYPE_METHOD';
  FieldOptions_OptionTargetType['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(FieldOptions_OptionTargetType || (FieldOptions_OptionTargetType = {}));
export function fieldOptions_OptionTargetTypeFromJSON(object) {
  switch (object) {
    case 0:
    case 'TARGET_TYPE_UNKNOWN':
      return FieldOptions_OptionTargetType.TARGET_TYPE_UNKNOWN;
    case 1:
    case 'TARGET_TYPE_FILE':
      return FieldOptions_OptionTargetType.TARGET_TYPE_FILE;
    case 2:
    case 'TARGET_TYPE_EXTENSION_RANGE':
      return FieldOptions_OptionTargetType.TARGET_TYPE_EXTENSION_RANGE;
    case 3:
    case 'TARGET_TYPE_MESSAGE':
      return FieldOptions_OptionTargetType.TARGET_TYPE_MESSAGE;
    case 4:
    case 'TARGET_TYPE_FIELD':
      return FieldOptions_OptionTargetType.TARGET_TYPE_FIELD;
    case 5:
    case 'TARGET_TYPE_ONEOF':
      return FieldOptions_OptionTargetType.TARGET_TYPE_ONEOF;
    case 6:
    case 'TARGET_TYPE_ENUM':
      return FieldOptions_OptionTargetType.TARGET_TYPE_ENUM;
    case 7:
    case 'TARGET_TYPE_ENUM_ENTRY':
      return FieldOptions_OptionTargetType.TARGET_TYPE_ENUM_ENTRY;
    case 8:
    case 'TARGET_TYPE_SERVICE':
      return FieldOptions_OptionTargetType.TARGET_TYPE_SERVICE;
    case 9:
    case 'TARGET_TYPE_METHOD':
      return FieldOptions_OptionTargetType.TARGET_TYPE_METHOD;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return FieldOptions_OptionTargetType.UNRECOGNIZED;
  }
}
export function fieldOptions_OptionTargetTypeToJSON(object) {
  switch (object) {
    case FieldOptions_OptionTargetType.TARGET_TYPE_UNKNOWN:
      return 'TARGET_TYPE_UNKNOWN';
    case FieldOptions_OptionTargetType.TARGET_TYPE_FILE:
      return 'TARGET_TYPE_FILE';
    case FieldOptions_OptionTargetType.TARGET_TYPE_EXTENSION_RANGE:
      return 'TARGET_TYPE_EXTENSION_RANGE';
    case FieldOptions_OptionTargetType.TARGET_TYPE_MESSAGE:
      return 'TARGET_TYPE_MESSAGE';
    case FieldOptions_OptionTargetType.TARGET_TYPE_FIELD:
      return 'TARGET_TYPE_FIELD';
    case FieldOptions_OptionTargetType.TARGET_TYPE_ONEOF:
      return 'TARGET_TYPE_ONEOF';
    case FieldOptions_OptionTargetType.TARGET_TYPE_ENUM:
      return 'TARGET_TYPE_ENUM';
    case FieldOptions_OptionTargetType.TARGET_TYPE_ENUM_ENTRY:
      return 'TARGET_TYPE_ENUM_ENTRY';
    case FieldOptions_OptionTargetType.TARGET_TYPE_SERVICE:
      return 'TARGET_TYPE_SERVICE';
    case FieldOptions_OptionTargetType.TARGET_TYPE_METHOD:
      return 'TARGET_TYPE_METHOD';
    case FieldOptions_OptionTargetType.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function fieldOptions_OptionTargetTypeToNumber(object) {
  switch (object) {
    case FieldOptions_OptionTargetType.TARGET_TYPE_UNKNOWN:
      return 0;
    case FieldOptions_OptionTargetType.TARGET_TYPE_FILE:
      return 1;
    case FieldOptions_OptionTargetType.TARGET_TYPE_EXTENSION_RANGE:
      return 2;
    case FieldOptions_OptionTargetType.TARGET_TYPE_MESSAGE:
      return 3;
    case FieldOptions_OptionTargetType.TARGET_TYPE_FIELD:
      return 4;
    case FieldOptions_OptionTargetType.TARGET_TYPE_ONEOF:
      return 5;
    case FieldOptions_OptionTargetType.TARGET_TYPE_ENUM:
      return 6;
    case FieldOptions_OptionTargetType.TARGET_TYPE_ENUM_ENTRY:
      return 7;
    case FieldOptions_OptionTargetType.TARGET_TYPE_SERVICE:
      return 8;
    case FieldOptions_OptionTargetType.TARGET_TYPE_METHOD:
      return 9;
    case FieldOptions_OptionTargetType.UNRECOGNIZED:
    default:
      return -1;
  }
}
/**
 * Is this method side-effect-free (or safe in HTTP parlance), or idempotent,
 * or neither? HTTP based RPC implementation may choose GET verb for safe
 * methods, and PUT verb for idempotent methods instead of the default POST.
 */
export var MethodOptions_IdempotencyLevel;
(function (MethodOptions_IdempotencyLevel) {
  MethodOptions_IdempotencyLevel['IDEMPOTENCY_UNKNOWN'] = 'IDEMPOTENCY_UNKNOWN';
  /** NO_SIDE_EFFECTS - implies idempotent */
  MethodOptions_IdempotencyLevel['NO_SIDE_EFFECTS'] = 'NO_SIDE_EFFECTS';
  /** IDEMPOTENT - idempotent, but may have side effects */
  MethodOptions_IdempotencyLevel['IDEMPOTENT'] = 'IDEMPOTENT';
  MethodOptions_IdempotencyLevel['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(MethodOptions_IdempotencyLevel || (MethodOptions_IdempotencyLevel = {}));
export function methodOptions_IdempotencyLevelFromJSON(object) {
  switch (object) {
    case 0:
    case 'IDEMPOTENCY_UNKNOWN':
      return MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN;
    case 1:
    case 'NO_SIDE_EFFECTS':
      return MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS;
    case 2:
    case 'IDEMPOTENT':
      return MethodOptions_IdempotencyLevel.IDEMPOTENT;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return MethodOptions_IdempotencyLevel.UNRECOGNIZED;
  }
}
export function methodOptions_IdempotencyLevelToJSON(object) {
  switch (object) {
    case MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN:
      return 'IDEMPOTENCY_UNKNOWN';
    case MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS:
      return 'NO_SIDE_EFFECTS';
    case MethodOptions_IdempotencyLevel.IDEMPOTENT:
      return 'IDEMPOTENT';
    case MethodOptions_IdempotencyLevel.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function methodOptions_IdempotencyLevelToNumber(object) {
  switch (object) {
    case MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN:
      return 0;
    case MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS:
      return 1;
    case MethodOptions_IdempotencyLevel.IDEMPOTENT:
      return 2;
    case MethodOptions_IdempotencyLevel.UNRECOGNIZED:
    default:
      return -1;
  }
}
/**
 * Represents the identified object's effect on the element in the original
 * .proto file.
 */
export var GeneratedCodeInfo_Annotation_Semantic;
(function (GeneratedCodeInfo_Annotation_Semantic) {
  /** NONE - There is no effect or the effect is indescribable. */
  GeneratedCodeInfo_Annotation_Semantic['NONE'] = 'NONE';
  /** SET - The element is set or otherwise mutated. */
  GeneratedCodeInfo_Annotation_Semantic['SET'] = 'SET';
  /** ALIAS - An alias to the element is returned. */
  GeneratedCodeInfo_Annotation_Semantic['ALIAS'] = 'ALIAS';
  GeneratedCodeInfo_Annotation_Semantic['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(
  GeneratedCodeInfo_Annotation_Semantic ||
    (GeneratedCodeInfo_Annotation_Semantic = {}),
);
export function generatedCodeInfo_Annotation_SemanticFromJSON(object) {
  switch (object) {
    case 0:
    case 'NONE':
      return GeneratedCodeInfo_Annotation_Semantic.NONE;
    case 1:
    case 'SET':
      return GeneratedCodeInfo_Annotation_Semantic.SET;
    case 2:
    case 'ALIAS':
      return GeneratedCodeInfo_Annotation_Semantic.ALIAS;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return GeneratedCodeInfo_Annotation_Semantic.UNRECOGNIZED;
  }
}
export function generatedCodeInfo_Annotation_SemanticToJSON(object) {
  switch (object) {
    case GeneratedCodeInfo_Annotation_Semantic.NONE:
      return 'NONE';
    case GeneratedCodeInfo_Annotation_Semantic.SET:
      return 'SET';
    case GeneratedCodeInfo_Annotation_Semantic.ALIAS:
      return 'ALIAS';
    case GeneratedCodeInfo_Annotation_Semantic.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function generatedCodeInfo_Annotation_SemanticToNumber(object) {
  switch (object) {
    case GeneratedCodeInfo_Annotation_Semantic.NONE:
      return 0;
    case GeneratedCodeInfo_Annotation_Semantic.SET:
      return 1;
    case GeneratedCodeInfo_Annotation_Semantic.ALIAS:
      return 2;
    case GeneratedCodeInfo_Annotation_Semantic.UNRECOGNIZED:
    default:
      return -1;
  }
}
function createBaseFileDescriptorSet() {
  return { file: [] };
}
export const FileDescriptorSet = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.file) {
      FileDescriptorProto.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileDescriptorSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.file.push(
            FileDescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      file: globalThis.Array.isArray(object?.file)
        ? object.file.map((e) => FileDescriptorProto.fromJSON(e))
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.file?.length) {
      obj.file = message.file.map((e) => FileDescriptorProto.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return FileDescriptorSet.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFileDescriptorSet();
    message.file =
      object.file?.map((e) => FileDescriptorProto.fromPartial(e)) || [];
    return message;
  },
};
function createBaseFileDescriptorProto() {
  return {
    name: '',
    package: '',
    dependency: [],
    public_dependency: [],
    weak_dependency: [],
    message_type: [],
    enum_type: [],
    service: [],
    extension: [],
    options: undefined,
    source_code_info: undefined,
    syntax: '',
    edition: '',
  };
}
export const FileDescriptorProto = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== undefined && message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    if (message.package !== undefined && message.package !== '') {
      writer.uint32(18).string(message.package);
    }
    for (const v of message.dependency) {
      writer.uint32(26).string(v);
    }
    writer.uint32(82).fork();
    for (const v of message.public_dependency) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(90).fork();
    for (const v of message.weak_dependency) {
      writer.int32(v);
    }
    writer.ldelim();
    for (const v of message.message_type) {
      DescriptorProto.encode(v, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.enum_type) {
      EnumDescriptorProto.encode(v, writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.service) {
      ServiceDescriptorProto.encode(v, writer.uint32(50).fork()).ldelim();
    }
    for (const v of message.extension) {
      FieldDescriptorProto.encode(v, writer.uint32(58).fork()).ldelim();
    }
    if (message.options !== undefined) {
      FileOptions.encode(message.options, writer.uint32(66).fork()).ldelim();
    }
    if (message.source_code_info !== undefined) {
      SourceCodeInfo.encode(
        message.source_code_info,
        writer.uint32(74).fork(),
      ).ldelim();
    }
    if (message.syntax !== undefined && message.syntax !== '') {
      writer.uint32(98).string(message.syntax);
    }
    if (message.edition !== undefined && message.edition !== '') {
      writer.uint32(106).string(message.edition);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.package = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.dependency.push(reader.string());
          continue;
        case 10:
          if (tag === 80) {
            message.public_dependency.push(reader.int32());
            continue;
          }
          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.public_dependency.push(reader.int32());
            }
            continue;
          }
          break;
        case 11:
          if (tag === 88) {
            message.weak_dependency.push(reader.int32());
            continue;
          }
          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.weak_dependency.push(reader.int32());
            }
            continue;
          }
          break;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.message_type.push(
            DescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.enum_type.push(
            EnumDescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.service.push(
            ServiceDescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.extension.push(
            FieldDescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.options = FileOptions.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.source_code_info = SourceCodeInfo.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }
          message.syntax = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }
          message.edition = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      package: isSet(object.package) ? globalThis.String(object.package) : '',
      dependency: globalThis.Array.isArray(object?.dependency)
        ? object.dependency.map((e) => globalThis.String(e))
        : [],
      public_dependency: globalThis.Array.isArray(object?.public_dependency)
        ? object.public_dependency.map((e) => globalThis.Number(e))
        : [],
      weak_dependency: globalThis.Array.isArray(object?.weak_dependency)
        ? object.weak_dependency.map((e) => globalThis.Number(e))
        : [],
      message_type: globalThis.Array.isArray(object?.message_type)
        ? object.message_type.map((e) => DescriptorProto.fromJSON(e))
        : [],
      enum_type: globalThis.Array.isArray(object?.enum_type)
        ? object.enum_type.map((e) => EnumDescriptorProto.fromJSON(e))
        : [],
      service: globalThis.Array.isArray(object?.service)
        ? object.service.map((e) => ServiceDescriptorProto.fromJSON(e))
        : [],
      extension: globalThis.Array.isArray(object?.extension)
        ? object.extension.map((e) => FieldDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options)
        ? FileOptions.fromJSON(object.options)
        : undefined,
      source_code_info: isSet(object.source_code_info)
        ? SourceCodeInfo.fromJSON(object.source_code_info)
        : undefined,
      syntax: isSet(object.syntax) ? globalThis.String(object.syntax) : '',
      edition: isSet(object.edition) ? globalThis.String(object.edition) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== undefined && message.name !== '') {
      obj.name = message.name;
    }
    if (message.package !== undefined && message.package !== '') {
      obj.package = message.package;
    }
    if (message.dependency?.length) {
      obj.dependency = message.dependency;
    }
    if (message.public_dependency?.length) {
      obj.public_dependency = message.public_dependency.map((e) =>
        Math.round(e),
      );
    }
    if (message.weak_dependency?.length) {
      obj.weak_dependency = message.weak_dependency.map((e) => Math.round(e));
    }
    if (message.message_type?.length) {
      obj.message_type = message.message_type.map((e) =>
        DescriptorProto.toJSON(e),
      );
    }
    if (message.enum_type?.length) {
      obj.enum_type = message.enum_type.map((e) =>
        EnumDescriptorProto.toJSON(e),
      );
    }
    if (message.service?.length) {
      obj.service = message.service.map((e) =>
        ServiceDescriptorProto.toJSON(e),
      );
    }
    if (message.extension?.length) {
      obj.extension = message.extension.map((e) =>
        FieldDescriptorProto.toJSON(e),
      );
    }
    if (message.options !== undefined) {
      obj.options = FileOptions.toJSON(message.options);
    }
    if (message.source_code_info !== undefined) {
      obj.source_code_info = SourceCodeInfo.toJSON(message.source_code_info);
    }
    if (message.syntax !== undefined && message.syntax !== '') {
      obj.syntax = message.syntax;
    }
    if (message.edition !== undefined && message.edition !== '') {
      obj.edition = message.edition;
    }
    return obj;
  },
  create(base) {
    return FileDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFileDescriptorProto();
    message.name = object.name ?? '';
    message.package = object.package ?? '';
    message.dependency = object.dependency?.map((e) => e) || [];
    message.public_dependency = object.public_dependency?.map((e) => e) || [];
    message.weak_dependency = object.weak_dependency?.map((e) => e) || [];
    message.message_type =
      object.message_type?.map((e) => DescriptorProto.fromPartial(e)) || [];
    message.enum_type =
      object.enum_type?.map((e) => EnumDescriptorProto.fromPartial(e)) || [];
    message.service =
      object.service?.map((e) => ServiceDescriptorProto.fromPartial(e)) || [];
    message.extension =
      object.extension?.map((e) => FieldDescriptorProto.fromPartial(e)) || [];
    message.options =
      object.options !== undefined && object.options !== null
        ? FileOptions.fromPartial(object.options)
        : undefined;
    message.source_code_info =
      object.source_code_info !== undefined && object.source_code_info !== null
        ? SourceCodeInfo.fromPartial(object.source_code_info)
        : undefined;
    message.syntax = object.syntax ?? '';
    message.edition = object.edition ?? '';
    return message;
  },
};
function createBaseDescriptorProto() {
  return {
    name: '',
    field: [],
    extension: [],
    nested_type: [],
    enum_type: [],
    extension_range: [],
    oneof_decl: [],
    options: undefined,
    reserved_range: [],
    reserved_name: [],
  };
}
export const DescriptorProto = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== undefined && message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.field) {
      FieldDescriptorProto.encode(v, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.extension) {
      FieldDescriptorProto.encode(v, writer.uint32(50).fork()).ldelim();
    }
    for (const v of message.nested_type) {
      DescriptorProto.encode(v, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.enum_type) {
      EnumDescriptorProto.encode(v, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.extension_range) {
      DescriptorProto_ExtensionRange.encode(
        v,
        writer.uint32(42).fork(),
      ).ldelim();
    }
    for (const v of message.oneof_decl) {
      OneofDescriptorProto.encode(v, writer.uint32(66).fork()).ldelim();
    }
    if (message.options !== undefined) {
      MessageOptions.encode(message.options, writer.uint32(58).fork()).ldelim();
    }
    for (const v of message.reserved_range) {
      DescriptorProto_ReservedRange.encode(
        v,
        writer.uint32(74).fork(),
      ).ldelim();
    }
    for (const v of message.reserved_name) {
      writer.uint32(82).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.field.push(
            FieldDescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.extension.push(
            FieldDescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.nested_type.push(
            DescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.enum_type.push(
            EnumDescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.extension_range.push(
            DescriptorProto_ExtensionRange.decode(reader, reader.uint32()),
          );
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.oneof_decl.push(
            OneofDescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.options = MessageOptions.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.reserved_range.push(
            DescriptorProto_ReservedRange.decode(reader, reader.uint32()),
          );
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.reserved_name.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      field: globalThis.Array.isArray(object?.field)
        ? object.field.map((e) => FieldDescriptorProto.fromJSON(e))
        : [],
      extension: globalThis.Array.isArray(object?.extension)
        ? object.extension.map((e) => FieldDescriptorProto.fromJSON(e))
        : [],
      nested_type: globalThis.Array.isArray(object?.nested_type)
        ? object.nested_type.map((e) => DescriptorProto.fromJSON(e))
        : [],
      enum_type: globalThis.Array.isArray(object?.enum_type)
        ? object.enum_type.map((e) => EnumDescriptorProto.fromJSON(e))
        : [],
      extension_range: globalThis.Array.isArray(object?.extension_range)
        ? object.extension_range.map((e) =>
            DescriptorProto_ExtensionRange.fromJSON(e),
          )
        : [],
      oneof_decl: globalThis.Array.isArray(object?.oneof_decl)
        ? object.oneof_decl.map((e) => OneofDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options)
        ? MessageOptions.fromJSON(object.options)
        : undefined,
      reserved_range: globalThis.Array.isArray(object?.reserved_range)
        ? object.reserved_range.map((e) =>
            DescriptorProto_ReservedRange.fromJSON(e),
          )
        : [],
      reserved_name: globalThis.Array.isArray(object?.reserved_name)
        ? object.reserved_name.map((e) => globalThis.String(e))
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== undefined && message.name !== '') {
      obj.name = message.name;
    }
    if (message.field?.length) {
      obj.field = message.field.map((e) => FieldDescriptorProto.toJSON(e));
    }
    if (message.extension?.length) {
      obj.extension = message.extension.map((e) =>
        FieldDescriptorProto.toJSON(e),
      );
    }
    if (message.nested_type?.length) {
      obj.nested_type = message.nested_type.map((e) =>
        DescriptorProto.toJSON(e),
      );
    }
    if (message.enum_type?.length) {
      obj.enum_type = message.enum_type.map((e) =>
        EnumDescriptorProto.toJSON(e),
      );
    }
    if (message.extension_range?.length) {
      obj.extension_range = message.extension_range.map((e) =>
        DescriptorProto_ExtensionRange.toJSON(e),
      );
    }
    if (message.oneof_decl?.length) {
      obj.oneof_decl = message.oneof_decl.map((e) =>
        OneofDescriptorProto.toJSON(e),
      );
    }
    if (message.options !== undefined) {
      obj.options = MessageOptions.toJSON(message.options);
    }
    if (message.reserved_range?.length) {
      obj.reserved_range = message.reserved_range.map((e) =>
        DescriptorProto_ReservedRange.toJSON(e),
      );
    }
    if (message.reserved_name?.length) {
      obj.reserved_name = message.reserved_name;
    }
    return obj;
  },
  create(base) {
    return DescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDescriptorProto();
    message.name = object.name ?? '';
    message.field =
      object.field?.map((e) => FieldDescriptorProto.fromPartial(e)) || [];
    message.extension =
      object.extension?.map((e) => FieldDescriptorProto.fromPartial(e)) || [];
    message.nested_type =
      object.nested_type?.map((e) => DescriptorProto.fromPartial(e)) || [];
    message.enum_type =
      object.enum_type?.map((e) => EnumDescriptorProto.fromPartial(e)) || [];
    message.extension_range =
      object.extension_range?.map((e) =>
        DescriptorProto_ExtensionRange.fromPartial(e),
      ) || [];
    message.oneof_decl =
      object.oneof_decl?.map((e) => OneofDescriptorProto.fromPartial(e)) || [];
    message.options =
      object.options !== undefined && object.options !== null
        ? MessageOptions.fromPartial(object.options)
        : undefined;
    message.reserved_range =
      object.reserved_range?.map((e) =>
        DescriptorProto_ReservedRange.fromPartial(e),
      ) || [];
    message.reserved_name = object.reserved_name?.map((e) => e) || [];
    return message;
  },
};
function createBaseDescriptorProto_ExtensionRange() {
  return { start: 0, end: 0, options: undefined };
}
export const DescriptorProto_ExtensionRange = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.start !== undefined && message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    if (message.options !== undefined) {
      ExtensionRangeOptions.encode(
        message.options,
        writer.uint32(26).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDescriptorProto_ExtensionRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.start = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.end = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.options = ExtensionRangeOptions.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
      options: isSet(object.options)
        ? ExtensionRangeOptions.fromJSON(object.options)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.start !== undefined && message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    if (message.options !== undefined) {
      obj.options = ExtensionRangeOptions.toJSON(message.options);
    }
    return obj;
  },
  create(base) {
    return DescriptorProto_ExtensionRange.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDescriptorProto_ExtensionRange();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    message.options =
      object.options !== undefined && object.options !== null
        ? ExtensionRangeOptions.fromPartial(object.options)
        : undefined;
    return message;
  },
};
function createBaseDescriptorProto_ReservedRange() {
  return { start: 0, end: 0 };
}
export const DescriptorProto_ReservedRange = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.start !== undefined && message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDescriptorProto_ReservedRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.start = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.end = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.start !== undefined && message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    return obj;
  },
  create(base) {
    return DescriptorProto_ReservedRange.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseDescriptorProto_ReservedRange();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    return message;
  },
};
function createBaseExtensionRangeOptions() {
  return {
    uninterpreted_option: [],
    declaration: [],
    verification: ExtensionRangeOptions_VerificationState.UNVERIFIED,
  };
}
export const ExtensionRangeOptions = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).ldelim();
    }
    for (const v of message.declaration) {
      ExtensionRangeOptions_Declaration.encode(
        v,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    if (
      message.verification !== undefined &&
      message.verification !==
        ExtensionRangeOptions_VerificationState.DECLARATION
    ) {
      writer
        .uint32(24)
        .int32(
          extensionRangeOptions_VerificationStateToNumber(message.verification),
        );
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionRangeOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.declaration.push(
            ExtensionRangeOptions_Declaration.decode(reader, reader.uint32()),
          );
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.verification =
            extensionRangeOptions_VerificationStateFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
      declaration: globalThis.Array.isArray(object?.declaration)
        ? object.declaration.map((e) =>
            ExtensionRangeOptions_Declaration.fromJSON(e),
          )
        : [],
      verification: isSet(object.verification)
        ? extensionRangeOptions_VerificationStateFromJSON(object.verification)
        : ExtensionRangeOptions_VerificationState.UNVERIFIED,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    if (message.declaration?.length) {
      obj.declaration = message.declaration.map((e) =>
        ExtensionRangeOptions_Declaration.toJSON(e),
      );
    }
    if (
      message.verification !== undefined &&
      message.verification !==
        ExtensionRangeOptions_VerificationState.DECLARATION
    ) {
      obj.verification = extensionRangeOptions_VerificationStateToJSON(
        message.verification,
      );
    }
    return obj;
  },
  create(base) {
    return ExtensionRangeOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseExtensionRangeOptions();
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    message.declaration =
      object.declaration?.map((e) =>
        ExtensionRangeOptions_Declaration.fromPartial(e),
      ) || [];
    message.verification =
      object.verification ?? ExtensionRangeOptions_VerificationState.UNVERIFIED;
    return message;
  },
};
function createBaseExtensionRangeOptions_Declaration() {
  return {
    number: 0,
    full_name: '',
    type: '',
    is_repeated: false,
    reserved: false,
    repeated: false,
  };
}
export const ExtensionRangeOptions_Declaration = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.number !== undefined && message.number !== 0) {
      writer.uint32(8).int32(message.number);
    }
    if (message.full_name !== undefined && message.full_name !== '') {
      writer.uint32(18).string(message.full_name);
    }
    if (message.type !== undefined && message.type !== '') {
      writer.uint32(26).string(message.type);
    }
    if (message.is_repeated !== undefined && message.is_repeated !== false) {
      writer.uint32(32).bool(message.is_repeated);
    }
    if (message.reserved !== undefined && message.reserved !== false) {
      writer.uint32(40).bool(message.reserved);
    }
    if (message.repeated !== undefined && message.repeated !== false) {
      writer.uint32(48).bool(message.repeated);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionRangeOptions_Declaration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.number = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.full_name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.type = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.is_repeated = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.reserved = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.repeated = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
      full_name: isSet(object.full_name)
        ? globalThis.String(object.full_name)
        : '',
      type: isSet(object.type) ? globalThis.String(object.type) : '',
      is_repeated: isSet(object.is_repeated)
        ? globalThis.Boolean(object.is_repeated)
        : false,
      reserved: isSet(object.reserved)
        ? globalThis.Boolean(object.reserved)
        : false,
      repeated: isSet(object.repeated)
        ? globalThis.Boolean(object.repeated)
        : false,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.number !== undefined && message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.full_name !== undefined && message.full_name !== '') {
      obj.full_name = message.full_name;
    }
    if (message.type !== undefined && message.type !== '') {
      obj.type = message.type;
    }
    if (message.is_repeated !== undefined && message.is_repeated !== false) {
      obj.is_repeated = message.is_repeated;
    }
    if (message.reserved !== undefined && message.reserved !== false) {
      obj.reserved = message.reserved;
    }
    if (message.repeated !== undefined && message.repeated !== false) {
      obj.repeated = message.repeated;
    }
    return obj;
  },
  create(base) {
    return ExtensionRangeOptions_Declaration.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseExtensionRangeOptions_Declaration();
    message.number = object.number ?? 0;
    message.full_name = object.full_name ?? '';
    message.type = object.type ?? '';
    message.is_repeated = object.is_repeated ?? false;
    message.reserved = object.reserved ?? false;
    message.repeated = object.repeated ?? false;
    return message;
  },
};
function createBaseFieldDescriptorProto() {
  return {
    name: '',
    number: 0,
    label: FieldDescriptorProto_Label.LABEL_OPTIONAL,
    type: FieldDescriptorProto_Type.TYPE_DOUBLE,
    type_name: '',
    extendee: '',
    default_value: '',
    oneof_index: 0,
    json_name: '',
    options: undefined,
    proto3_optional: false,
  };
}
export const FieldDescriptorProto = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== undefined && message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    if (message.number !== undefined && message.number !== 0) {
      writer.uint32(24).int32(message.number);
    }
    if (
      message.label !== undefined &&
      message.label !== FieldDescriptorProto_Label.LABEL_OPTIONAL
    ) {
      writer
        .uint32(32)
        .int32(fieldDescriptorProto_LabelToNumber(message.label));
    }
    if (
      message.type !== undefined &&
      message.type !== FieldDescriptorProto_Type.TYPE_DOUBLE
    ) {
      writer.uint32(40).int32(fieldDescriptorProto_TypeToNumber(message.type));
    }
    if (message.type_name !== undefined && message.type_name !== '') {
      writer.uint32(50).string(message.type_name);
    }
    if (message.extendee !== undefined && message.extendee !== '') {
      writer.uint32(18).string(message.extendee);
    }
    if (message.default_value !== undefined && message.default_value !== '') {
      writer.uint32(58).string(message.default_value);
    }
    if (message.oneof_index !== undefined && message.oneof_index !== 0) {
      writer.uint32(72).int32(message.oneof_index);
    }
    if (message.json_name !== undefined && message.json_name !== '') {
      writer.uint32(82).string(message.json_name);
    }
    if (message.options !== undefined) {
      FieldOptions.encode(message.options, writer.uint32(66).fork()).ldelim();
    }
    if (
      message.proto3_optional !== undefined &&
      message.proto3_optional !== false
    ) {
      writer.uint32(136).bool(message.proto3_optional);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.number = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.label = fieldDescriptorProto_LabelFromJSON(reader.int32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.type = fieldDescriptorProto_TypeFromJSON(reader.int32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.type_name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.extendee = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.default_value = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.oneof_index = reader.int32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }
          message.json_name = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.options = FieldOptions.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }
          message.proto3_optional = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
      label: isSet(object.label)
        ? fieldDescriptorProto_LabelFromJSON(object.label)
        : FieldDescriptorProto_Label.LABEL_OPTIONAL,
      type: isSet(object.type)
        ? fieldDescriptorProto_TypeFromJSON(object.type)
        : FieldDescriptorProto_Type.TYPE_DOUBLE,
      type_name: isSet(object.type_name)
        ? globalThis.String(object.type_name)
        : '',
      extendee: isSet(object.extendee)
        ? globalThis.String(object.extendee)
        : '',
      default_value: isSet(object.default_value)
        ? globalThis.String(object.default_value)
        : '',
      oneof_index: isSet(object.oneof_index)
        ? globalThis.Number(object.oneof_index)
        : 0,
      json_name: isSet(object.json_name)
        ? globalThis.String(object.json_name)
        : '',
      options: isSet(object.options)
        ? FieldOptions.fromJSON(object.options)
        : undefined,
      proto3_optional: isSet(object.proto3_optional)
        ? globalThis.Boolean(object.proto3_optional)
        : false,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== undefined && message.name !== '') {
      obj.name = message.name;
    }
    if (message.number !== undefined && message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (
      message.label !== undefined &&
      message.label !== FieldDescriptorProto_Label.LABEL_OPTIONAL
    ) {
      obj.label = fieldDescriptorProto_LabelToJSON(message.label);
    }
    if (
      message.type !== undefined &&
      message.type !== FieldDescriptorProto_Type.TYPE_DOUBLE
    ) {
      obj.type = fieldDescriptorProto_TypeToJSON(message.type);
    }
    if (message.type_name !== undefined && message.type_name !== '') {
      obj.type_name = message.type_name;
    }
    if (message.extendee !== undefined && message.extendee !== '') {
      obj.extendee = message.extendee;
    }
    if (message.default_value !== undefined && message.default_value !== '') {
      obj.default_value = message.default_value;
    }
    if (message.oneof_index !== undefined && message.oneof_index !== 0) {
      obj.oneof_index = Math.round(message.oneof_index);
    }
    if (message.json_name !== undefined && message.json_name !== '') {
      obj.json_name = message.json_name;
    }
    if (message.options !== undefined) {
      obj.options = FieldOptions.toJSON(message.options);
    }
    if (
      message.proto3_optional !== undefined &&
      message.proto3_optional !== false
    ) {
      obj.proto3_optional = message.proto3_optional;
    }
    return obj;
  },
  create(base) {
    return FieldDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFieldDescriptorProto();
    message.name = object.name ?? '';
    message.number = object.number ?? 0;
    message.label = object.label ?? FieldDescriptorProto_Label.LABEL_OPTIONAL;
    message.type = object.type ?? FieldDescriptorProto_Type.TYPE_DOUBLE;
    message.type_name = object.type_name ?? '';
    message.extendee = object.extendee ?? '';
    message.default_value = object.default_value ?? '';
    message.oneof_index = object.oneof_index ?? 0;
    message.json_name = object.json_name ?? '';
    message.options =
      object.options !== undefined && object.options !== null
        ? FieldOptions.fromPartial(object.options)
        : undefined;
    message.proto3_optional = object.proto3_optional ?? false;
    return message;
  },
};
function createBaseOneofDescriptorProto() {
  return { name: '', options: undefined };
}
export const OneofDescriptorProto = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== undefined && message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    if (message.options !== undefined) {
      OneofOptions.encode(message.options, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneofDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.options = OneofOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      options: isSet(object.options)
        ? OneofOptions.fromJSON(object.options)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== undefined && message.name !== '') {
      obj.name = message.name;
    }
    if (message.options !== undefined) {
      obj.options = OneofOptions.toJSON(message.options);
    }
    return obj;
  },
  create(base) {
    return OneofDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseOneofDescriptorProto();
    message.name = object.name ?? '';
    message.options =
      object.options !== undefined && object.options !== null
        ? OneofOptions.fromPartial(object.options)
        : undefined;
    return message;
  },
};
function createBaseEnumDescriptorProto() {
  return {
    name: '',
    value: [],
    options: undefined,
    reserved_range: [],
    reserved_name: [],
  };
}
export const EnumDescriptorProto = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== undefined && message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.value) {
      EnumValueDescriptorProto.encode(v, writer.uint32(18).fork()).ldelim();
    }
    if (message.options !== undefined) {
      EnumOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.reserved_range) {
      EnumDescriptorProto_EnumReservedRange.encode(
        v,
        writer.uint32(34).fork(),
      ).ldelim();
    }
    for (const v of message.reserved_name) {
      writer.uint32(42).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.value.push(
            EnumValueDescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.options = EnumOptions.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.reserved_range.push(
            EnumDescriptorProto_EnumReservedRange.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.reserved_name.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      value: globalThis.Array.isArray(object?.value)
        ? object.value.map((e) => EnumValueDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options)
        ? EnumOptions.fromJSON(object.options)
        : undefined,
      reserved_range: globalThis.Array.isArray(object?.reserved_range)
        ? object.reserved_range.map((e) =>
            EnumDescriptorProto_EnumReservedRange.fromJSON(e),
          )
        : [],
      reserved_name: globalThis.Array.isArray(object?.reserved_name)
        ? object.reserved_name.map((e) => globalThis.String(e))
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== undefined && message.name !== '') {
      obj.name = message.name;
    }
    if (message.value?.length) {
      obj.value = message.value.map((e) => EnumValueDescriptorProto.toJSON(e));
    }
    if (message.options !== undefined) {
      obj.options = EnumOptions.toJSON(message.options);
    }
    if (message.reserved_range?.length) {
      obj.reserved_range = message.reserved_range.map((e) =>
        EnumDescriptorProto_EnumReservedRange.toJSON(e),
      );
    }
    if (message.reserved_name?.length) {
      obj.reserved_name = message.reserved_name;
    }
    return obj;
  },
  create(base) {
    return EnumDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEnumDescriptorProto();
    message.name = object.name ?? '';
    message.value =
      object.value?.map((e) => EnumValueDescriptorProto.fromPartial(e)) || [];
    message.options =
      object.options !== undefined && object.options !== null
        ? EnumOptions.fromPartial(object.options)
        : undefined;
    message.reserved_range =
      object.reserved_range?.map((e) =>
        EnumDescriptorProto_EnumReservedRange.fromPartial(e),
      ) || [];
    message.reserved_name = object.reserved_name?.map((e) => e) || [];
    return message;
  },
};
function createBaseEnumDescriptorProto_EnumReservedRange() {
  return { start: 0, end: 0 };
}
export const EnumDescriptorProto_EnumReservedRange = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.start !== undefined && message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumDescriptorProto_EnumReservedRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.start = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.end = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.start !== undefined && message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    return obj;
  },
  create(base) {
    return EnumDescriptorProto_EnumReservedRange.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEnumDescriptorProto_EnumReservedRange();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    return message;
  },
};
function createBaseEnumValueDescriptorProto() {
  return { name: '', number: 0, options: undefined };
}
export const EnumValueDescriptorProto = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== undefined && message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    if (message.number !== undefined && message.number !== 0) {
      writer.uint32(16).int32(message.number);
    }
    if (message.options !== undefined) {
      EnumValueOptions.encode(
        message.options,
        writer.uint32(26).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumValueDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.number = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.options = EnumValueOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
      options: isSet(object.options)
        ? EnumValueOptions.fromJSON(object.options)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== undefined && message.name !== '') {
      obj.name = message.name;
    }
    if (message.number !== undefined && message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.options !== undefined) {
      obj.options = EnumValueOptions.toJSON(message.options);
    }
    return obj;
  },
  create(base) {
    return EnumValueDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEnumValueDescriptorProto();
    message.name = object.name ?? '';
    message.number = object.number ?? 0;
    message.options =
      object.options !== undefined && object.options !== null
        ? EnumValueOptions.fromPartial(object.options)
        : undefined;
    return message;
  },
};
function createBaseServiceDescriptorProto() {
  return { name: '', method: [], options: undefined };
}
export const ServiceDescriptorProto = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== undefined && message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.method) {
      MethodDescriptorProto.encode(v, writer.uint32(18).fork()).ldelim();
    }
    if (message.options !== undefined) {
      ServiceOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.method.push(
            MethodDescriptorProto.decode(reader, reader.uint32()),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.options = ServiceOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      method: globalThis.Array.isArray(object?.method)
        ? object.method.map((e) => MethodDescriptorProto.fromJSON(e))
        : [],
      options: isSet(object.options)
        ? ServiceOptions.fromJSON(object.options)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== undefined && message.name !== '') {
      obj.name = message.name;
    }
    if (message.method?.length) {
      obj.method = message.method.map((e) => MethodDescriptorProto.toJSON(e));
    }
    if (message.options !== undefined) {
      obj.options = ServiceOptions.toJSON(message.options);
    }
    return obj;
  },
  create(base) {
    return ServiceDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseServiceDescriptorProto();
    message.name = object.name ?? '';
    message.method =
      object.method?.map((e) => MethodDescriptorProto.fromPartial(e)) || [];
    message.options =
      object.options !== undefined && object.options !== null
        ? ServiceOptions.fromPartial(object.options)
        : undefined;
    return message;
  },
};
function createBaseMethodDescriptorProto() {
  return {
    name: '',
    input_type: '',
    output_type: '',
    options: undefined,
    client_streaming: false,
    server_streaming: false,
  };
}
export const MethodDescriptorProto = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== undefined && message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    if (message.input_type !== undefined && message.input_type !== '') {
      writer.uint32(18).string(message.input_type);
    }
    if (message.output_type !== undefined && message.output_type !== '') {
      writer.uint32(26).string(message.output_type);
    }
    if (message.options !== undefined) {
      MethodOptions.encode(message.options, writer.uint32(34).fork()).ldelim();
    }
    if (
      message.client_streaming !== undefined &&
      message.client_streaming !== false
    ) {
      writer.uint32(40).bool(message.client_streaming);
    }
    if (
      message.server_streaming !== undefined &&
      message.server_streaming !== false
    ) {
      writer.uint32(48).bool(message.server_streaming);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodDescriptorProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.input_type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.output_type = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.options = MethodOptions.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.client_streaming = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.server_streaming = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      input_type: isSet(object.input_type)
        ? globalThis.String(object.input_type)
        : '',
      output_type: isSet(object.output_type)
        ? globalThis.String(object.output_type)
        : '',
      options: isSet(object.options)
        ? MethodOptions.fromJSON(object.options)
        : undefined,
      client_streaming: isSet(object.client_streaming)
        ? globalThis.Boolean(object.client_streaming)
        : false,
      server_streaming: isSet(object.server_streaming)
        ? globalThis.Boolean(object.server_streaming)
        : false,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== undefined && message.name !== '') {
      obj.name = message.name;
    }
    if (message.input_type !== undefined && message.input_type !== '') {
      obj.input_type = message.input_type;
    }
    if (message.output_type !== undefined && message.output_type !== '') {
      obj.output_type = message.output_type;
    }
    if (message.options !== undefined) {
      obj.options = MethodOptions.toJSON(message.options);
    }
    if (
      message.client_streaming !== undefined &&
      message.client_streaming !== false
    ) {
      obj.client_streaming = message.client_streaming;
    }
    if (
      message.server_streaming !== undefined &&
      message.server_streaming !== false
    ) {
      obj.server_streaming = message.server_streaming;
    }
    return obj;
  },
  create(base) {
    return MethodDescriptorProto.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMethodDescriptorProto();
    message.name = object.name ?? '';
    message.input_type = object.input_type ?? '';
    message.output_type = object.output_type ?? '';
    message.options =
      object.options !== undefined && object.options !== null
        ? MethodOptions.fromPartial(object.options)
        : undefined;
    message.client_streaming = object.client_streaming ?? false;
    message.server_streaming = object.server_streaming ?? false;
    return message;
  },
};
function createBaseFileOptions() {
  return {
    java_package: '',
    java_outer_classname: '',
    java_multiple_files: false,
    java_generate_equals_and_hash: false,
    java_string_check_utf8: false,
    optimize_for: FileOptions_OptimizeMode.SPEED,
    go_package: '',
    cc_generic_services: false,
    java_generic_services: false,
    py_generic_services: false,
    php_generic_services: false,
    deprecated: false,
    cc_enable_arenas: true,
    objc_class_prefix: '',
    csharp_namespace: '',
    swift_prefix: '',
    php_class_prefix: '',
    php_namespace: '',
    php_metadata_namespace: '',
    ruby_package: '',
    uninterpreted_option: [],
  };
}
export const FileOptions = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.java_package !== undefined && message.java_package !== '') {
      writer.uint32(10).string(message.java_package);
    }
    if (
      message.java_outer_classname !== undefined &&
      message.java_outer_classname !== ''
    ) {
      writer.uint32(66).string(message.java_outer_classname);
    }
    if (
      message.java_multiple_files !== undefined &&
      message.java_multiple_files !== false
    ) {
      writer.uint32(80).bool(message.java_multiple_files);
    }
    if (
      message.java_generate_equals_and_hash !== undefined &&
      message.java_generate_equals_and_hash !== false
    ) {
      writer.uint32(160).bool(message.java_generate_equals_and_hash);
    }
    if (
      message.java_string_check_utf8 !== undefined &&
      message.java_string_check_utf8 !== false
    ) {
      writer.uint32(216).bool(message.java_string_check_utf8);
    }
    if (
      message.optimize_for !== undefined &&
      message.optimize_for !== FileOptions_OptimizeMode.SPEED
    ) {
      writer
        .uint32(72)
        .int32(fileOptions_OptimizeModeToNumber(message.optimize_for));
    }
    if (message.go_package !== undefined && message.go_package !== '') {
      writer.uint32(90).string(message.go_package);
    }
    if (
      message.cc_generic_services !== undefined &&
      message.cc_generic_services !== false
    ) {
      writer.uint32(128).bool(message.cc_generic_services);
    }
    if (
      message.java_generic_services !== undefined &&
      message.java_generic_services !== false
    ) {
      writer.uint32(136).bool(message.java_generic_services);
    }
    if (
      message.py_generic_services !== undefined &&
      message.py_generic_services !== false
    ) {
      writer.uint32(144).bool(message.py_generic_services);
    }
    if (
      message.php_generic_services !== undefined &&
      message.php_generic_services !== false
    ) {
      writer.uint32(336).bool(message.php_generic_services);
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(184).bool(message.deprecated);
    }
    if (
      message.cc_enable_arenas !== undefined &&
      message.cc_enable_arenas !== true
    ) {
      writer.uint32(248).bool(message.cc_enable_arenas);
    }
    if (
      message.objc_class_prefix !== undefined &&
      message.objc_class_prefix !== ''
    ) {
      writer.uint32(290).string(message.objc_class_prefix);
    }
    if (
      message.csharp_namespace !== undefined &&
      message.csharp_namespace !== ''
    ) {
      writer.uint32(298).string(message.csharp_namespace);
    }
    if (message.swift_prefix !== undefined && message.swift_prefix !== '') {
      writer.uint32(314).string(message.swift_prefix);
    }
    if (
      message.php_class_prefix !== undefined &&
      message.php_class_prefix !== ''
    ) {
      writer.uint32(322).string(message.php_class_prefix);
    }
    if (message.php_namespace !== undefined && message.php_namespace !== '') {
      writer.uint32(330).string(message.php_namespace);
    }
    if (
      message.php_metadata_namespace !== undefined &&
      message.php_metadata_namespace !== ''
    ) {
      writer.uint32(354).string(message.php_metadata_namespace);
    }
    if (message.ruby_package !== undefined && message.ruby_package !== '') {
      writer.uint32(362).string(message.ruby_package);
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.java_package = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.java_outer_classname = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.java_multiple_files = reader.bool();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }
          message.java_generate_equals_and_hash = reader.bool();
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }
          message.java_string_check_utf8 = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }
          message.optimize_for = fileOptions_OptimizeModeFromJSON(
            reader.int32(),
          );
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }
          message.go_package = reader.string();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }
          message.cc_generic_services = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }
          message.java_generic_services = reader.bool();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }
          message.py_generic_services = reader.bool();
          continue;
        case 42:
          if (tag !== 336) {
            break;
          }
          message.php_generic_services = reader.bool();
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 31:
          if (tag !== 248) {
            break;
          }
          message.cc_enable_arenas = reader.bool();
          continue;
        case 36:
          if (tag !== 290) {
            break;
          }
          message.objc_class_prefix = reader.string();
          continue;
        case 37:
          if (tag !== 298) {
            break;
          }
          message.csharp_namespace = reader.string();
          continue;
        case 39:
          if (tag !== 314) {
            break;
          }
          message.swift_prefix = reader.string();
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }
          message.php_class_prefix = reader.string();
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }
          message.php_namespace = reader.string();
          continue;
        case 44:
          if (tag !== 354) {
            break;
          }
          message.php_metadata_namespace = reader.string();
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }
          message.ruby_package = reader.string();
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      java_package: isSet(object.java_package)
        ? globalThis.String(object.java_package)
        : '',
      java_outer_classname: isSet(object.java_outer_classname)
        ? globalThis.String(object.java_outer_classname)
        : '',
      java_multiple_files: isSet(object.java_multiple_files)
        ? globalThis.Boolean(object.java_multiple_files)
        : false,
      java_generate_equals_and_hash: isSet(object.java_generate_equals_and_hash)
        ? globalThis.Boolean(object.java_generate_equals_and_hash)
        : false,
      java_string_check_utf8: isSet(object.java_string_check_utf8)
        ? globalThis.Boolean(object.java_string_check_utf8)
        : false,
      optimize_for: isSet(object.optimize_for)
        ? fileOptions_OptimizeModeFromJSON(object.optimize_for)
        : FileOptions_OptimizeMode.SPEED,
      go_package: isSet(object.go_package)
        ? globalThis.String(object.go_package)
        : '',
      cc_generic_services: isSet(object.cc_generic_services)
        ? globalThis.Boolean(object.cc_generic_services)
        : false,
      java_generic_services: isSet(object.java_generic_services)
        ? globalThis.Boolean(object.java_generic_services)
        : false,
      py_generic_services: isSet(object.py_generic_services)
        ? globalThis.Boolean(object.py_generic_services)
        : false,
      php_generic_services: isSet(object.php_generic_services)
        ? globalThis.Boolean(object.php_generic_services)
        : false,
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      cc_enable_arenas: isSet(object.cc_enable_arenas)
        ? globalThis.Boolean(object.cc_enable_arenas)
        : true,
      objc_class_prefix: isSet(object.objc_class_prefix)
        ? globalThis.String(object.objc_class_prefix)
        : '',
      csharp_namespace: isSet(object.csharp_namespace)
        ? globalThis.String(object.csharp_namespace)
        : '',
      swift_prefix: isSet(object.swift_prefix)
        ? globalThis.String(object.swift_prefix)
        : '',
      php_class_prefix: isSet(object.php_class_prefix)
        ? globalThis.String(object.php_class_prefix)
        : '',
      php_namespace: isSet(object.php_namespace)
        ? globalThis.String(object.php_namespace)
        : '',
      php_metadata_namespace: isSet(object.php_metadata_namespace)
        ? globalThis.String(object.php_metadata_namespace)
        : '',
      ruby_package: isSet(object.ruby_package)
        ? globalThis.String(object.ruby_package)
        : '',
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.java_package !== undefined && message.java_package !== '') {
      obj.java_package = message.java_package;
    }
    if (
      message.java_outer_classname !== undefined &&
      message.java_outer_classname !== ''
    ) {
      obj.java_outer_classname = message.java_outer_classname;
    }
    if (
      message.java_multiple_files !== undefined &&
      message.java_multiple_files !== false
    ) {
      obj.java_multiple_files = message.java_multiple_files;
    }
    if (
      message.java_generate_equals_and_hash !== undefined &&
      message.java_generate_equals_and_hash !== false
    ) {
      obj.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
    }
    if (
      message.java_string_check_utf8 !== undefined &&
      message.java_string_check_utf8 !== false
    ) {
      obj.java_string_check_utf8 = message.java_string_check_utf8;
    }
    if (
      message.optimize_for !== undefined &&
      message.optimize_for !== FileOptions_OptimizeMode.SPEED
    ) {
      obj.optimize_for = fileOptions_OptimizeModeToJSON(message.optimize_for);
    }
    if (message.go_package !== undefined && message.go_package !== '') {
      obj.go_package = message.go_package;
    }
    if (
      message.cc_generic_services !== undefined &&
      message.cc_generic_services !== false
    ) {
      obj.cc_generic_services = message.cc_generic_services;
    }
    if (
      message.java_generic_services !== undefined &&
      message.java_generic_services !== false
    ) {
      obj.java_generic_services = message.java_generic_services;
    }
    if (
      message.py_generic_services !== undefined &&
      message.py_generic_services !== false
    ) {
      obj.py_generic_services = message.py_generic_services;
    }
    if (
      message.php_generic_services !== undefined &&
      message.php_generic_services !== false
    ) {
      obj.php_generic_services = message.php_generic_services;
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (
      message.cc_enable_arenas !== undefined &&
      message.cc_enable_arenas !== true
    ) {
      obj.cc_enable_arenas = message.cc_enable_arenas;
    }
    if (
      message.objc_class_prefix !== undefined &&
      message.objc_class_prefix !== ''
    ) {
      obj.objc_class_prefix = message.objc_class_prefix;
    }
    if (
      message.csharp_namespace !== undefined &&
      message.csharp_namespace !== ''
    ) {
      obj.csharp_namespace = message.csharp_namespace;
    }
    if (message.swift_prefix !== undefined && message.swift_prefix !== '') {
      obj.swift_prefix = message.swift_prefix;
    }
    if (
      message.php_class_prefix !== undefined &&
      message.php_class_prefix !== ''
    ) {
      obj.php_class_prefix = message.php_class_prefix;
    }
    if (message.php_namespace !== undefined && message.php_namespace !== '') {
      obj.php_namespace = message.php_namespace;
    }
    if (
      message.php_metadata_namespace !== undefined &&
      message.php_metadata_namespace !== ''
    ) {
      obj.php_metadata_namespace = message.php_metadata_namespace;
    }
    if (message.ruby_package !== undefined && message.ruby_package !== '') {
      obj.ruby_package = message.ruby_package;
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return FileOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFileOptions();
    message.java_package = object.java_package ?? '';
    message.java_outer_classname = object.java_outer_classname ?? '';
    message.java_multiple_files = object.java_multiple_files ?? false;
    message.java_generate_equals_and_hash =
      object.java_generate_equals_and_hash ?? false;
    message.java_string_check_utf8 = object.java_string_check_utf8 ?? false;
    message.optimize_for =
      object.optimize_for ?? FileOptions_OptimizeMode.SPEED;
    message.go_package = object.go_package ?? '';
    message.cc_generic_services = object.cc_generic_services ?? false;
    message.java_generic_services = object.java_generic_services ?? false;
    message.py_generic_services = object.py_generic_services ?? false;
    message.php_generic_services = object.php_generic_services ?? false;
    message.deprecated = object.deprecated ?? false;
    message.cc_enable_arenas = object.cc_enable_arenas ?? true;
    message.objc_class_prefix = object.objc_class_prefix ?? '';
    message.csharp_namespace = object.csharp_namespace ?? '';
    message.swift_prefix = object.swift_prefix ?? '';
    message.php_class_prefix = object.php_class_prefix ?? '';
    message.php_namespace = object.php_namespace ?? '';
    message.php_metadata_namespace = object.php_metadata_namespace ?? '';
    message.ruby_package = object.ruby_package ?? '';
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};
function createBaseMessageOptions() {
  return {
    message_set_wire_format: false,
    no_standard_descriptor_accessor: false,
    deprecated: false,
    map_entry: false,
    deprecated_legacy_json_field_conflicts: false,
    uninterpreted_option: [],
  };
}
export const MessageOptions = {
  encode(message, writer = _m0.Writer.create()) {
    if (
      message.message_set_wire_format !== undefined &&
      message.message_set_wire_format !== false
    ) {
      writer.uint32(8).bool(message.message_set_wire_format);
    }
    if (
      message.no_standard_descriptor_accessor !== undefined &&
      message.no_standard_descriptor_accessor !== false
    ) {
      writer.uint32(16).bool(message.no_standard_descriptor_accessor);
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(24).bool(message.deprecated);
    }
    if (message.map_entry !== undefined && message.map_entry !== false) {
      writer.uint32(56).bool(message.map_entry);
    }
    if (
      message.deprecated_legacy_json_field_conflicts !== undefined &&
      message.deprecated_legacy_json_field_conflicts !== false
    ) {
      writer.uint32(88).bool(message.deprecated_legacy_json_field_conflicts);
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.message_set_wire_format = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.no_standard_descriptor_accessor = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }
          message.map_entry = reader.bool();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }
          message.deprecated_legacy_json_field_conflicts = reader.bool();
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_set_wire_format: isSet(object.message_set_wire_format)
        ? globalThis.Boolean(object.message_set_wire_format)
        : false,
      no_standard_descriptor_accessor: isSet(
        object.no_standard_descriptor_accessor,
      )
        ? globalThis.Boolean(object.no_standard_descriptor_accessor)
        : false,
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      map_entry: isSet(object.map_entry)
        ? globalThis.Boolean(object.map_entry)
        : false,
      deprecated_legacy_json_field_conflicts: isSet(
        object.deprecated_legacy_json_field_conflicts,
      )
        ? globalThis.Boolean(object.deprecated_legacy_json_field_conflicts)
        : false,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (
      message.message_set_wire_format !== undefined &&
      message.message_set_wire_format !== false
    ) {
      obj.message_set_wire_format = message.message_set_wire_format;
    }
    if (
      message.no_standard_descriptor_accessor !== undefined &&
      message.no_standard_descriptor_accessor !== false
    ) {
      obj.no_standard_descriptor_accessor =
        message.no_standard_descriptor_accessor;
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.map_entry !== undefined && message.map_entry !== false) {
      obj.map_entry = message.map_entry;
    }
    if (
      message.deprecated_legacy_json_field_conflicts !== undefined &&
      message.deprecated_legacy_json_field_conflicts !== false
    ) {
      obj.deprecated_legacy_json_field_conflicts =
        message.deprecated_legacy_json_field_conflicts;
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return MessageOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMessageOptions();
    message.message_set_wire_format = object.message_set_wire_format ?? false;
    message.no_standard_descriptor_accessor =
      object.no_standard_descriptor_accessor ?? false;
    message.deprecated = object.deprecated ?? false;
    message.map_entry = object.map_entry ?? false;
    message.deprecated_legacy_json_field_conflicts =
      object.deprecated_legacy_json_field_conflicts ?? false;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};
function createBaseFieldOptions() {
  return {
    ctype: FieldOptions_CType.STRING,
    packed: false,
    jstype: FieldOptions_JSType.JS_NORMAL,
    lazy: false,
    unverified_lazy: false,
    deprecated: false,
    weak: false,
    debug_redact: false,
    retention: FieldOptions_OptionRetention.RETENTION_UNKNOWN,
    target: FieldOptions_OptionTargetType.TARGET_TYPE_UNKNOWN,
    targets: [],
    uninterpreted_option: [],
  };
}
export const FieldOptions = {
  encode(message, writer = _m0.Writer.create()) {
    if (
      message.ctype !== undefined &&
      message.ctype !== FieldOptions_CType.STRING
    ) {
      writer.uint32(8).int32(fieldOptions_CTypeToNumber(message.ctype));
    }
    if (message.packed !== undefined && message.packed !== false) {
      writer.uint32(16).bool(message.packed);
    }
    if (
      message.jstype !== undefined &&
      message.jstype !== FieldOptions_JSType.JS_NORMAL
    ) {
      writer.uint32(48).int32(fieldOptions_JSTypeToNumber(message.jstype));
    }
    if (message.lazy !== undefined && message.lazy !== false) {
      writer.uint32(40).bool(message.lazy);
    }
    if (
      message.unverified_lazy !== undefined &&
      message.unverified_lazy !== false
    ) {
      writer.uint32(120).bool(message.unverified_lazy);
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(24).bool(message.deprecated);
    }
    if (message.weak !== undefined && message.weak !== false) {
      writer.uint32(80).bool(message.weak);
    }
    if (message.debug_redact !== undefined && message.debug_redact !== false) {
      writer.uint32(128).bool(message.debug_redact);
    }
    if (
      message.retention !== undefined &&
      message.retention !== FieldOptions_OptionRetention.RETENTION_UNKNOWN
    ) {
      writer
        .uint32(136)
        .int32(fieldOptions_OptionRetentionToNumber(message.retention));
    }
    if (
      message.target !== undefined &&
      message.target !== FieldOptions_OptionTargetType.TARGET_TYPE_UNKNOWN
    ) {
      writer
        .uint32(144)
        .int32(fieldOptions_OptionTargetTypeToNumber(message.target));
    }
    writer.uint32(154).fork();
    for (const v of message.targets) {
      writer.int32(fieldOptions_OptionTargetTypeToNumber(v));
    }
    writer.ldelim();
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.ctype = fieldOptions_CTypeFromJSON(reader.int32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.packed = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.jstype = fieldOptions_JSTypeFromJSON(reader.int32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.lazy = reader.bool();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }
          message.unverified_lazy = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }
          message.weak = reader.bool();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }
          message.debug_redact = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }
          message.retention = fieldOptions_OptionRetentionFromJSON(
            reader.int32(),
          );
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }
          message.target = fieldOptions_OptionTargetTypeFromJSON(
            reader.int32(),
          );
          continue;
        case 19:
          if (tag === 152) {
            message.targets.push(
              fieldOptions_OptionTargetTypeFromJSON(reader.int32()),
            );
            continue;
          }
          if (tag === 154) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.targets.push(
                fieldOptions_OptionTargetTypeFromJSON(reader.int32()),
              );
            }
            continue;
          }
          break;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      ctype: isSet(object.ctype)
        ? fieldOptions_CTypeFromJSON(object.ctype)
        : FieldOptions_CType.STRING,
      packed: isSet(object.packed) ? globalThis.Boolean(object.packed) : false,
      jstype: isSet(object.jstype)
        ? fieldOptions_JSTypeFromJSON(object.jstype)
        : FieldOptions_JSType.JS_NORMAL,
      lazy: isSet(object.lazy) ? globalThis.Boolean(object.lazy) : false,
      unverified_lazy: isSet(object.unverified_lazy)
        ? globalThis.Boolean(object.unverified_lazy)
        : false,
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      weak: isSet(object.weak) ? globalThis.Boolean(object.weak) : false,
      debug_redact: isSet(object.debug_redact)
        ? globalThis.Boolean(object.debug_redact)
        : false,
      retention: isSet(object.retention)
        ? fieldOptions_OptionRetentionFromJSON(object.retention)
        : FieldOptions_OptionRetention.RETENTION_UNKNOWN,
      target: isSet(object.target)
        ? fieldOptions_OptionTargetTypeFromJSON(object.target)
        : FieldOptions_OptionTargetType.TARGET_TYPE_UNKNOWN,
      targets: globalThis.Array.isArray(object?.targets)
        ? object.targets.map((e) => fieldOptions_OptionTargetTypeFromJSON(e))
        : [],
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (
      message.ctype !== undefined &&
      message.ctype !== FieldOptions_CType.STRING
    ) {
      obj.ctype = fieldOptions_CTypeToJSON(message.ctype);
    }
    if (message.packed !== undefined && message.packed !== false) {
      obj.packed = message.packed;
    }
    if (
      message.jstype !== undefined &&
      message.jstype !== FieldOptions_JSType.JS_NORMAL
    ) {
      obj.jstype = fieldOptions_JSTypeToJSON(message.jstype);
    }
    if (message.lazy !== undefined && message.lazy !== false) {
      obj.lazy = message.lazy;
    }
    if (
      message.unverified_lazy !== undefined &&
      message.unverified_lazy !== false
    ) {
      obj.unverified_lazy = message.unverified_lazy;
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.weak !== undefined && message.weak !== false) {
      obj.weak = message.weak;
    }
    if (message.debug_redact !== undefined && message.debug_redact !== false) {
      obj.debug_redact = message.debug_redact;
    }
    if (
      message.retention !== undefined &&
      message.retention !== FieldOptions_OptionRetention.RETENTION_UNKNOWN
    ) {
      obj.retention = fieldOptions_OptionRetentionToJSON(message.retention);
    }
    if (
      message.target !== undefined &&
      message.target !== FieldOptions_OptionTargetType.TARGET_TYPE_UNKNOWN
    ) {
      obj.target = fieldOptions_OptionTargetTypeToJSON(message.target);
    }
    if (message.targets?.length) {
      obj.targets = message.targets.map((e) =>
        fieldOptions_OptionTargetTypeToJSON(e),
      );
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return FieldOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseFieldOptions();
    message.ctype = object.ctype ?? FieldOptions_CType.STRING;
    message.packed = object.packed ?? false;
    message.jstype = object.jstype ?? FieldOptions_JSType.JS_NORMAL;
    message.lazy = object.lazy ?? false;
    message.unverified_lazy = object.unverified_lazy ?? false;
    message.deprecated = object.deprecated ?? false;
    message.weak = object.weak ?? false;
    message.debug_redact = object.debug_redact ?? false;
    message.retention =
      object.retention ?? FieldOptions_OptionRetention.RETENTION_UNKNOWN;
    message.target =
      object.target ?? FieldOptions_OptionTargetType.TARGET_TYPE_UNKNOWN;
    message.targets = object.targets?.map((e) => e) || [];
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};
function createBaseOneofOptions() {
  return { uninterpreted_option: [] };
}
export const OneofOptions = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneofOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return OneofOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseOneofOptions();
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};
function createBaseEnumOptions() {
  return {
    allow_alias: false,
    deprecated: false,
    deprecated_legacy_json_field_conflicts: false,
    uninterpreted_option: [],
  };
}
export const EnumOptions = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.allow_alias !== undefined && message.allow_alias !== false) {
      writer.uint32(16).bool(message.allow_alias);
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(24).bool(message.deprecated);
    }
    if (
      message.deprecated_legacy_json_field_conflicts !== undefined &&
      message.deprecated_legacy_json_field_conflicts !== false
    ) {
      writer.uint32(48).bool(message.deprecated_legacy_json_field_conflicts);
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }
          message.allow_alias = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }
          message.deprecated_legacy_json_field_conflicts = reader.bool();
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      allow_alias: isSet(object.allow_alias)
        ? globalThis.Boolean(object.allow_alias)
        : false,
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      deprecated_legacy_json_field_conflicts: isSet(
        object.deprecated_legacy_json_field_conflicts,
      )
        ? globalThis.Boolean(object.deprecated_legacy_json_field_conflicts)
        : false,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.allow_alias !== undefined && message.allow_alias !== false) {
      obj.allow_alias = message.allow_alias;
    }
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (
      message.deprecated_legacy_json_field_conflicts !== undefined &&
      message.deprecated_legacy_json_field_conflicts !== false
    ) {
      obj.deprecated_legacy_json_field_conflicts =
        message.deprecated_legacy_json_field_conflicts;
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return EnumOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEnumOptions();
    message.allow_alias = object.allow_alias ?? false;
    message.deprecated = object.deprecated ?? false;
    message.deprecated_legacy_json_field_conflicts =
      object.deprecated_legacy_json_field_conflicts ?? false;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};
function createBaseEnumValueOptions() {
  return { deprecated: false, uninterpreted_option: [] };
}
export const EnumValueOptions = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(8).bool(message.deprecated);
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumValueOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return EnumValueOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEnumValueOptions();
    message.deprecated = object.deprecated ?? false;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};
function createBaseServiceOptions() {
  return { deprecated: false, uninterpreted_option: [] };
}
export const ServiceOptions = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(264).bool(message.deprecated);
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 33:
          if (tag !== 264) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return ServiceOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseServiceOptions();
    message.deprecated = object.deprecated ?? false;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};
function createBaseMethodOptions() {
  return {
    deprecated: false,
    idempotency_level: MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN,
    uninterpreted_option: [],
  };
}
export const MethodOptions = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.deprecated !== undefined && message.deprecated !== false) {
      writer.uint32(264).bool(message.deprecated);
    }
    if (
      message.idempotency_level !== undefined &&
      message.idempotency_level !==
        MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN
    ) {
      writer
        .uint32(272)
        .int32(
          methodOptions_IdempotencyLevelToNumber(message.idempotency_level),
        );
    }
    for (const v of message.uninterpreted_option) {
      UninterpretedOption.encode(v, writer.uint32(7994).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 33:
          if (tag !== 264) {
            break;
          }
          message.deprecated = reader.bool();
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }
          message.idempotency_level = methodOptions_IdempotencyLevelFromJSON(
            reader.int32(),
          );
          continue;
        case 999:
          if (tag !== 7994) {
            break;
          }
          message.uninterpreted_option.push(
            UninterpretedOption.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      deprecated: isSet(object.deprecated)
        ? globalThis.Boolean(object.deprecated)
        : false,
      idempotency_level: isSet(object.idempotency_level)
        ? methodOptions_IdempotencyLevelFromJSON(object.idempotency_level)
        : MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN,
      uninterpreted_option: globalThis.Array.isArray(
        object?.uninterpreted_option,
      )
        ? object.uninterpreted_option.map((e) =>
            UninterpretedOption.fromJSON(e),
          )
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.deprecated !== undefined && message.deprecated !== false) {
      obj.deprecated = message.deprecated;
    }
    if (
      message.idempotency_level !== undefined &&
      message.idempotency_level !==
        MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN
    ) {
      obj.idempotency_level = methodOptions_IdempotencyLevelToJSON(
        message.idempotency_level,
      );
    }
    if (message.uninterpreted_option?.length) {
      obj.uninterpreted_option = message.uninterpreted_option.map((e) =>
        UninterpretedOption.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return MethodOptions.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMethodOptions();
    message.deprecated = object.deprecated ?? false;
    message.idempotency_level =
      object.idempotency_level ??
      MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN;
    message.uninterpreted_option =
      object.uninterpreted_option?.map((e) =>
        UninterpretedOption.fromPartial(e),
      ) || [];
    return message;
  },
};
function createBaseUninterpretedOption() {
  return {
    name: [],
    identifier_value: '',
    positive_int_value: '0',
    negative_int_value: '0',
    double_value: 0,
    string_value: new Uint8Array(0),
    aggregate_value: '',
  };
}
export const UninterpretedOption = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.name) {
      UninterpretedOption_NamePart.encode(v, writer.uint32(18).fork()).ldelim();
    }
    if (
      message.identifier_value !== undefined &&
      message.identifier_value !== ''
    ) {
      writer.uint32(26).string(message.identifier_value);
    }
    if (
      message.positive_int_value !== undefined &&
      message.positive_int_value !== '0'
    ) {
      writer.uint32(32).uint64(message.positive_int_value);
    }
    if (
      message.negative_int_value !== undefined &&
      message.negative_int_value !== '0'
    ) {
      writer.uint32(40).int64(message.negative_int_value);
    }
    if (message.double_value !== undefined && message.double_value !== 0) {
      writer.uint32(49).double(message.double_value);
    }
    if (
      message.string_value !== undefined &&
      message.string_value.length !== 0
    ) {
      writer.uint32(58).bytes(message.string_value);
    }
    if (
      message.aggregate_value !== undefined &&
      message.aggregate_value !== ''
    ) {
      writer.uint32(66).string(message.aggregate_value);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUninterpretedOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }
          message.name.push(
            UninterpretedOption_NamePart.decode(reader, reader.uint32()),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.identifier_value = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.positive_int_value = longToString(reader.uint64());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.negative_int_value = longToString(reader.int64());
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }
          message.double_value = reader.double();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.string_value = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.aggregate_value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: globalThis.Array.isArray(object?.name)
        ? object.name.map((e) => UninterpretedOption_NamePart.fromJSON(e))
        : [],
      identifier_value: isSet(object.identifier_value)
        ? globalThis.String(object.identifier_value)
        : '',
      positive_int_value: isSet(object.positive_int_value)
        ? globalThis.String(object.positive_int_value)
        : '0',
      negative_int_value: isSet(object.negative_int_value)
        ? globalThis.String(object.negative_int_value)
        : '0',
      double_value: isSet(object.double_value)
        ? globalThis.Number(object.double_value)
        : 0,
      string_value: isSet(object.string_value)
        ? bytesFromBase64(object.string_value)
        : new Uint8Array(0),
      aggregate_value: isSet(object.aggregate_value)
        ? globalThis.String(object.aggregate_value)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name?.length) {
      obj.name = message.name.map((e) =>
        UninterpretedOption_NamePart.toJSON(e),
      );
    }
    if (
      message.identifier_value !== undefined &&
      message.identifier_value !== ''
    ) {
      obj.identifier_value = message.identifier_value;
    }
    if (
      message.positive_int_value !== undefined &&
      message.positive_int_value !== '0'
    ) {
      obj.positive_int_value = message.positive_int_value;
    }
    if (
      message.negative_int_value !== undefined &&
      message.negative_int_value !== '0'
    ) {
      obj.negative_int_value = message.negative_int_value;
    }
    if (message.double_value !== undefined && message.double_value !== 0) {
      obj.double_value = message.double_value;
    }
    if (
      message.string_value !== undefined &&
      message.string_value.length !== 0
    ) {
      obj.string_value = base64FromBytes(message.string_value);
    }
    if (
      message.aggregate_value !== undefined &&
      message.aggregate_value !== ''
    ) {
      obj.aggregate_value = message.aggregate_value;
    }
    return obj;
  },
  create(base) {
    return UninterpretedOption.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseUninterpretedOption();
    message.name =
      object.name?.map((e) => UninterpretedOption_NamePart.fromPartial(e)) ||
      [];
    message.identifier_value = object.identifier_value ?? '';
    message.positive_int_value = object.positive_int_value ?? '0';
    message.negative_int_value = object.negative_int_value ?? '0';
    message.double_value = object.double_value ?? 0;
    message.string_value = object.string_value ?? new Uint8Array(0);
    message.aggregate_value = object.aggregate_value ?? '';
    return message;
  },
};
function createBaseUninterpretedOption_NamePart() {
  return { name_part: '', is_extension: false };
}
export const UninterpretedOption_NamePart = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name_part !== '') {
      writer.uint32(10).string(message.name_part);
    }
    if (message.is_extension !== false) {
      writer.uint32(16).bool(message.is_extension);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUninterpretedOption_NamePart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name_part = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.is_extension = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name_part: isSet(object.name_part)
        ? globalThis.String(object.name_part)
        : '',
      is_extension: isSet(object.is_extension)
        ? globalThis.Boolean(object.is_extension)
        : false,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name_part !== '') {
      obj.name_part = message.name_part;
    }
    if (message.is_extension !== false) {
      obj.is_extension = message.is_extension;
    }
    return obj;
  },
  create(base) {
    return UninterpretedOption_NamePart.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseUninterpretedOption_NamePart();
    message.name_part = object.name_part ?? '';
    message.is_extension = object.is_extension ?? false;
    return message;
  },
};
function createBaseSourceCodeInfo() {
  return { location: [] };
}
export const SourceCodeInfo = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.location) {
      SourceCodeInfo_Location.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceCodeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.location.push(
            SourceCodeInfo_Location.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      location: globalThis.Array.isArray(object?.location)
        ? object.location.map((e) => SourceCodeInfo_Location.fromJSON(e))
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.location?.length) {
      obj.location = message.location.map((e) =>
        SourceCodeInfo_Location.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return SourceCodeInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSourceCodeInfo();
    message.location =
      object.location?.map((e) => SourceCodeInfo_Location.fromPartial(e)) || [];
    return message;
  },
};
function createBaseSourceCodeInfo_Location() {
  return {
    path: [],
    span: [],
    leading_comments: '',
    trailing_comments: '',
    leading_detached_comments: [],
  };
}
export const SourceCodeInfo_Location = {
  encode(message, writer = _m0.Writer.create()) {
    writer.uint32(10).fork();
    for (const v of message.path) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(18).fork();
    for (const v of message.span) {
      writer.int32(v);
    }
    writer.ldelim();
    if (
      message.leading_comments !== undefined &&
      message.leading_comments !== ''
    ) {
      writer.uint32(26).string(message.leading_comments);
    }
    if (
      message.trailing_comments !== undefined &&
      message.trailing_comments !== ''
    ) {
      writer.uint32(34).string(message.trailing_comments);
    }
    for (const v of message.leading_detached_comments) {
      writer.uint32(50).string(v);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceCodeInfo_Location();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.path.push(reader.int32());
            continue;
          }
          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.path.push(reader.int32());
            }
            continue;
          }
          break;
        case 2:
          if (tag === 16) {
            message.span.push(reader.int32());
            continue;
          }
          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.span.push(reader.int32());
            }
            continue;
          }
          break;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.leading_comments = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.trailing_comments = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.leading_detached_comments.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      path: globalThis.Array.isArray(object?.path)
        ? object.path.map((e) => globalThis.Number(e))
        : [],
      span: globalThis.Array.isArray(object?.span)
        ? object.span.map((e) => globalThis.Number(e))
        : [],
      leading_comments: isSet(object.leading_comments)
        ? globalThis.String(object.leading_comments)
        : '',
      trailing_comments: isSet(object.trailing_comments)
        ? globalThis.String(object.trailing_comments)
        : '',
      leading_detached_comments: globalThis.Array.isArray(
        object?.leading_detached_comments,
      )
        ? object.leading_detached_comments.map((e) => globalThis.String(e))
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.path?.length) {
      obj.path = message.path.map((e) => Math.round(e));
    }
    if (message.span?.length) {
      obj.span = message.span.map((e) => Math.round(e));
    }
    if (
      message.leading_comments !== undefined &&
      message.leading_comments !== ''
    ) {
      obj.leading_comments = message.leading_comments;
    }
    if (
      message.trailing_comments !== undefined &&
      message.trailing_comments !== ''
    ) {
      obj.trailing_comments = message.trailing_comments;
    }
    if (message.leading_detached_comments?.length) {
      obj.leading_detached_comments = message.leading_detached_comments;
    }
    return obj;
  },
  create(base) {
    return SourceCodeInfo_Location.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseSourceCodeInfo_Location();
    message.path = object.path?.map((e) => e) || [];
    message.span = object.span?.map((e) => e) || [];
    message.leading_comments = object.leading_comments ?? '';
    message.trailing_comments = object.trailing_comments ?? '';
    message.leading_detached_comments =
      object.leading_detached_comments?.map((e) => e) || [];
    return message;
  },
};
function createBaseGeneratedCodeInfo() {
  return { annotation: [] };
}
export const GeneratedCodeInfo = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.annotation) {
      GeneratedCodeInfo_Annotation.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeneratedCodeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.annotation.push(
            GeneratedCodeInfo_Annotation.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      annotation: globalThis.Array.isArray(object?.annotation)
        ? object.annotation.map((e) => GeneratedCodeInfo_Annotation.fromJSON(e))
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.annotation?.length) {
      obj.annotation = message.annotation.map((e) =>
        GeneratedCodeInfo_Annotation.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return GeneratedCodeInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGeneratedCodeInfo();
    message.annotation =
      object.annotation?.map((e) =>
        GeneratedCodeInfo_Annotation.fromPartial(e),
      ) || [];
    return message;
  },
};
function createBaseGeneratedCodeInfo_Annotation() {
  return {
    path: [],
    source_file: '',
    begin: 0,
    end: 0,
    semantic: GeneratedCodeInfo_Annotation_Semantic.NONE,
  };
}
export const GeneratedCodeInfo_Annotation = {
  encode(message, writer = _m0.Writer.create()) {
    writer.uint32(10).fork();
    for (const v of message.path) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.source_file !== undefined && message.source_file !== '') {
      writer.uint32(18).string(message.source_file);
    }
    if (message.begin !== undefined && message.begin !== 0) {
      writer.uint32(24).int32(message.begin);
    }
    if (message.end !== undefined && message.end !== 0) {
      writer.uint32(32).int32(message.end);
    }
    if (
      message.semantic !== undefined &&
      message.semantic !== GeneratedCodeInfo_Annotation_Semantic.NONE
    ) {
      writer
        .uint32(40)
        .int32(generatedCodeInfo_Annotation_SemanticToNumber(message.semantic));
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeneratedCodeInfo_Annotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.path.push(reader.int32());
            continue;
          }
          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.path.push(reader.int32());
            }
            continue;
          }
          break;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.source_file = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.begin = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.end = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }
          message.semantic = generatedCodeInfo_Annotation_SemanticFromJSON(
            reader.int32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      path: globalThis.Array.isArray(object?.path)
        ? object.path.map((e) => globalThis.Number(e))
        : [],
      source_file: isSet(object.source_file)
        ? globalThis.String(object.source_file)
        : '',
      begin: isSet(object.begin) ? globalThis.Number(object.begin) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
      semantic: isSet(object.semantic)
        ? generatedCodeInfo_Annotation_SemanticFromJSON(object.semantic)
        : GeneratedCodeInfo_Annotation_Semantic.NONE,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.path?.length) {
      obj.path = message.path.map((e) => Math.round(e));
    }
    if (message.source_file !== undefined && message.source_file !== '') {
      obj.source_file = message.source_file;
    }
    if (message.begin !== undefined && message.begin !== 0) {
      obj.begin = Math.round(message.begin);
    }
    if (message.end !== undefined && message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    if (
      message.semantic !== undefined &&
      message.semantic !== GeneratedCodeInfo_Annotation_Semantic.NONE
    ) {
      obj.semantic = generatedCodeInfo_Annotation_SemanticToJSON(
        message.semantic,
      );
    }
    return obj;
  },
  create(base) {
    return GeneratedCodeInfo_Annotation.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGeneratedCodeInfo_Annotation();
    message.path = object.path?.map((e) => e) || [];
    message.source_file = object.source_file ?? '';
    message.begin = object.begin ?? 0;
    message.end = object.end ?? 0;
    message.semantic =
      object.semantic ?? GeneratedCodeInfo_Annotation_Semantic.NONE;
    return message;
  },
};
function bytesFromBase64(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString('base64');
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(''));
  }
}
function longToString(long) {
  return long.toString();
}
if (_m0.util.Long !== Long) {
  _m0.util.Long = Long;
  _m0.configure();
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=descriptor.js.map
