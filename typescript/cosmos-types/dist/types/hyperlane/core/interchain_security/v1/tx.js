// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/interchain_security/v1/tx.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

export const protobufPackage = 'hyperlane.core.interchain_security.v1';
function createBaseMsgCreateMessageIdMultisigIsm() {
  return { creator: '', validators: [], threshold: 0 };
}
export const MsgCreateMessageIdMultisigIsm = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.creator !== '') {
      writer.uint32(10).string(message.creator);
    }
    for (const v of message.validators) {
      writer.uint32(18).string(v);
    }
    if (message.threshold !== 0) {
      writer.uint32(24).uint32(message.threshold);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMessageIdMultisigIsm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validators.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.threshold = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
      validators: globalThis.Array.isArray(object?.validators)
        ? object.validators.map((e) => globalThis.String(e))
        : [],
      threshold: isSet(object.threshold)
        ? globalThis.Number(object.threshold)
        : 0,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.creator !== '') {
      obj.creator = message.creator;
    }
    if (message.validators?.length) {
      obj.validators = message.validators;
    }
    if (message.threshold !== 0) {
      obj.threshold = Math.round(message.threshold);
    }
    return obj;
  },
  create(base) {
    return MsgCreateMessageIdMultisigIsm.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateMessageIdMultisigIsm();
    message.creator = object.creator ?? '';
    message.validators = object.validators?.map((e) => e) || [];
    message.threshold = object.threshold ?? 0;
    return message;
  },
};
function createBaseMsgCreateMessageIdMultisigIsmResponse() {
  return { id: '' };
}
export const MsgCreateMessageIdMultisigIsmResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMessageIdMultisigIsmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return MsgCreateMessageIdMultisigIsmResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateMessageIdMultisigIsmResponse();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseMsgCreateMerkleRootMultisigIsm() {
  return { creator: '', validators: [], threshold: 0 };
}
export const MsgCreateMerkleRootMultisigIsm = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.creator !== '') {
      writer.uint32(10).string(message.creator);
    }
    for (const v of message.validators) {
      writer.uint32(18).string(v);
    }
    if (message.threshold !== 0) {
      writer.uint32(24).uint32(message.threshold);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMerkleRootMultisigIsm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.validators.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.threshold = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
      validators: globalThis.Array.isArray(object?.validators)
        ? object.validators.map((e) => globalThis.String(e))
        : [],
      threshold: isSet(object.threshold)
        ? globalThis.Number(object.threshold)
        : 0,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.creator !== '') {
      obj.creator = message.creator;
    }
    if (message.validators?.length) {
      obj.validators = message.validators;
    }
    if (message.threshold !== 0) {
      obj.threshold = Math.round(message.threshold);
    }
    return obj;
  },
  create(base) {
    return MsgCreateMerkleRootMultisigIsm.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateMerkleRootMultisigIsm();
    message.creator = object.creator ?? '';
    message.validators = object.validators?.map((e) => e) || [];
    message.threshold = object.threshold ?? 0;
    return message;
  },
};
function createBaseMsgCreateMerkleRootMultisigIsmResponse() {
  return { id: '' };
}
export const MsgCreateMerkleRootMultisigIsmResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMerkleRootMultisigIsmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return MsgCreateMerkleRootMultisigIsmResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateMerkleRootMultisigIsmResponse();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseMsgCreateNoopIsm() {
  return { creator: '' };
}
export const MsgCreateNoopIsm = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.creator !== '') {
      writer.uint32(10).string(message.creator);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNoopIsm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.creator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.creator !== '') {
      obj.creator = message.creator;
    }
    return obj;
  },
  create(base) {
    return MsgCreateNoopIsm.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateNoopIsm();
    message.creator = object.creator ?? '';
    return message;
  },
};
function createBaseMsgCreateNoopIsmResponse() {
  return { id: '' };
}
export const MsgCreateNoopIsmResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNoopIsmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return MsgCreateNoopIsmResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateNoopIsmResponse();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseMsgAnnounceValidator() {
  return {
    validator: '',
    storage_location: '',
    signature: '',
    mailbox_id: '',
    creator: '',
  };
}
export const MsgAnnounceValidator = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.validator !== '') {
      writer.uint32(10).string(message.validator);
    }
    if (message.storage_location !== '') {
      writer.uint32(18).string(message.storage_location);
    }
    if (message.signature !== '') {
      writer.uint32(26).string(message.signature);
    }
    if (message.mailbox_id !== '') {
      writer.uint32(34).string(message.mailbox_id);
    }
    if (message.creator !== '') {
      writer.uint32(42).string(message.creator);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAnnounceValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.validator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.storage_location = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.signature = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.mailbox_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.creator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      validator: isSet(object.validator)
        ? globalThis.String(object.validator)
        : '',
      storage_location: isSet(object.storage_location)
        ? globalThis.String(object.storage_location)
        : '',
      signature: isSet(object.signature)
        ? globalThis.String(object.signature)
        : '',
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
      creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.validator !== '') {
      obj.validator = message.validator;
    }
    if (message.storage_location !== '') {
      obj.storage_location = message.storage_location;
    }
    if (message.signature !== '') {
      obj.signature = message.signature;
    }
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.creator !== '') {
      obj.creator = message.creator;
    }
    return obj;
  },
  create(base) {
    return MsgAnnounceValidator.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgAnnounceValidator();
    message.validator = object.validator ?? '';
    message.storage_location = object.storage_location ?? '';
    message.signature = object.signature ?? '';
    message.mailbox_id = object.mailbox_id ?? '';
    message.creator = object.creator ?? '';
    return message;
  },
};
function createBaseMsgAnnounceValidatorResponse() {
  return {};
}
export const MsgAnnounceValidatorResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAnnounceValidatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgAnnounceValidatorResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgAnnounceValidatorResponse();
    return message;
  },
};
export const MsgServiceName = 'hyperlane.core.interchain_security.v1.Msg';
export class MsgClientImpl {
  rpc;
  service;
  constructor(rpc, opts) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateMessageIdMultisigIsm =
      this.CreateMessageIdMultisigIsm.bind(this);
    this.CreateMerkleRootMultisigIsm =
      this.CreateMerkleRootMultisigIsm.bind(this);
    this.CreateNoopIsm = this.CreateNoopIsm.bind(this);
    this.AnnounceValidator = this.AnnounceValidator.bind(this);
  }
  CreateMessageIdMultisigIsm(request) {
    const data = MsgCreateMessageIdMultisigIsm.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateMessageIdMultisigIsm',
      data,
    );
    return promise.then((data) =>
      MsgCreateMessageIdMultisigIsmResponse.decode(_m0.Reader.create(data)),
    );
  }
  CreateMerkleRootMultisigIsm(request) {
    const data = MsgCreateMerkleRootMultisigIsm.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateMerkleRootMultisigIsm',
      data,
    );
    return promise.then((data) =>
      MsgCreateMerkleRootMultisigIsmResponse.decode(_m0.Reader.create(data)),
    );
  }
  CreateNoopIsm(request) {
    const data = MsgCreateNoopIsm.encode(request).finish();
    const promise = this.rpc.request(this.service, 'CreateNoopIsm', data);
    return promise.then((data) =>
      MsgCreateNoopIsmResponse.decode(_m0.Reader.create(data)),
    );
  }
  AnnounceValidator(request) {
    const data = MsgAnnounceValidator.encode(request).finish();
    const promise = this.rpc.request(this.service, 'AnnounceValidator', data);
    return promise.then((data) =>
      MsgAnnounceValidatorResponse.decode(_m0.Reader.create(data)),
    );
  }
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map
