// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/v1/tx.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

export const protobufPackage = 'hyperlane.core.v1';
function createBaseMsgCreateMailbox() {
  return {
    owner: '',
    local_domain: 0,
    default_ism: '',
    default_hook: '',
    required_hook: '',
  };
}
export const MsgCreateMailbox = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.local_domain !== 0) {
      writer.uint32(16).uint32(message.local_domain);
    }
    if (message.default_ism !== '') {
      writer.uint32(26).string(message.default_ism);
    }
    if (message.default_hook !== '') {
      writer.uint32(34).string(message.default_hook);
    }
    if (message.required_hook !== '') {
      writer.uint32(42).string(message.required_hook);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMailbox();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.local_domain = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.default_ism = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.default_hook = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.required_hook = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      local_domain: isSet(object.local_domain)
        ? globalThis.Number(object.local_domain)
        : 0,
      default_ism: isSet(object.default_ism)
        ? globalThis.String(object.default_ism)
        : '',
      default_hook: isSet(object.default_hook)
        ? globalThis.String(object.default_hook)
        : '',
      required_hook: isSet(object.required_hook)
        ? globalThis.String(object.required_hook)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.local_domain !== 0) {
      obj.local_domain = Math.round(message.local_domain);
    }
    if (message.default_ism !== '') {
      obj.default_ism = message.default_ism;
    }
    if (message.default_hook !== '') {
      obj.default_hook = message.default_hook;
    }
    if (message.required_hook !== '') {
      obj.required_hook = message.required_hook;
    }
    return obj;
  },
  create(base) {
    return MsgCreateMailbox.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateMailbox();
    message.owner = object.owner ?? '';
    message.local_domain = object.local_domain ?? 0;
    message.default_ism = object.default_ism ?? '';
    message.default_hook = object.default_hook ?? '';
    message.required_hook = object.required_hook ?? '';
    return message;
  },
};
function createBaseMsgCreateMailboxResponse() {
  return { id: '' };
}
export const MsgCreateMailboxResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMailboxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return MsgCreateMailboxResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateMailboxResponse();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseMsgSetMailbox() {
  return {
    owner: '',
    mailbox_id: '',
    default_ism: '',
    default_hook: '',
    required_hook: '',
    new_owner: '',
  };
}
export const MsgSetMailbox = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.mailbox_id !== '') {
      writer.uint32(18).string(message.mailbox_id);
    }
    if (message.default_ism !== '') {
      writer.uint32(26).string(message.default_ism);
    }
    if (message.default_hook !== '') {
      writer.uint32(34).string(message.default_hook);
    }
    if (message.required_hook !== '') {
      writer.uint32(42).string(message.required_hook);
    }
    if (message.new_owner !== '') {
      writer.uint32(50).string(message.new_owner);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMailbox();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.mailbox_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.default_ism = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.default_hook = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.required_hook = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.new_owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
      default_ism: isSet(object.default_ism)
        ? globalThis.String(object.default_ism)
        : '',
      default_hook: isSet(object.default_hook)
        ? globalThis.String(object.default_hook)
        : '',
      required_hook: isSet(object.required_hook)
        ? globalThis.String(object.required_hook)
        : '',
      new_owner: isSet(object.new_owner)
        ? globalThis.String(object.new_owner)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.default_ism !== '') {
      obj.default_ism = message.default_ism;
    }
    if (message.default_hook !== '') {
      obj.default_hook = message.default_hook;
    }
    if (message.required_hook !== '') {
      obj.required_hook = message.required_hook;
    }
    if (message.new_owner !== '') {
      obj.new_owner = message.new_owner;
    }
    return obj;
  },
  create(base) {
    return MsgSetMailbox.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgSetMailbox();
    message.owner = object.owner ?? '';
    message.mailbox_id = object.mailbox_id ?? '';
    message.default_ism = object.default_ism ?? '';
    message.default_hook = object.default_hook ?? '';
    message.required_hook = object.required_hook ?? '';
    message.new_owner = object.new_owner ?? '';
    return message;
  },
};
function createBaseMsgSetMailboxResponse() {
  return {};
}
export const MsgSetMailboxResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetMailboxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgSetMailboxResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgSetMailboxResponse();
    return message;
  },
};
function createBaseMsgProcessMessage() {
  return { mailbox_id: '', relayer: '', metadata: '', message: '' };
}
export const MsgProcessMessage = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.mailbox_id !== '') {
      writer.uint32(10).string(message.mailbox_id);
    }
    if (message.relayer !== '') {
      writer.uint32(18).string(message.relayer);
    }
    if (message.metadata !== '') {
      writer.uint32(26).string(message.metadata);
    }
    if (message.message !== '') {
      writer.uint32(34).string(message.message);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgProcessMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.mailbox_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.relayer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.metadata = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
      relayer: isSet(object.relayer) ? globalThis.String(object.relayer) : '',
      metadata: isSet(object.metadata)
        ? globalThis.String(object.metadata)
        : '',
      message: isSet(object.message) ? globalThis.String(object.message) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.relayer !== '') {
      obj.relayer = message.relayer;
    }
    if (message.metadata !== '') {
      obj.metadata = message.metadata;
    }
    if (message.message !== '') {
      obj.message = message.message;
    }
    return obj;
  },
  create(base) {
    return MsgProcessMessage.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgProcessMessage();
    message.mailbox_id = object.mailbox_id ?? '';
    message.relayer = object.relayer ?? '';
    message.metadata = object.metadata ?? '';
    message.message = object.message ?? '';
    return message;
  },
};
function createBaseMsgProcessMessageResponse() {
  return {};
}
export const MsgProcessMessageResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgProcessMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgProcessMessageResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgProcessMessageResponse();
    return message;
  },
};
export const MsgServiceName = 'hyperlane.core.v1.Msg';
export class MsgClientImpl {
  rpc;
  service;
  constructor(rpc, opts) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateMailbox = this.CreateMailbox.bind(this);
    this.SetMailbox = this.SetMailbox.bind(this);
    this.ProcessMessage = this.ProcessMessage.bind(this);
  }
  CreateMailbox(request) {
    const data = MsgCreateMailbox.encode(request).finish();
    const promise = this.rpc.request(this.service, 'CreateMailbox', data);
    return promise.then((data) =>
      MsgCreateMailboxResponse.decode(_m0.Reader.create(data)),
    );
  }
  SetMailbox(request) {
    const data = MsgSetMailbox.encode(request).finish();
    const promise = this.rpc.request(this.service, 'SetMailbox', data);
    return promise.then((data) =>
      MsgSetMailboxResponse.decode(_m0.Reader.create(data)),
    );
  }
  ProcessMessage(request) {
    const data = MsgProcessMessage.encode(request).finish();
    const promise = this.rpc.request(this.service, 'ProcessMessage', data);
    return promise.then((data) =>
      MsgProcessMessageResponse.decode(_m0.Reader.create(data)),
    );
  }
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map
