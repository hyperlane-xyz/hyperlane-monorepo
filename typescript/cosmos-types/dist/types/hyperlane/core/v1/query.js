// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/v1/query.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

import {
  PageRequest,
  PageResponse,
} from '../../../cosmos/base/query/v1beta1/pagination.js';

import { Mailbox } from './types.js';

export const protobufPackage = 'hyperlane.core.v1';
function createBaseQueryMailboxesRequest() {
  return { pagination: undefined };
}
export const QueryMailboxesRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMailboxesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryMailboxesRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryMailboxesRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryMailboxesResponse() {
  return { mailboxes: [], pagination: undefined };
}
export const QueryMailboxesResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.mailboxes) {
      Mailbox.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMailboxesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.mailboxes.push(Mailbox.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      mailboxes: globalThis.Array.isArray(object?.mailboxes)
        ? object.mailboxes.map((e) => Mailbox.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.mailboxes?.length) {
      obj.mailboxes = message.mailboxes.map((e) => Mailbox.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryMailboxesResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryMailboxesResponse();
    message.mailboxes =
      object.mailboxes?.map((e) => Mailbox.fromPartial(e)) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryMailboxRequest() {
  return { id: '' };
}
export const QueryMailboxRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMailboxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return QueryMailboxRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryMailboxRequest();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseQueryMailboxResponse() {
  return { mailbox: undefined };
}
export const QueryMailboxResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.mailbox !== undefined) {
      Mailbox.encode(message.mailbox, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMailboxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.mailbox = Mailbox.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      mailbox: isSet(object.mailbox)
        ? Mailbox.fromJSON(object.mailbox)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.mailbox !== undefined) {
      obj.mailbox = Mailbox.toJSON(message.mailbox);
    }
    return obj;
  },
  create(base) {
    return QueryMailboxResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryMailboxResponse();
    message.mailbox =
      object.mailbox !== undefined && object.mailbox !== null
        ? Mailbox.fromPartial(object.mailbox)
        : undefined;
    return message;
  },
};
function createBaseQueryDeliveredRequest() {
  return { id: '', message_id: '' };
}
export const QueryDeliveredRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.message_id !== '') {
      writer.uint32(18).string(message.message_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeliveredRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.message_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      message_id: isSet(object.message_id)
        ? globalThis.String(object.message_id)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.message_id !== '') {
      obj.message_id = message.message_id;
    }
    return obj;
  },
  create(base) {
    return QueryDeliveredRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDeliveredRequest();
    message.id = object.id ?? '';
    message.message_id = object.message_id ?? '';
    return message;
  },
};
function createBaseQueryDeliveredResponse() {
  return { delivered: false };
}
export const QueryDeliveredResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.delivered !== false) {
      writer.uint32(8).bool(message.delivered);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeliveredResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.delivered = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      delivered: isSet(object.delivered)
        ? globalThis.Boolean(object.delivered)
        : false,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.delivered !== false) {
      obj.delivered = message.delivered;
    }
    return obj;
  },
  create(base) {
    return QueryDeliveredResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDeliveredResponse();
    message.delivered = object.delivered ?? false;
    return message;
  },
};
function createBaseQueryRecipientIsmRequest() {
  return { recipient: '' };
}
export const QueryRecipientIsmRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.recipient !== '') {
      writer.uint32(10).string(message.recipient);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRecipientIsmRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.recipient = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      recipient: isSet(object.recipient)
        ? globalThis.String(object.recipient)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.recipient !== '') {
      obj.recipient = message.recipient;
    }
    return obj;
  },
  create(base) {
    return QueryRecipientIsmRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryRecipientIsmRequest();
    message.recipient = object.recipient ?? '';
    return message;
  },
};
function createBaseQueryRecipientIsmResponse() {
  return { ism_id: '' };
}
export const QueryRecipientIsmResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.ism_id !== '') {
      writer.uint32(10).string(message.ism_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRecipientIsmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.ism_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    return obj;
  },
  create(base) {
    return QueryRecipientIsmResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryRecipientIsmResponse();
    message.ism_id = object.ism_id ?? '';
    return message;
  },
};
function createBaseQueryVerifyDryRunRequest() {
  return { ism_id: '', message: '', metadata: '' };
}
export const QueryVerifyDryRunRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.ism_id !== '') {
      writer.uint32(10).string(message.ism_id);
    }
    if (message.message !== '') {
      writer.uint32(18).string(message.message);
    }
    if (message.metadata !== '') {
      writer.uint32(26).string(message.metadata);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryVerifyDryRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.ism_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
      message: isSet(object.message) ? globalThis.String(object.message) : '',
      metadata: isSet(object.metadata)
        ? globalThis.String(object.metadata)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    if (message.message !== '') {
      obj.message = message.message;
    }
    if (message.metadata !== '') {
      obj.metadata = message.metadata;
    }
    return obj;
  },
  create(base) {
    return QueryVerifyDryRunRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryVerifyDryRunRequest();
    message.ism_id = object.ism_id ?? '';
    message.message = object.message ?? '';
    message.metadata = object.metadata ?? '';
    return message;
  },
};
function createBaseQueryVerifyDryRunResponse() {
  return { verified: false };
}
export const QueryVerifyDryRunResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.verified !== false) {
      writer.uint32(8).bool(message.verified);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryVerifyDryRunResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.verified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      verified: isSet(object.verified)
        ? globalThis.Boolean(object.verified)
        : false,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.verified !== false) {
      obj.verified = message.verified;
    }
    return obj;
  },
  create(base) {
    return QueryVerifyDryRunResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryVerifyDryRunResponse();
    message.verified = object.verified ?? false;
    return message;
  },
};
export const QueryServiceName = 'hyperlane.core.v1.Query';
export class QueryClientImpl {
  rpc;
  service;
  constructor(rpc, opts) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Mailboxes = this.Mailboxes.bind(this);
    this.Mailbox = this.Mailbox.bind(this);
    this.Delivered = this.Delivered.bind(this);
    this.RecipientIsm = this.RecipientIsm.bind(this);
    this.VerifyDryRun = this.VerifyDryRun.bind(this);
  }
  Mailboxes(request) {
    const data = QueryMailboxesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Mailboxes', data);
    return promise.then((data) =>
      QueryMailboxesResponse.decode(_m0.Reader.create(data)),
    );
  }
  Mailbox(request) {
    const data = QueryMailboxRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Mailbox', data);
    return promise.then((data) =>
      QueryMailboxResponse.decode(_m0.Reader.create(data)),
    );
  }
  Delivered(request) {
    const data = QueryDeliveredRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Delivered', data);
    return promise.then((data) =>
      QueryDeliveredResponse.decode(_m0.Reader.create(data)),
    );
  }
  RecipientIsm(request) {
    const data = QueryRecipientIsmRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'RecipientIsm', data);
    return promise.then((data) =>
      QueryRecipientIsmResponse.decode(_m0.Reader.create(data)),
    );
  }
  VerifyDryRun(request) {
    const data = QueryVerifyDryRunRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'VerifyDryRun', data);
    return promise.then((data) =>
      QueryVerifyDryRunResponse.decode(_m0.Reader.create(data)),
    );
  }
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map
