// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/post_dispatch/v1/events.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

export const protobufPackage = 'hyperlane.core.post_dispatch.v1';
function createBaseEventCreateMerkleTreeHook() {
  return { id: '', mailbox_id: '', owner: '' };
}
export const EventCreateMerkleTreeHook = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.mailbox_id !== '') {
      writer.uint32(18).string(message.mailbox_id);
    }
    if (message.owner !== '') {
      writer.uint32(26).string(message.owner);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateMerkleTreeHook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.mailbox_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    return obj;
  },
  create(base) {
    return EventCreateMerkleTreeHook.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEventCreateMerkleTreeHook();
    message.id = object.id ?? '';
    message.mailbox_id = object.mailbox_id ?? '';
    message.owner = object.owner ?? '';
    return message;
  },
};
function createBaseInsertedIntoTree() {
  return { message_id: '', index: 0, merkle_tree_hook_id: '' };
}
export const InsertedIntoTree = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.message_id !== '') {
      writer.uint32(10).string(message.message_id);
    }
    if (message.index !== 0) {
      writer.uint32(16).uint32(message.index);
    }
    if (message.merkle_tree_hook_id !== '') {
      writer.uint32(26).string(message.merkle_tree_hook_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertedIntoTree();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message_id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.index = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.merkle_tree_hook_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_id: isSet(object.message_id)
        ? globalThis.String(object.message_id)
        : '',
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      merkle_tree_hook_id: isSet(object.merkle_tree_hook_id)
        ? globalThis.String(object.merkle_tree_hook_id)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.message_id !== '') {
      obj.message_id = message.message_id;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.merkle_tree_hook_id !== '') {
      obj.merkle_tree_hook_id = message.merkle_tree_hook_id;
    }
    return obj;
  },
  create(base) {
    return InsertedIntoTree.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseInsertedIntoTree();
    message.message_id = object.message_id ?? '';
    message.index = object.index ?? 0;
    message.merkle_tree_hook_id = object.merkle_tree_hook_id ?? '';
    return message;
  },
};
function createBaseGasPayment() {
  return {
    message_id: '',
    destination: 0,
    gas_amount: '',
    payment: '',
    igp_id: '',
  };
}
export const GasPayment = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.message_id !== '') {
      writer.uint32(10).string(message.message_id);
    }
    if (message.destination !== 0) {
      writer.uint32(16).uint32(message.destination);
    }
    if (message.gas_amount !== '') {
      writer.uint32(26).string(message.gas_amount);
    }
    if (message.payment !== '') {
      writer.uint32(34).string(message.payment);
    }
    if (message.igp_id !== '') {
      writer.uint32(42).string(message.igp_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGasPayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message_id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.destination = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.gas_amount = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.payment = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.igp_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_id: isSet(object.message_id)
        ? globalThis.String(object.message_id)
        : '',
      destination: isSet(object.destination)
        ? globalThis.Number(object.destination)
        : 0,
      gas_amount: isSet(object.gas_amount)
        ? globalThis.String(object.gas_amount)
        : '',
      payment: isSet(object.payment) ? globalThis.String(object.payment) : '',
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.message_id !== '') {
      obj.message_id = message.message_id;
    }
    if (message.destination !== 0) {
      obj.destination = Math.round(message.destination);
    }
    if (message.gas_amount !== '') {
      obj.gas_amount = message.gas_amount;
    }
    if (message.payment !== '') {
      obj.payment = message.payment;
    }
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    return obj;
  },
  create(base) {
    return GasPayment.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGasPayment();
    message.message_id = object.message_id ?? '';
    message.destination = object.destination ?? 0;
    message.gas_amount = object.gas_amount ?? '';
    message.payment = object.payment ?? '';
    message.igp_id = object.igp_id ?? '';
    return message;
  },
};
function createBaseEventCreateNoopHook() {
  return { id: '', owner: '' };
}
export const EventCreateNoopHook = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateNoopHook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    return obj;
  },
  create(base) {
    return EventCreateNoopHook.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseEventCreateNoopHook();
    message.id = object.id ?? '';
    message.owner = object.owner ?? '';
    return message;
  },
};
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=events.js.map
