// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/post_dispatch/v1/query.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

import {
  PageRequest,
  PageResponse,
} from '../../../../cosmos/base/query/v1beta1/pagination.js';
import { Coin } from '../../../../cosmos/base/v1beta1/coin.js';

import {
  DestinationGasConfig,
  InterchainGasPaymaster,
  NoopHook,
} from './types.js';

export const protobufPackage = 'hyperlane.core.post_dispatch.v1';
function createBaseQueryIgpsRequest() {
  return { pagination: undefined };
}
export const QueryIgpsRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryIgpsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryIgpsRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryIgpsResponse() {
  return { igps: [], pagination: undefined };
}
export const QueryIgpsResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.igps) {
      InterchainGasPaymaster.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.igps.push(
            InterchainGasPaymaster.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      igps: globalThis.Array.isArray(object?.igps)
        ? object.igps.map((e) => InterchainGasPaymaster.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.igps?.length) {
      obj.igps = message.igps.map((e) => InterchainGasPaymaster.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryIgpsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryIgpsResponse();
    message.igps =
      object.igps?.map((e) => InterchainGasPaymaster.fromPartial(e)) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryIgpRequest() {
  return { id: '' };
}
export const QueryIgpRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return QueryIgpRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryIgpRequest();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseQueryIgpResponse() {
  return { igp: undefined };
}
export const QueryIgpResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.igp !== undefined) {
      InterchainGasPaymaster.encode(
        message.igp,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIgpResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.igp = InterchainGasPaymaster.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      igp: isSet(object.igp)
        ? InterchainGasPaymaster.fromJSON(object.igp)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.igp !== undefined) {
      obj.igp = InterchainGasPaymaster.toJSON(message.igp);
    }
    return obj;
  },
  create(base) {
    return QueryIgpResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryIgpResponse();
    message.igp =
      object.igp !== undefined && object.igp !== null
        ? InterchainGasPaymaster.fromPartial(object.igp)
        : undefined;
    return message;
  },
};
function createBaseQueryDestinationGasConfigsRequest() {
  return { id: '', pagination: undefined };
}
export const QueryDestinationGasConfigsRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDestinationGasConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDestinationGasConfigsRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDestinationGasConfigsRequest();
    message.id = object.id ?? '';
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryDestinationGasConfigsResponse() {
  return { destination_gas_configs: [], pagination: undefined };
}
export const QueryDestinationGasConfigsResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.destination_gas_configs) {
      DestinationGasConfig.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDestinationGasConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.destination_gas_configs.push(
            DestinationGasConfig.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      destination_gas_configs: globalThis.Array.isArray(
        object?.destination_gas_configs,
      )
        ? object.destination_gas_configs.map((e) =>
            DestinationGasConfig.fromJSON(e),
          )
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.destination_gas_configs?.length) {
      obj.destination_gas_configs = message.destination_gas_configs.map((e) =>
        DestinationGasConfig.toJSON(e),
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryDestinationGasConfigsResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryDestinationGasConfigsResponse();
    message.destination_gas_configs =
      object.destination_gas_configs?.map((e) =>
        DestinationGasConfig.fromPartial(e),
      ) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryQuoteGasPaymentRequest() {
  return { igp_id: '', destination_domain: '', gas_limit: '' };
}
export const QueryQuoteGasPaymentRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.igp_id !== '') {
      writer.uint32(10).string(message.igp_id);
    }
    if (message.destination_domain !== '') {
      writer.uint32(18).string(message.destination_domain);
    }
    if (message.gas_limit !== '') {
      writer.uint32(26).string(message.gas_limit);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQuoteGasPaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.igp_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.destination_domain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.gas_limit = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
      destination_domain: isSet(object.destination_domain)
        ? globalThis.String(object.destination_domain)
        : '',
      gas_limit: isSet(object.gas_limit)
        ? globalThis.String(object.gas_limit)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    if (message.destination_domain !== '') {
      obj.destination_domain = message.destination_domain;
    }
    if (message.gas_limit !== '') {
      obj.gas_limit = message.gas_limit;
    }
    return obj;
  },
  create(base) {
    return QueryQuoteGasPaymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryQuoteGasPaymentRequest();
    message.igp_id = object.igp_id ?? '';
    message.destination_domain = object.destination_domain ?? '';
    message.gas_limit = object.gas_limit ?? '';
    return message;
  },
};
function createBaseQueryQuoteGasPaymentResponse() {
  return { gas_payment: [] };
}
export const QueryQuoteGasPaymentResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.gas_payment) {
      Coin.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryQuoteGasPaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.gas_payment.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      gas_payment: globalThis.Array.isArray(object?.gas_payment)
        ? object.gas_payment.map((e) => Coin.fromJSON(e))
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.gas_payment?.length) {
      obj.gas_payment = message.gas_payment.map((e) => Coin.toJSON(e));
    }
    return obj;
  },
  create(base) {
    return QueryQuoteGasPaymentResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryQuoteGasPaymentResponse();
    message.gas_payment =
      object.gas_payment?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};
function createBaseQueryMerkleTreeHooksRequest() {
  return { pagination: undefined };
}
export const QueryMerkleTreeHooksRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHooksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryMerkleTreeHooksRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryMerkleTreeHooksRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryMerkleTreeHooksResponse() {
  return { merkle_tree_hooks: [], pagination: undefined };
}
export const QueryMerkleTreeHooksResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.merkle_tree_hooks) {
      WrappedMerkleTreeHookResponse.encode(
        v,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHooksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.merkle_tree_hooks.push(
            WrappedMerkleTreeHookResponse.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      merkle_tree_hooks: globalThis.Array.isArray(object?.merkle_tree_hooks)
        ? object.merkle_tree_hooks.map((e) =>
            WrappedMerkleTreeHookResponse.fromJSON(e),
          )
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.merkle_tree_hooks?.length) {
      obj.merkle_tree_hooks = message.merkle_tree_hooks.map((e) =>
        WrappedMerkleTreeHookResponse.toJSON(e),
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryMerkleTreeHooksResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryMerkleTreeHooksResponse();
    message.merkle_tree_hooks =
      object.merkle_tree_hooks?.map((e) =>
        WrappedMerkleTreeHookResponse.fromPartial(e),
      ) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryMerkleTreeHookRequest() {
  return { id: '' };
}
export const QueryMerkleTreeHookRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return QueryMerkleTreeHookRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryMerkleTreeHookRequest();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseQueryMerkleTreeHookResponse() {
  return { merkle_tree_hook: undefined };
}
export const QueryMerkleTreeHookResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.merkle_tree_hook !== undefined) {
      WrappedMerkleTreeHookResponse.encode(
        message.merkle_tree_hook,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMerkleTreeHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.merkle_tree_hook = WrappedMerkleTreeHookResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      merkle_tree_hook: isSet(object.merkle_tree_hook)
        ? WrappedMerkleTreeHookResponse.fromJSON(object.merkle_tree_hook)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.merkle_tree_hook !== undefined) {
      obj.merkle_tree_hook = WrappedMerkleTreeHookResponse.toJSON(
        message.merkle_tree_hook,
      );
    }
    return obj;
  },
  create(base) {
    return QueryMerkleTreeHookResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryMerkleTreeHookResponse();
    message.merkle_tree_hook =
      object.merkle_tree_hook !== undefined && object.merkle_tree_hook !== null
        ? WrappedMerkleTreeHookResponse.fromPartial(object.merkle_tree_hook)
        : undefined;
    return message;
  },
};
function createBaseWrappedMerkleTreeHookResponse() {
  return { id: '', owner: '', mailbox_id: '', merkle_tree: undefined };
}
export const WrappedMerkleTreeHookResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (message.mailbox_id !== '') {
      writer.uint32(26).string(message.mailbox_id);
    }
    if (message.merkle_tree !== undefined) {
      TreeResponse.encode(
        message.merkle_tree,
        writer.uint32(34).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrappedMerkleTreeHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.mailbox_id = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.merkle_tree = TreeResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
      merkle_tree: isSet(object.merkle_tree)
        ? TreeResponse.fromJSON(object.merkle_tree)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.merkle_tree !== undefined) {
      obj.merkle_tree = TreeResponse.toJSON(message.merkle_tree);
    }
    return obj;
  },
  create(base) {
    return WrappedMerkleTreeHookResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseWrappedMerkleTreeHookResponse();
    message.id = object.id ?? '';
    message.owner = object.owner ?? '';
    message.mailbox_id = object.mailbox_id ?? '';
    message.merkle_tree =
      object.merkle_tree !== undefined && object.merkle_tree !== null
        ? TreeResponse.fromPartial(object.merkle_tree)
        : undefined;
    return message;
  },
};
function createBaseTreeResponse() {
  return { leafs: [], count: 0, root: new Uint8Array(0) };
}
export const TreeResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.leafs) {
      writer.uint32(10).bytes(v);
    }
    if (message.count !== 0) {
      writer.uint32(16).uint32(message.count);
    }
    if (message.root.length !== 0) {
      writer.uint32(26).bytes(message.root);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTreeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.leafs.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.count = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.root = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      leafs: globalThis.Array.isArray(object?.leafs)
        ? object.leafs.map((e) => bytesFromBase64(e))
        : [],
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      root: isSet(object.root)
        ? bytesFromBase64(object.root)
        : new Uint8Array(0),
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.leafs?.length) {
      obj.leafs = message.leafs.map((e) => base64FromBytes(e));
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.root.length !== 0) {
      obj.root = base64FromBytes(message.root);
    }
    return obj;
  },
  create(base) {
    return TreeResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseTreeResponse();
    message.leafs = object.leafs?.map((e) => e) || [];
    message.count = object.count ?? 0;
    message.root = object.root ?? new Uint8Array(0);
    return message;
  },
};
function createBaseQueryNoopHookRequest() {
  return { id: '' };
}
export const QueryNoopHookRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return QueryNoopHookRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryNoopHookRequest();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseQueryNoopHookResponse() {
  return { noop_hook: undefined };
}
export const QueryNoopHookResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.noop_hook !== undefined) {
      NoopHook.encode(message.noop_hook, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.noop_hook = NoopHook.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      noop_hook: isSet(object.noop_hook)
        ? NoopHook.fromJSON(object.noop_hook)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.noop_hook !== undefined) {
      obj.noop_hook = NoopHook.toJSON(message.noop_hook);
    }
    return obj;
  },
  create(base) {
    return QueryNoopHookResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryNoopHookResponse();
    message.noop_hook =
      object.noop_hook !== undefined && object.noop_hook !== null
        ? NoopHook.fromPartial(object.noop_hook)
        : undefined;
    return message;
  },
};
function createBaseQueryNoopHooksRequest() {
  return { pagination: undefined };
}
export const QueryNoopHooksRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHooksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryNoopHooksRequest.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryNoopHooksRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
function createBaseQueryNoopHooksResponse() {
  return { noop_hooks: [], pagination: undefined };
}
export const QueryNoopHooksResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.noop_hooks) {
      NoopHook.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNoopHooksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.noop_hooks.push(NoopHook.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      noop_hooks: globalThis.Array.isArray(object?.noop_hooks)
        ? object.noop_hooks.map((e) => NoopHook.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.noop_hooks?.length) {
      obj.noop_hooks = message.noop_hooks.map((e) => NoopHook.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },
  create(base) {
    return QueryNoopHooksResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseQueryNoopHooksResponse();
    message.noop_hooks =
      object.noop_hooks?.map((e) => NoopHook.fromPartial(e)) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};
export const QueryServiceName = 'hyperlane.core.post_dispatch.v1.Query';
export class QueryClientImpl {
  rpc;
  service;
  constructor(rpc, opts) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Igps = this.Igps.bind(this);
    this.Igp = this.Igp.bind(this);
    this.DestinationGasConfigs = this.DestinationGasConfigs.bind(this);
    this.QuoteGasPayment = this.QuoteGasPayment.bind(this);
    this.MerkleTreeHooks = this.MerkleTreeHooks.bind(this);
    this.MerkleTreeHook = this.MerkleTreeHook.bind(this);
    this.NoopHooks = this.NoopHooks.bind(this);
    this.NoopHook = this.NoopHook.bind(this);
  }
  Igps(request) {
    const data = QueryIgpsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Igps', data);
    return promise.then((data) =>
      QueryIgpsResponse.decode(_m0.Reader.create(data)),
    );
  }
  Igp(request) {
    const data = QueryIgpRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Igp', data);
    return promise.then((data) =>
      QueryIgpResponse.decode(_m0.Reader.create(data)),
    );
  }
  DestinationGasConfigs(request) {
    const data = QueryDestinationGasConfigsRequest.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'DestinationGasConfigs',
      data,
    );
    return promise.then((data) =>
      QueryDestinationGasConfigsResponse.decode(_m0.Reader.create(data)),
    );
  }
  QuoteGasPayment(request) {
    const data = QueryQuoteGasPaymentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'QuoteGasPayment', data);
    return promise.then((data) =>
      QueryQuoteGasPaymentResponse.decode(_m0.Reader.create(data)),
    );
  }
  MerkleTreeHooks(request) {
    const data = QueryMerkleTreeHooksRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'MerkleTreeHooks', data);
    return promise.then((data) =>
      QueryMerkleTreeHooksResponse.decode(_m0.Reader.create(data)),
    );
  }
  MerkleTreeHook(request) {
    const data = QueryMerkleTreeHookRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'MerkleTreeHook', data);
    return promise.then((data) =>
      QueryMerkleTreeHookResponse.decode(_m0.Reader.create(data)),
    );
  }
  NoopHooks(request) {
    const data = QueryNoopHooksRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'NoopHooks', data);
    return promise.then((data) =>
      QueryNoopHooksResponse.decode(_m0.Reader.create(data)),
    );
  }
  NoopHook(request) {
    const data = QueryNoopHookRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'NoopHook', data);
    return promise.then((data) =>
      QueryNoopHookResponse.decode(_m0.Reader.create(data)),
    );
  }
}
function bytesFromBase64(b64) {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}
function base64FromBytes(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString('base64');
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(''));
  }
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map
