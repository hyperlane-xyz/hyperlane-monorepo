// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/post_dispatch/v1/tx.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

import { Coin } from '../../../../cosmos/base/v1beta1/coin.js';

import { DestinationGasConfig } from './types.js';

export const protobufPackage = 'hyperlane.core.post_dispatch.v1';
function createBaseMsgCreateIgp() {
  return { owner: '', denom: '' };
}
export const MsgCreateIgp = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.denom !== '') {
      writer.uint32(18).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateIgp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      denom: isSet(object.denom) ? globalThis.String(object.denom) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.denom !== '') {
      obj.denom = message.denom;
    }
    return obj;
  },
  create(base) {
    return MsgCreateIgp.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateIgp();
    message.owner = object.owner ?? '';
    message.denom = object.denom ?? '';
    return message;
  },
};
function createBaseMsgCreateIgpResponse() {
  return { id: '' };
}
export const MsgCreateIgpResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateIgpResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return MsgCreateIgpResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateIgpResponse();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseMsgSetIgpOwner() {
  return { owner: '', igp_id: '', new_owner: '' };
}
export const MsgSetIgpOwner = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.igp_id !== '') {
      writer.uint32(18).string(message.igp_id);
    }
    if (message.new_owner !== '') {
      writer.uint32(26).string(message.new_owner);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetIgpOwner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.igp_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.new_owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
      new_owner: isSet(object.new_owner)
        ? globalThis.String(object.new_owner)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    if (message.new_owner !== '') {
      obj.new_owner = message.new_owner;
    }
    return obj;
  },
  create(base) {
    return MsgSetIgpOwner.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgSetIgpOwner();
    message.owner = object.owner ?? '';
    message.igp_id = object.igp_id ?? '';
    message.new_owner = object.new_owner ?? '';
    return message;
  },
};
function createBaseMsgSetIgpOwnerResponse() {
  return {};
}
export const MsgSetIgpOwnerResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetIgpOwnerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgSetIgpOwnerResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgSetIgpOwnerResponse();
    return message;
  },
};
function createBaseMsgSetDestinationGasConfig() {
  return { owner: '', igp_id: '', destination_gas_config: undefined };
}
export const MsgSetDestinationGasConfig = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.igp_id !== '') {
      writer.uint32(18).string(message.igp_id);
    }
    if (message.destination_gas_config !== undefined) {
      DestinationGasConfig.encode(
        message.destination_gas_config,
        writer.uint32(26).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetDestinationGasConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.igp_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.destination_gas_config = DestinationGasConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
      destination_gas_config: isSet(object.destination_gas_config)
        ? DestinationGasConfig.fromJSON(object.destination_gas_config)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    if (message.destination_gas_config !== undefined) {
      obj.destination_gas_config = DestinationGasConfig.toJSON(
        message.destination_gas_config,
      );
    }
    return obj;
  },
  create(base) {
    return MsgSetDestinationGasConfig.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgSetDestinationGasConfig();
    message.owner = object.owner ?? '';
    message.igp_id = object.igp_id ?? '';
    message.destination_gas_config =
      object.destination_gas_config !== undefined &&
      object.destination_gas_config !== null
        ? DestinationGasConfig.fromPartial(object.destination_gas_config)
        : undefined;
    return message;
  },
};
function createBaseMsgSetDestinationGasConfigResponse() {
  return {};
}
export const MsgSetDestinationGasConfigResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetDestinationGasConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgSetDestinationGasConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgSetDestinationGasConfigResponse();
    return message;
  },
};
function createBaseMsgPayForGas() {
  return {
    sender: '',
    igp_id: '',
    message_id: '',
    destination_domain: 0,
    gas_limit: '',
    amount: undefined,
  };
}
export const MsgPayForGas = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== '') {
      writer.uint32(10).string(message.sender);
    }
    if (message.igp_id !== '') {
      writer.uint32(18).string(message.igp_id);
    }
    if (message.message_id !== '') {
      writer.uint32(26).string(message.message_id);
    }
    if (message.destination_domain !== 0) {
      writer.uint32(32).uint32(message.destination_domain);
    }
    if (message.gas_limit !== '') {
      writer.uint32(42).string(message.gas_limit);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPayForGas();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.igp_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.message_id = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }
          message.destination_domain = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.gas_limit = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.amount = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
      message_id: isSet(object.message_id)
        ? globalThis.String(object.message_id)
        : '',
      destination_domain: isSet(object.destination_domain)
        ? globalThis.Number(object.destination_domain)
        : 0,
      gas_limit: isSet(object.gas_limit)
        ? globalThis.String(object.gas_limit)
        : '',
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    if (message.message_id !== '') {
      obj.message_id = message.message_id;
    }
    if (message.destination_domain !== 0) {
      obj.destination_domain = Math.round(message.destination_domain);
    }
    if (message.gas_limit !== '') {
      obj.gas_limit = message.gas_limit;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },
  create(base) {
    return MsgPayForGas.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgPayForGas();
    message.sender = object.sender ?? '';
    message.igp_id = object.igp_id ?? '';
    message.message_id = object.message_id ?? '';
    message.destination_domain = object.destination_domain ?? 0;
    message.gas_limit = object.gas_limit ?? '';
    message.amount =
      object.amount !== undefined && object.amount !== null
        ? Coin.fromPartial(object.amount)
        : undefined;
    return message;
  },
};
function createBaseMsgPayForGasResponse() {
  return {};
}
export const MsgPayForGasResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPayForGasResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgPayForGasResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgPayForGasResponse();
    return message;
  },
};
function createBaseMsgClaim() {
  return { sender: '', igp_id: '' };
}
export const MsgClaim = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== '') {
      writer.uint32(10).string(message.sender);
    }
    if (message.igp_id !== '') {
      writer.uint32(18).string(message.igp_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.igp_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    return obj;
  },
  create(base) {
    return MsgClaim.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgClaim();
    message.sender = object.sender ?? '';
    message.igp_id = object.igp_id ?? '';
    return message;
  },
};
function createBaseMsgClaimResponse() {
  return {};
}
export const MsgClaimResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgClaimResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgClaimResponse();
    return message;
  },
};
function createBaseMsgCreateMerkleTreeHook() {
  return { owner: '', mailbox_id: '' };
}
export const MsgCreateMerkleTreeHook = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.mailbox_id !== '') {
      writer.uint32(18).string(message.mailbox_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMerkleTreeHook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.mailbox_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    return obj;
  },
  create(base) {
    return MsgCreateMerkleTreeHook.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateMerkleTreeHook();
    message.owner = object.owner ?? '';
    message.mailbox_id = object.mailbox_id ?? '';
    return message;
  },
};
function createBaseMsgCreateMerkleTreeHookResponse() {
  return { id: '' };
}
export const MsgCreateMerkleTreeHookResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMerkleTreeHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return MsgCreateMerkleTreeHookResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateMerkleTreeHookResponse();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseMsgCreateNoopHook() {
  return { owner: '' };
}
export const MsgCreateNoopHook = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNoopHook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    return obj;
  },
  create(base) {
    return MsgCreateNoopHook.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateNoopHook();
    message.owner = object.owner ?? '';
    return message;
  },
};
function createBaseMsgCreateNoopHookResponse() {
  return { id: '' };
}
export const MsgCreateNoopHookResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNoopHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return MsgCreateNoopHookResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateNoopHookResponse();
    message.id = object.id ?? '';
    return message;
  },
};
export const MsgServiceName = 'hyperlane.core.post_dispatch.v1.Msg';
export class MsgClientImpl {
  rpc;
  service;
  constructor(rpc, opts) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateIgp = this.CreateIgp.bind(this);
    this.SetIgpOwner = this.SetIgpOwner.bind(this);
    this.SetDestinationGasConfig = this.SetDestinationGasConfig.bind(this);
    this.PayForGas = this.PayForGas.bind(this);
    this.Claim = this.Claim.bind(this);
    this.CreateMerkleTreeHook = this.CreateMerkleTreeHook.bind(this);
    this.CreateNoopHook = this.CreateNoopHook.bind(this);
  }
  CreateIgp(request) {
    const data = MsgCreateIgp.encode(request).finish();
    const promise = this.rpc.request(this.service, 'CreateIgp', data);
    return promise.then((data) =>
      MsgCreateIgpResponse.decode(_m0.Reader.create(data)),
    );
  }
  SetIgpOwner(request) {
    const data = MsgSetIgpOwner.encode(request).finish();
    const promise = this.rpc.request(this.service, 'SetIgpOwner', data);
    return promise.then((data) =>
      MsgSetIgpOwnerResponse.decode(_m0.Reader.create(data)),
    );
  }
  SetDestinationGasConfig(request) {
    const data = MsgSetDestinationGasConfig.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'SetDestinationGasConfig',
      data,
    );
    return promise.then((data) =>
      MsgSetDestinationGasConfigResponse.decode(_m0.Reader.create(data)),
    );
  }
  PayForGas(request) {
    const data = MsgPayForGas.encode(request).finish();
    const promise = this.rpc.request(this.service, 'PayForGas', data);
    return promise.then((data) =>
      MsgPayForGasResponse.decode(_m0.Reader.create(data)),
    );
  }
  Claim(request) {
    const data = MsgClaim.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Claim', data);
    return promise.then((data) =>
      MsgClaimResponse.decode(_m0.Reader.create(data)),
    );
  }
  CreateMerkleTreeHook(request) {
    const data = MsgCreateMerkleTreeHook.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateMerkleTreeHook',
      data,
    );
    return promise.then((data) =>
      MsgCreateMerkleTreeHookResponse.decode(_m0.Reader.create(data)),
    );
  }
  CreateNoopHook(request) {
    const data = MsgCreateNoopHook.encode(request).finish();
    const promise = this.rpc.request(this.service, 'CreateNoopHook', data);
    return promise.then((data) =>
      MsgCreateNoopHookResponse.decode(_m0.Reader.create(data)),
    );
  }
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map
