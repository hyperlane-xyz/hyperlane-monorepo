// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/warp/v1/genesis.proto
/* eslint-disable */
import Long from 'long';
import _m0 from 'protobufjs/minimal.js';

import { HypToken, Params, RemoteRouter } from './types.js';

export const protobufPackage = 'hyperlane.warp.v1';
function createBaseGenesisState() {
  return { params: undefined, tokens: [], remote_routers: [] };
}
export const GenesisState = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.tokens) {
      HypToken.encode(v, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.remote_routers) {
      GenesisRemoteRouterWrapper.encode(v, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.params = Params.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.tokens.push(HypToken.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.remote_routers.push(
            GenesisRemoteRouterWrapper.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      tokens: globalThis.Array.isArray(object?.tokens)
        ? object.tokens.map((e) => HypToken.fromJSON(e))
        : [],
      remote_routers: globalThis.Array.isArray(object?.remote_routers)
        ? object.remote_routers.map((e) =>
            GenesisRemoteRouterWrapper.fromJSON(e),
          )
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.tokens?.length) {
      obj.tokens = message.tokens.map((e) => HypToken.toJSON(e));
    }
    if (message.remote_routers?.length) {
      obj.remote_routers = message.remote_routers.map((e) =>
        GenesisRemoteRouterWrapper.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGenesisState();
    message.params =
      object.params !== undefined && object.params !== null
        ? Params.fromPartial(object.params)
        : undefined;
    message.tokens = object.tokens?.map((e) => HypToken.fromPartial(e)) || [];
    message.remote_routers =
      object.remote_routers?.map((e) =>
        GenesisRemoteRouterWrapper.fromPartial(e),
      ) || [];
    return message;
  },
};
function createBaseGenesisRemoteRouterWrapper() {
  return { token_id: '0', remote_router: undefined };
}
export const GenesisRemoteRouterWrapper = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.token_id !== '0') {
      writer.uint32(8).uint64(message.token_id);
    }
    if (message.remote_router !== undefined) {
      RemoteRouter.encode(
        message.remote_router,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisRemoteRouterWrapper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.token_id = longToString(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.remote_router = RemoteRouter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '0',
      remote_router: isSet(object.remote_router)
        ? RemoteRouter.fromJSON(object.remote_router)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.token_id !== '0') {
      obj.token_id = message.token_id;
    }
    if (message.remote_router !== undefined) {
      obj.remote_router = RemoteRouter.toJSON(message.remote_router);
    }
    return obj;
  },
  create(base) {
    return GenesisRemoteRouterWrapper.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseGenesisRemoteRouterWrapper();
    message.token_id = object.token_id ?? '0';
    message.remote_router =
      object.remote_router !== undefined && object.remote_router !== null
        ? RemoteRouter.fromPartial(object.remote_router)
        : undefined;
    return message;
  },
};
function longToString(long) {
  return long.toString();
}
if (_m0.util.Long !== Long) {
  _m0.util.Long = Long;
  _m0.configure();
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map
