// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/warp/v1/types.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

export const protobufPackage = 'hyperlane.warp.v1';
/** HypTokenType ... */
export var HypTokenType;
(function (HypTokenType) {
  /** HYP_TOKEN_TYPE_UNSPECIFIED - HYP_TOKEN_TYPE_UNSPECIFIED ... */
  HypTokenType['HYP_TOKEN_TYPE_UNSPECIFIED'] = 'HYP_TOKEN_TYPE_UNSPECIFIED';
  /** HYP_TOKEN_TYPE_COLLATERAL - HYP_TOKEN_TYPE_COLLATERAL ... */
  HypTokenType['HYP_TOKEN_TYPE_COLLATERAL'] = 'HYP_TOKEN_TYPE_COLLATERAL';
  /** HYP_TOKEN_TYPE_SYNTHETIC - HYP_TOKEN_TYPE_SYNTHETIC ... */
  HypTokenType['HYP_TOKEN_TYPE_SYNTHETIC'] = 'HYP_TOKEN_TYPE_SYNTHETIC';
  HypTokenType['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(HypTokenType || (HypTokenType = {}));
export function hypTokenTypeFromJSON(object) {
  switch (object) {
    case 0:
    case 'HYP_TOKEN_TYPE_UNSPECIFIED':
      return HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED;
    case 1:
    case 'HYP_TOKEN_TYPE_COLLATERAL':
      return HypTokenType.HYP_TOKEN_TYPE_COLLATERAL;
    case 2:
    case 'HYP_TOKEN_TYPE_SYNTHETIC':
      return HypTokenType.HYP_TOKEN_TYPE_SYNTHETIC;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return HypTokenType.UNRECOGNIZED;
  }
}
export function hypTokenTypeToJSON(object) {
  switch (object) {
    case HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED:
      return 'HYP_TOKEN_TYPE_UNSPECIFIED';
    case HypTokenType.HYP_TOKEN_TYPE_COLLATERAL:
      return 'HYP_TOKEN_TYPE_COLLATERAL';
    case HypTokenType.HYP_TOKEN_TYPE_SYNTHETIC:
      return 'HYP_TOKEN_TYPE_SYNTHETIC';
    case HypTokenType.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function hypTokenTypeToNumber(object) {
  switch (object) {
    case HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED:
      return 0;
    case HypTokenType.HYP_TOKEN_TYPE_COLLATERAL:
      return 1;
    case HypTokenType.HYP_TOKEN_TYPE_SYNTHETIC:
      return 2;
    case HypTokenType.UNRECOGNIZED:
    default:
      return -1;
  }
}
function createBaseParams() {
  return {};
}
export const Params = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseParams();
    return message;
  },
};
function createBaseHypToken() {
  return {
    id: '',
    owner: '',
    token_type: HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED,
    origin_mailbox: '',
    origin_denom: '',
    collateral_balance: '',
    ism_id: '',
  };
}
export const HypToken = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (message.token_type !== HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED) {
      writer.uint32(24).int32(hypTokenTypeToNumber(message.token_type));
    }
    if (message.origin_mailbox !== '') {
      writer.uint32(34).string(message.origin_mailbox);
    }
    if (message.origin_denom !== '') {
      writer.uint32(42).string(message.origin_denom);
    }
    if (message.collateral_balance !== '') {
      writer.uint32(50).string(message.collateral_balance);
    }
    if (message.ism_id !== '') {
      writer.uint32(58).string(message.ism_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHypToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.token_type = hypTokenTypeFromJSON(reader.int32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.origin_mailbox = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.origin_denom = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.collateral_balance = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.ism_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_type: isSet(object.token_type)
        ? hypTokenTypeFromJSON(object.token_type)
        : HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED,
      origin_mailbox: isSet(object.origin_mailbox)
        ? globalThis.String(object.origin_mailbox)
        : '',
      origin_denom: isSet(object.origin_denom)
        ? globalThis.String(object.origin_denom)
        : '',
      collateral_balance: isSet(object.collateral_balance)
        ? globalThis.String(object.collateral_balance)
        : '',
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_type !== HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED) {
      obj.token_type = hypTokenTypeToJSON(message.token_type);
    }
    if (message.origin_mailbox !== '') {
      obj.origin_mailbox = message.origin_mailbox;
    }
    if (message.origin_denom !== '') {
      obj.origin_denom = message.origin_denom;
    }
    if (message.collateral_balance !== '') {
      obj.collateral_balance = message.collateral_balance;
    }
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    return obj;
  },
  create(base) {
    return HypToken.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseHypToken();
    message.id = object.id ?? '';
    message.owner = object.owner ?? '';
    message.token_type =
      object.token_type ?? HypTokenType.HYP_TOKEN_TYPE_UNSPECIFIED;
    message.origin_mailbox = object.origin_mailbox ?? '';
    message.origin_denom = object.origin_denom ?? '';
    message.collateral_balance = object.collateral_balance ?? '';
    message.ism_id = object.ism_id ?? '';
    return message;
  },
};
function createBaseRemoteRouter() {
  return { receiver_domain: 0, receiver_contract: '', gas: '' };
}
export const RemoteRouter = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.receiver_domain !== 0) {
      writer.uint32(8).uint32(message.receiver_domain);
    }
    if (message.receiver_contract !== '') {
      writer.uint32(18).string(message.receiver_contract);
    }
    if (message.gas !== '') {
      writer.uint32(26).string(message.gas);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoteRouter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }
          message.receiver_domain = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.receiver_contract = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.gas = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      receiver_domain: isSet(object.receiver_domain)
        ? globalThis.Number(object.receiver_domain)
        : 0,
      receiver_contract: isSet(object.receiver_contract)
        ? globalThis.String(object.receiver_contract)
        : '',
      gas: isSet(object.gas) ? globalThis.String(object.gas) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.receiver_domain !== 0) {
      obj.receiver_domain = Math.round(message.receiver_domain);
    }
    if (message.receiver_contract !== '') {
      obj.receiver_contract = message.receiver_contract;
    }
    if (message.gas !== '') {
      obj.gas = message.gas;
    }
    return obj;
  },
  create(base) {
    return RemoteRouter.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseRemoteRouter();
    message.receiver_domain = object.receiver_domain ?? 0;
    message.receiver_contract = object.receiver_contract ?? '';
    message.gas = object.gas ?? '';
    return message;
  },
};
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map
