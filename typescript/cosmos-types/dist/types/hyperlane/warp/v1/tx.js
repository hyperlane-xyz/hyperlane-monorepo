// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/warp/v1/tx.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

import { Coin } from '../../../cosmos/base/v1beta1/coin.js';

import { RemoteRouter } from './types.js';

export const protobufPackage = 'hyperlane.warp.v1';
function createBaseMsgCreateCollateralToken() {
  return { owner: '', origin_mailbox: '', origin_denom: '' };
}
export const MsgCreateCollateralToken = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.origin_mailbox !== '') {
      writer.uint32(18).string(message.origin_mailbox);
    }
    if (message.origin_denom !== '') {
      writer.uint32(26).string(message.origin_denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateCollateralToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.origin_mailbox = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.origin_denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      origin_mailbox: isSet(object.origin_mailbox)
        ? globalThis.String(object.origin_mailbox)
        : '',
      origin_denom: isSet(object.origin_denom)
        ? globalThis.String(object.origin_denom)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.origin_mailbox !== '') {
      obj.origin_mailbox = message.origin_mailbox;
    }
    if (message.origin_denom !== '') {
      obj.origin_denom = message.origin_denom;
    }
    return obj;
  },
  create(base) {
    return MsgCreateCollateralToken.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateCollateralToken();
    message.owner = object.owner ?? '';
    message.origin_mailbox = object.origin_mailbox ?? '';
    message.origin_denom = object.origin_denom ?? '';
    return message;
  },
};
function createBaseMsgCreateCollateralTokenResponse() {
  return { id: '' };
}
export const MsgCreateCollateralTokenResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateCollateralTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return MsgCreateCollateralTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateCollateralTokenResponse();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseMsgCreateSyntheticToken() {
  return { owner: '', origin_mailbox: '' };
}
export const MsgCreateSyntheticToken = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.origin_mailbox !== '') {
      writer.uint32(18).string(message.origin_mailbox);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateSyntheticToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.origin_mailbox = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      origin_mailbox: isSet(object.origin_mailbox)
        ? globalThis.String(object.origin_mailbox)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.origin_mailbox !== '') {
      obj.origin_mailbox = message.origin_mailbox;
    }
    return obj;
  },
  create(base) {
    return MsgCreateSyntheticToken.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateSyntheticToken();
    message.owner = object.owner ?? '';
    message.origin_mailbox = object.origin_mailbox ?? '';
    return message;
  },
};
function createBaseMsgCreateSyntheticTokenResponse() {
  return { id: '' };
}
export const MsgCreateSyntheticTokenResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateSyntheticTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },
  toJSON(message) {
    const obj = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },
  create(base) {
    return MsgCreateSyntheticTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgCreateSyntheticTokenResponse();
    message.id = object.id ?? '';
    return message;
  },
};
function createBaseMsgSetToken() {
  return { owner: '', token_id: '', new_owner: '', ism_id: '' };
}
export const MsgSetToken = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.new_owner !== '') {
      writer.uint32(26).string(message.new_owner);
    }
    if (message.ism_id !== '') {
      writer.uint32(34).string(message.ism_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.new_owner = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.ism_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      new_owner: isSet(object.new_owner)
        ? globalThis.String(object.new_owner)
        : '',
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.new_owner !== '') {
      obj.new_owner = message.new_owner;
    }
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    return obj;
  },
  create(base) {
    return MsgSetToken.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgSetToken();
    message.owner = object.owner ?? '';
    message.token_id = object.token_id ?? '';
    message.new_owner = object.new_owner ?? '';
    message.ism_id = object.ism_id ?? '';
    return message;
  },
};
function createBaseMsgSetTokenResponse() {
  return {};
}
export const MsgSetTokenResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgSetTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgSetTokenResponse();
    return message;
  },
};
function createBaseMsgEnrollRemoteRouter() {
  return { owner: '', token_id: '', remote_router: undefined };
}
export const MsgEnrollRemoteRouter = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.remote_router !== undefined) {
      RemoteRouter.encode(
        message.remote_router,
        writer.uint32(26).fork(),
      ).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEnrollRemoteRouter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.remote_router = RemoteRouter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      remote_router: isSet(object.remote_router)
        ? RemoteRouter.fromJSON(object.remote_router)
        : undefined,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.remote_router !== undefined) {
      obj.remote_router = RemoteRouter.toJSON(message.remote_router);
    }
    return obj;
  },
  create(base) {
    return MsgEnrollRemoteRouter.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgEnrollRemoteRouter();
    message.owner = object.owner ?? '';
    message.token_id = object.token_id ?? '';
    message.remote_router =
      object.remote_router !== undefined && object.remote_router !== null
        ? RemoteRouter.fromPartial(object.remote_router)
        : undefined;
    return message;
  },
};
function createBaseMsgEnrollRemoteRouterResponse() {
  return {};
}
export const MsgEnrollRemoteRouterResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEnrollRemoteRouterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgEnrollRemoteRouterResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgEnrollRemoteRouterResponse();
    return message;
  },
};
function createBaseMsgUnrollRemoteRouter() {
  return { owner: '', token_id: '', receiver_domain: 0 };
}
export const MsgUnrollRemoteRouter = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.receiver_domain !== 0) {
      writer.uint32(24).uint32(message.receiver_domain);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnrollRemoteRouter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.receiver_domain = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      receiver_domain: isSet(object.receiver_domain)
        ? globalThis.Number(object.receiver_domain)
        : 0,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.receiver_domain !== 0) {
      obj.receiver_domain = Math.round(message.receiver_domain);
    }
    return obj;
  },
  create(base) {
    return MsgUnrollRemoteRouter.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgUnrollRemoteRouter();
    message.owner = object.owner ?? '';
    message.token_id = object.token_id ?? '';
    message.receiver_domain = object.receiver_domain ?? 0;
    return message;
  },
};
function createBaseMsgUnrollRemoteRouterResponse() {
  return {};
}
export const MsgUnrollRemoteRouterResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnrollRemoteRouterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_) {
    return {};
  },
  toJSON(_) {
    const obj = {};
    return obj;
  },
  create(base) {
    return MsgUnrollRemoteRouterResponse.fromPartial(base ?? {});
  },
  fromPartial(_) {
    const message = createBaseMsgUnrollRemoteRouterResponse();
    return message;
  },
};
function createBaseMsgRemoteTransfer() {
  return {
    sender: '',
    token_id: '',
    destination_domain: 0,
    recipient: '',
    amount: '',
    custom_hook_id: '',
    gas_limit: '',
    max_fee: undefined,
    custom_hook_metadata: '',
  };
}
export const MsgRemoteTransfer = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.sender !== '') {
      writer.uint32(10).string(message.sender);
    }
    if (message.token_id !== '') {
      writer.uint32(18).string(message.token_id);
    }
    if (message.destination_domain !== 0) {
      writer.uint32(24).uint32(message.destination_domain);
    }
    if (message.recipient !== '') {
      writer.uint32(34).string(message.recipient);
    }
    if (message.amount !== '') {
      writer.uint32(42).string(message.amount);
    }
    if (message.custom_hook_id !== '') {
      writer.uint32(50).string(message.custom_hook_id);
    }
    if (message.gas_limit !== '') {
      writer.uint32(58).string(message.gas_limit);
    }
    if (message.max_fee !== undefined) {
      Coin.encode(message.max_fee, writer.uint32(66).fork()).ldelim();
    }
    if (message.custom_hook_metadata !== '') {
      writer.uint32(74).string(message.custom_hook_metadata);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoteTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.token_id = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }
          message.destination_domain = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }
          message.recipient = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }
          message.amount = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }
          message.custom_hook_id = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }
          message.gas_limit = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }
          message.max_fee = Coin.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }
          message.custom_hook_metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      token_id: isSet(object.token_id)
        ? globalThis.String(object.token_id)
        : '',
      destination_domain: isSet(object.destination_domain)
        ? globalThis.Number(object.destination_domain)
        : 0,
      recipient: isSet(object.recipient)
        ? globalThis.String(object.recipient)
        : '',
      amount: isSet(object.amount) ? globalThis.String(object.amount) : '',
      custom_hook_id: isSet(object.custom_hook_id)
        ? globalThis.String(object.custom_hook_id)
        : '',
      gas_limit: isSet(object.gas_limit)
        ? globalThis.String(object.gas_limit)
        : '',
      max_fee: isSet(object.max_fee)
        ? Coin.fromJSON(object.max_fee)
        : undefined,
      custom_hook_metadata: isSet(object.custom_hook_metadata)
        ? globalThis.String(object.custom_hook_metadata)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.token_id !== '') {
      obj.token_id = message.token_id;
    }
    if (message.destination_domain !== 0) {
      obj.destination_domain = Math.round(message.destination_domain);
    }
    if (message.recipient !== '') {
      obj.recipient = message.recipient;
    }
    if (message.amount !== '') {
      obj.amount = message.amount;
    }
    if (message.custom_hook_id !== '') {
      obj.custom_hook_id = message.custom_hook_id;
    }
    if (message.gas_limit !== '') {
      obj.gas_limit = message.gas_limit;
    }
    if (message.max_fee !== undefined) {
      obj.max_fee = Coin.toJSON(message.max_fee);
    }
    if (message.custom_hook_metadata !== '') {
      obj.custom_hook_metadata = message.custom_hook_metadata;
    }
    return obj;
  },
  create(base) {
    return MsgRemoteTransfer.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgRemoteTransfer();
    message.sender = object.sender ?? '';
    message.token_id = object.token_id ?? '';
    message.destination_domain = object.destination_domain ?? 0;
    message.recipient = object.recipient ?? '';
    message.amount = object.amount ?? '';
    message.custom_hook_id = object.custom_hook_id ?? '';
    message.gas_limit = object.gas_limit ?? '';
    message.max_fee =
      object.max_fee !== undefined && object.max_fee !== null
        ? Coin.fromPartial(object.max_fee)
        : undefined;
    message.custom_hook_metadata = object.custom_hook_metadata ?? '';
    return message;
  },
};
function createBaseMsgRemoteTransferResponse() {
  return { message_id: '' };
}
export const MsgRemoteTransferResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.message_id !== '') {
      writer.uint32(10).string(message.message_id);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoteTransferResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.message_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message_id: isSet(object.message_id)
        ? globalThis.String(object.message_id)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.message_id !== '') {
      obj.message_id = message.message_id;
    }
    return obj;
  },
  create(base) {
    return MsgRemoteTransferResponse.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMsgRemoteTransferResponse();
    message.message_id = object.message_id ?? '';
    return message;
  },
};
export const MsgServiceName = 'hyperlane.warp.v1.Msg';
export class MsgClientImpl {
  rpc;
  service;
  constructor(rpc, opts) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateCollateralToken = this.CreateCollateralToken.bind(this);
    this.CreateSyntheticToken = this.CreateSyntheticToken.bind(this);
    this.SetToken = this.SetToken.bind(this);
    this.EnrollRemoteRouter = this.EnrollRemoteRouter.bind(this);
    this.UnrollRemoteRouter = this.UnrollRemoteRouter.bind(this);
    this.RemoteTransfer = this.RemoteTransfer.bind(this);
  }
  CreateCollateralToken(request) {
    const data = MsgCreateCollateralToken.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateCollateralToken',
      data,
    );
    return promise.then((data) =>
      MsgCreateCollateralTokenResponse.decode(_m0.Reader.create(data)),
    );
  }
  CreateSyntheticToken(request) {
    const data = MsgCreateSyntheticToken.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateSyntheticToken',
      data,
    );
    return promise.then((data) =>
      MsgCreateSyntheticTokenResponse.decode(_m0.Reader.create(data)),
    );
  }
  SetToken(request) {
    const data = MsgSetToken.encode(request).finish();
    const promise = this.rpc.request(this.service, 'SetToken', data);
    return promise.then((data) =>
      MsgSetTokenResponse.decode(_m0.Reader.create(data)),
    );
  }
  EnrollRemoteRouter(request) {
    const data = MsgEnrollRemoteRouter.encode(request).finish();
    const promise = this.rpc.request(this.service, 'EnrollRemoteRouter', data);
    return promise.then((data) =>
      MsgEnrollRemoteRouterResponse.decode(_m0.Reader.create(data)),
    );
  }
  UnrollRemoteRouter(request) {
    const data = MsgUnrollRemoteRouter.encode(request).finish();
    const promise = this.rpc.request(this.service, 'UnrollRemoteRouter', data);
    return promise.then((data) =>
      MsgUnrollRemoteRouterResponse.decode(_m0.Reader.create(data)),
    );
  }
  RemoteTransfer(request) {
    const data = MsgRemoteTransfer.encode(request).finish();
    const promise = this.rpc.request(this.service, 'RemoteTransfer', data);
    return promise.then((data) =>
      MsgRemoteTransferResponse.decode(_m0.Reader.create(data)),
    );
  }
}
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map
