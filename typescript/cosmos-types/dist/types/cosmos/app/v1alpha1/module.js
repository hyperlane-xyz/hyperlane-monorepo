// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: cosmos/app/v1alpha1/module.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

export const protobufPackage = 'cosmos.app.v1alpha1';
function createBaseModuleDescriptor() {
  return { go_import: '', use_package: [], can_migrate_from: [] };
}
export const ModuleDescriptor = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.go_import !== '') {
      writer.uint32(10).string(message.go_import);
    }
    for (const v of message.use_package) {
      PackageReference.encode(v, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.can_migrate_from) {
      MigrateFromInfo.encode(v, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModuleDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.go_import = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.use_package.push(
            PackageReference.decode(reader, reader.uint32()),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }
          message.can_migrate_from.push(
            MigrateFromInfo.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      go_import: isSet(object.go_import)
        ? globalThis.String(object.go_import)
        : '',
      use_package: globalThis.Array.isArray(object?.use_package)
        ? object.use_package.map((e) => PackageReference.fromJSON(e))
        : [],
      can_migrate_from: globalThis.Array.isArray(object?.can_migrate_from)
        ? object.can_migrate_from.map((e) => MigrateFromInfo.fromJSON(e))
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.go_import !== '') {
      obj.go_import = message.go_import;
    }
    if (message.use_package?.length) {
      obj.use_package = message.use_package.map((e) =>
        PackageReference.toJSON(e),
      );
    }
    if (message.can_migrate_from?.length) {
      obj.can_migrate_from = message.can_migrate_from.map((e) =>
        MigrateFromInfo.toJSON(e),
      );
    }
    return obj;
  },
  create(base) {
    return ModuleDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseModuleDescriptor();
    message.go_import = object.go_import ?? '';
    message.use_package =
      object.use_package?.map((e) => PackageReference.fromPartial(e)) || [];
    message.can_migrate_from =
      object.can_migrate_from?.map((e) => MigrateFromInfo.fromPartial(e)) || [];
    return message;
  },
};
function createBasePackageReference() {
  return { name: '', revision: 0 };
}
export const PackageReference = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    if (message.revision !== 0) {
      writer.uint32(16).uint32(message.revision);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePackageReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }
          message.revision = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      revision: isSet(object.revision) ? globalThis.Number(object.revision) : 0,
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.revision !== 0) {
      obj.revision = Math.round(message.revision);
    }
    return obj;
  },
  create(base) {
    return PackageReference.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBasePackageReference();
    message.name = object.name ?? '';
    message.revision = object.revision ?? 0;
    return message;
  },
};
function createBaseMigrateFromInfo() {
  return { module: '' };
}
export const MigrateFromInfo = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.module !== '') {
      writer.uint32(10).string(message.module);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateFromInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.module = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      module: isSet(object.module) ? globalThis.String(object.module) : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.module !== '') {
      obj.module = message.module;
    }
    return obj;
  },
  create(base) {
    return MigrateFromInfo.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseMigrateFromInfo();
    message.module = object.module ?? '';
    return message;
  },
};
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=module.js.map
