// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: cosmos_proto/cosmos.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

export const protobufPackage = 'cosmos_proto';
export var ScalarType;
(function (ScalarType) {
  ScalarType['SCALAR_TYPE_UNSPECIFIED'] = 'SCALAR_TYPE_UNSPECIFIED';
  ScalarType['SCALAR_TYPE_STRING'] = 'SCALAR_TYPE_STRING';
  ScalarType['SCALAR_TYPE_BYTES'] = 'SCALAR_TYPE_BYTES';
  ScalarType['UNRECOGNIZED'] = 'UNRECOGNIZED';
})(ScalarType || (ScalarType = {}));
export function scalarTypeFromJSON(object) {
  switch (object) {
    case 0:
    case 'SCALAR_TYPE_UNSPECIFIED':
      return ScalarType.SCALAR_TYPE_UNSPECIFIED;
    case 1:
    case 'SCALAR_TYPE_STRING':
      return ScalarType.SCALAR_TYPE_STRING;
    case 2:
    case 'SCALAR_TYPE_BYTES':
      return ScalarType.SCALAR_TYPE_BYTES;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return ScalarType.UNRECOGNIZED;
  }
}
export function scalarTypeToJSON(object) {
  switch (object) {
    case ScalarType.SCALAR_TYPE_UNSPECIFIED:
      return 'SCALAR_TYPE_UNSPECIFIED';
    case ScalarType.SCALAR_TYPE_STRING:
      return 'SCALAR_TYPE_STRING';
    case ScalarType.SCALAR_TYPE_BYTES:
      return 'SCALAR_TYPE_BYTES';
    case ScalarType.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}
export function scalarTypeToNumber(object) {
  switch (object) {
    case ScalarType.SCALAR_TYPE_UNSPECIFIED:
      return 0;
    case ScalarType.SCALAR_TYPE_STRING:
      return 1;
    case ScalarType.SCALAR_TYPE_BYTES:
      return 2;
    case ScalarType.UNRECOGNIZED:
    default:
      return -1;
  }
}
function createBaseInterfaceDescriptor() {
  return { name: '', description: '' };
}
export const InterfaceDescriptor = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterfaceDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    return obj;
  },
  create(base) {
    return InterfaceDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseInterfaceDescriptor();
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    return message;
  },
};
function createBaseScalarDescriptor() {
  return { name: '', description: '', field_type: [] };
}
export const ScalarDescriptor = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(18).string(message.description);
    }
    writer.uint32(26).fork();
    for (const v of message.field_type) {
      writer.int32(scalarTypeToNumber(v));
    }
    writer.ldelim();
    return writer;
  },
  decode(input, length) {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScalarDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }
          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }
          message.description = reader.string();
          continue;
        case 3:
          if (tag === 24) {
            message.field_type.push(scalarTypeFromJSON(reader.int32()));
            continue;
          }
          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.field_type.push(scalarTypeFromJSON(reader.int32()));
            }
            continue;
          }
          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      field_type: globalThis.Array.isArray(object?.field_type)
        ? object.field_type.map((e) => scalarTypeFromJSON(e))
        : [],
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.field_type?.length) {
      obj.field_type = message.field_type.map((e) => scalarTypeToJSON(e));
    }
    return obj;
  },
  create(base) {
    return ScalarDescriptor.fromPartial(base ?? {});
  },
  fromPartial(object) {
    const message = createBaseScalarDescriptor();
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.field_type = object.field_type?.map((e) => e) || [];
    return message;
  },
};
function isSet(value) {
  return value !== null && value !== undefined;
}
//# sourceMappingURL=cosmos.js.map
