import { Program } from '@provablehq/sdk';

export const dispatch_proxy = `import credits.aleo;\nimport ism_manager.aleo;\nimport mailbox.aleo;\nimport hook_manager.aleo;\nprogram dispatch_proxy.aleo;\n\nstruct MailboxState:\n    default_ism as address;\n    default_hook as address;\n    required_hook as address;\n\nstruct Message:\n    version as u8;\n    nonce as u32;\n    origin_domain as u32;\n    sender as [u8; 32u32];\n    destination_domain as u32;\n    recipient as [u8; 32u32];\n    body as [u128; 8u32];\n\nstruct EthAddress:\n    bytes as [u8; 20u32];\n\nstruct Mailbox:\n    local_domain as u32;\n    nonce as u32;\n    process_count as u32;\n    default_ism as address;\n    default_hook as address;\n    required_hook as address;\n    dispatch_proxy as address;\n    mailbox_owner as address;\n\nstruct Tree:\n    branch as [[u128; 2u32]; 32u32];\n    count as u32;\n\nstruct DomainGasConfig:\n    gas_overhead as u128;\n    exchange_rate as u128;\n    gas_price as u128;\n\nstruct CreditAllowance:\n    spender as address;\n    amount as u64;\n\nfunction get_address:\n    output dispatch_proxy.aleo as address.private;\n\nfunction dispatch:\n    input r0 as MailboxState.public;\n    input r1 as u32.public;\n    input r2 as [u8; 32u32].public;\n    input r3 as [u128; 8u32].public;\n    input r4 as address.public;\n    input r5 as [u8; 256u32].public;\n    input r6 as [CreditAllowance; 4u32].public;\n    assert.neq r0.default_hook aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc;\n    assert.neq r0.required_hook aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc;\n    is.eq r4 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r7;\n    ternary r7 r0.default_hook r4 into r8;\n    call mailbox.aleo/dispatch r1 r2 r3 self.caller into r9;\n    call hook_manager.aleo/post_dispatch r8 r5 r6 into r10;\n    call hook_manager.aleo/post_dispatch r0.required_hook r5 r6 into r11;\n    async dispatch r0 r9 r10 r11 into r12;\n    output r12 as dispatch_proxy.aleo/dispatch.future;\n\nfinalize dispatch:\n    input r0 as MailboxState.public;\n    input r1 as mailbox.aleo/dispatch.future;\n    input r2 as hook_manager.aleo/post_dispatch.future;\n    input r3 as hook_manager.aleo/post_dispatch.future;\n    get mailbox.aleo/mailbox[true] into r4;\n    assert.eq r4.default_ism r0.default_ism;\n    assert.eq r4.default_hook r0.default_hook;\n    assert.eq r4.required_hook r0.required_hook;\n    await r1;\n    await r2;\n    await r3;\n\nconstructor:\n    assert.eq edition 0u16;\n`;
export const credits = `program credits.aleo;\n\nmapping committee:\n    key as address.public;\n    value as committee_state.public;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\nmapping delegated:\n    key as address.public;\n    value as u64.public;\n\nmapping metadata:\n    key as address.public;\n    value as u32.public;\n\nmapping bonded:\n    key as address.public;\n    value as bond_state.public;\n\nstruct bond_state:\n    validator as address;\n    microcredits as u64;\n\nmapping unbonding:\n    key as address.public;\n    value as unbond_state.public;\n\nstruct unbond_state:\n    microcredits as u64;\n    height as u32;\n\nmapping account:\n    key as address.public;\n    value as u64.public;\n\nmapping withdraw:\n    key as address.public;\n    value as address.public;\n\nmapping pool:\n    key as address.public;\n    value as u64.public;\n\nrecord credits:\n    owner as address.private;\n    microcredits as u64.private;\n\nfunction bond_validator:\n    input r0 as address.public;\n    input r1 as u64.public;\n    input r2 as u8.public;\n    assert.neq self.signer r0;\n    gte r1 1_000_000u64 into r3;\n    assert.eq r3 true;\n    gt r2 100u8 into r4;\n    assert.neq r4 true;\n    async bond_validator self.signer r0 r1 r2 into r5;\n    output r5 as credits.aleo/bond_validator.future;\n\nfinalize bond_validator:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as u64.public;\n    input r3 as u8.public;\n    get.or_use withdraw[r0] r1 into r4;\n    assert.eq r1 r4;\n    cast true r3 into r5 as committee_state;\n    get.or_use committee[r0] r5 into r6;\n    assert.eq r3 r6.commission;\n    cast r0 0u64 into r7 as bond_state;\n    get.or_use bonded[r0] r7 into r8;\n    assert.eq r8.validator r0;\n    add r8.microcredits r2 into r9;\n    cast r0 r9 into r10 as bond_state;\n    get.or_use delegated[r0] 0u64 into r11;\n    add r2 r11 into r12;\n    gte r12 10_000_000_000_000u64 into r13;\n    assert.eq r13 true;\n    get account[r0] into r14;\n    sub r14 r2 into r15;\n    contains committee[r0] into r16;\n    branch.eq r16 true to validator_in_committee;\n        set r4 into withdraw[r0];\n        gte r2 100_000_000u64 into r17;\n        assert.eq r17 true;\n        get.or_use metadata[aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc] 0u32 into r18;\n        add r18 1u32 into r19;\n        set r19 into metadata[aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc];\n        contains unbonding[r0] into r20;\n        assert.eq r20 false;\n    position validator_in_committee;\n    set r6 into committee[r0];\n    set r12 into delegated[r0];\n    set r10 into bonded[r0];\n    set r15 into account[r0];\n\nfunction bond_public:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as u64.public;\n    gte r2 1_000_000u64 into r3;\n    assert.eq r3 true;\n    assert.neq self.caller r0;\n    async bond_public self.caller r0 r1 r2 into r4;\n    output r4 as credits.aleo/bond_public.future;\n\nfinalize bond_public:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as u64.public;\n    get.or_use withdraw[r0] r2 into r4;\n    assert.eq r2 r4;\n    contains bonded[r0] into r5;\n    branch.eq r5 true to continue_bond_delegator;\n        set r2 into withdraw[r0];\n        cast true 0u8 into r6 as committee_state;\n        get.or_use committee[r1] r6 into r7;\n        assert.eq r7.is_open true;\n        get.or_use metadata[aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0] 0u32 into r8;\n        add r8 1u32 into r9;\n        lte r9 100_000u32 into r10;\n        assert.eq r10 true;\n        set r9 into metadata[aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0];\n    position continue_bond_delegator;\n    cast r1 0u64 into r11 as bond_state;\n    get.or_use bonded[r0] r11 into r12;\n    assert.eq r12.validator r1;\n    add r12.microcredits r3 into r13;\n    gte r13 10_000_000_000u64 into r14;\n    assert.eq r14 true;\n    cast r1 r13 into r15 as bond_state;\n    get account[r0] into r16;\n    sub r16 r3 into r17;\n    get.or_use delegated[r1] 0u64 into r18;\n    add r3 r18 into r19;\n    contains unbonding[r1] into r20;\n    assert.eq r20 false;\n    set r15 into bonded[r0];\n    set r17 into account[r0];\n    set r19 into delegated[r1];\n\nfunction unbond_public:\n    input r0 as address.public;\n    input r1 as u64.public;\n    async unbond_public self.caller r0 r1 into r2;\n    output r2 as credits.aleo/unbond_public.future;\n\nfinalize unbond_public:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as u64.public;\n    add block.height 360u32 into r3;\n    cast 0u64 r3 into r4 as unbond_state;\n    get bonded[r1] into r5;\n    get withdraw[r1] into r6;\n    is.eq r0 r6 into r7;\n    contains withdraw[r5.validator] into r8;\n    get.or_use withdraw[r5.validator] aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r9;\n    is.eq r0 r9 into r10;\n    and r8 r10 into r11;\n    or r7 r11 into r12;\n    assert.eq r12 true;\n    is.eq r5.validator r1 into r13;\n    branch.eq r13 true to unbond_validator;\n        get.or_use unbonding[r1] r4 into r14;\n        get delegated[r5.validator] into r15;\n        sub r5.microcredits r2 into r16;\n        lt r16 10_000_000_000u64 into r17;\n        or r11 r17 into r18;\n        ternary r18 r5.microcredits r2 into r19;\n        add r14.microcredits r19 into r20;\n        cast r20 r3 into r21 as unbond_state;\n        set r21 into unbonding[r1];\n        sub r15 r19 into r22;\n        set r22 into delegated[r5.validator];\n        branch.eq r18 true to remove_delegator;\n            cast r5.validator r16 into r23 as bond_state;\n            set r23 into bonded[r1];\n            branch.eq true true to end_unbond_delegator;\n        position remove_delegator;\n            remove bonded[r1];\n            get metadata[aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0] into r24;\n            sub r24 1u32 into r25;\n            set r25 into metadata[aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0];\n        position end_unbond_delegator;\n            gte r22 10_000_000_000_000u64 into r26;\n            branch.eq r26 true to end;\n    position unbond_validator;\n        contains committee[r5.validator] into r27;\n        nor r13 r27 into r28;\n        branch.eq r28 true to end;\n        get committee[r5.validator] into r29;\n        get bonded[r5.validator] into r30;\n        get delegated[r5.validator] into r31;\n        lt r31 10_000_000_000_000u64 into r32;\n        branch.eq r32 true to remove_validator;\n        sub r31 r2 into r33;\n        sub r30.microcredits r2 into r34;\n        gte r34 100_000_000u64 into r35;\n        gte r33 10_000_000_000_000u64 into r36;\n        and r35 r36 into r37;\n        branch.eq r37 false to remove_validator;\n        get.or_use unbonding[r5.validator] r4 into r38;\n        add r38.microcredits r2 into r39;\n        cast r39 r3 into r40 as unbond_state;\n        set r40 into unbonding[r5.validator];\n        set r33 into delegated[r5.validator];\n        cast r5.validator r34 into r41 as bond_state;\n        set r41 into bonded[r5.validator];\n        branch.eq true true to end;\n    position remove_validator;\n        remove committee[r5.validator];\n        get metadata[aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc] into r42;\n        sub r42 1u32 into r43;\n        set r43 into metadata[aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc];\n        sub r31 r30.microcredits into r44;\n        set r44 into delegated[r5.validator];\n        remove bonded[r5.validator];\n        get.or_use unbonding[r5.validator] r4 into r45;\n        add r30.microcredits r45.microcredits into r46;\n        cast r46 r3 into r47 as unbond_state;\n        set r47 into unbonding[r5.validator];\n    position end;\n\nfunction claim_unbond_public:\n    input r0 as address.public;\n    async claim_unbond_public r0 into r1;\n    output r1 as credits.aleo/claim_unbond_public.future;\n\nfinalize claim_unbond_public:\n    input r0 as address.public;\n    get unbonding[r0] into r1;\n    gte block.height r1.height into r2;\n    assert.eq r2 true;\n    get withdraw[r0] into r3;\n    get.or_use account[r3] 0u64 into r4;\n    add r1.microcredits r4 into r5;\n    set r5 into account[r3];\n    remove unbonding[r0];\n    contains bonded[r0] into r6;\n    branch.eq r6 true to end;\n    remove withdraw[r0];\n    position end;\n\nfunction set_validator_state:\n    input r0 as boolean.public;\n    async set_validator_state self.caller r0 into r1;\n    output r1 as credits.aleo/set_validator_state.future;\n\nfinalize set_validator_state:\n    input r0 as address.public;\n    input r1 as boolean.public;\n    get committee[r0] into r2;\n    cast r1 r2.commission into r3 as committee_state;\n    set r3 into committee[r0];\n\nfunction transfer_public:\n    input r0 as address.public;\n    input r1 as u64.public;\n    async transfer_public self.caller r0 r1 into r2;\n    output r2 as credits.aleo/transfer_public.future;\n\nfinalize transfer_public:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as u64.public;\n    get account[r0] into r3;\n    sub r3 r2 into r4;\n    set r4 into account[r0];\n    get.or_use account[r1] 0u64 into r5;\n    add r5 r2 into r6;\n    set r6 into account[r1];\n\nfunction transfer_public_as_signer:\n    input r0 as address.public;\n    input r1 as u64.public;\n    async transfer_public_as_signer self.signer r0 r1 into r2;\n    output r2 as credits.aleo/transfer_public_as_signer.future;\n\nfinalize transfer_public_as_signer:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as u64.public;\n    get account[r0] into r3;\n    sub r3 r2 into r4;\n    set r4 into account[r0];\n    get.or_use account[r1] 0u64 into r5;\n    add r5 r2 into r6;\n    set r6 into account[r1];\n\nfunction transfer_private:\n    input r0 as credits.record;\n    input r1 as address.private;\n    input r2 as u64.private;\n    sub r0.microcredits r2 into r3;\n    cast r1 r2 into r4 as credits.record;\n    cast r0.owner r3 into r5 as credits.record;\n    output r4 as credits.record;\n    output r5 as credits.record;\n\nfunction transfer_private_to_public:\n    input r0 as credits.record;\n    input r1 as address.public;\n    input r2 as u64.public;\n    sub r0.microcredits r2 into r3;\n    cast r0.owner r3 into r4 as credits.record;\n    async transfer_private_to_public r1 r2 into r5;\n    output r4 as credits.record;\n    output r5 as credits.aleo/transfer_private_to_public.future;\n\nfinalize transfer_private_to_public:\n    input r0 as address.public;\n    input r1 as u64.public;\n    get.or_use account[r0] 0u64 into r2;\n    add r1 r2 into r3;\n    set r3 into account[r0];\n\nfunction transfer_public_to_private:\n    input r0 as address.private;\n    input r1 as u64.public;\n    cast r0 r1 into r2 as credits.record;\n    async transfer_public_to_private self.caller r1 into r3;\n    output r2 as credits.record;\n    output r3 as credits.aleo/transfer_public_to_private.future;\n\nfinalize transfer_public_to_private:\n    input r0 as address.public;\n    input r1 as u64.public;\n    get account[r0] into r2;\n    sub r2 r1 into r3;\n    set r3 into account[r0];\n\nfunction join:\n    input r0 as credits.record;\n    input r1 as credits.record;\n    add r0.microcredits r1.microcredits into r2;\n    cast r0.owner r2 into r3 as credits.record;\n    output r3 as credits.record;\n\nfunction split:\n    input r0 as credits.record;\n    input r1 as u64.private;\n    sub r0.microcredits r1 into r2;\n    sub r2 10_000u64 into r3;\n    cast r0.owner r1 into r4 as credits.record;\n    cast r0.owner r3 into r5 as credits.record;\n    output r4 as credits.record;\n    output r5 as credits.record;\n\nfunction fee_private:\n    input r0 as credits.record;\n    input r1 as u64.public;\n    input r2 as u64.public;\n    input r3 as field.public;\n    assert.neq r1 0u64;\n    assert.neq r3 0field;\n    add r1 r2 into r4;\n    sub r0.microcredits r4 into r5;\n    cast r0.owner r5 into r6 as credits.record;\n    output r6 as credits.record;\n\nfunction fee_public:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    input r2 as field.public;\n    assert.neq r0 0u64;\n    assert.neq r2 0field;\n    add r0 r1 into r3;\n    async fee_public self.signer r3 into r4;\n    output r4 as credits.aleo/fee_public.future;\n\nfinalize fee_public:\n    input r0 as address.public;\n    input r1 as u64.public;\n    get account[r0] into r2;\n    sub r2 r1 into r3;\n    set r3 into account[r0];\n\nfunction upgrade:\n    input r0 as credits.record;\n    lte r0.microcredits 1_000_000_000_000u64 into r1;\n    assert.eq r1 true;\n    cast r0.owner r0.microcredits into r2 as credits.record;\n    async upgrade r0.microcredits into r3;\n    output r2 as credits.record;\n    output r3 as credits.aleo/upgrade.future;\n\nfinalize upgrade:\n    input r0 as u64.public;\n    get.or_use pool[aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc] 0u64 into r1;\n    add r1 r0 into r2;\n    lte r2 4_000_000_000_000u64 into r3;\n    assert.eq r3 true;\n    set r2 into pool[aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc];`;
export const hook_manager = `import credits.aleo;\nimport ism_manager.aleo;\nimport mailbox.aleo;\nprogram hook_manager.aleo;\n\nstruct Message:\n    version as u8;\n    nonce as u32;\n    origin_domain as u32;\n    sender as [u8; 32u32];\n    destination_domain as u32;\n    recipient as [u8; 32u32];\n    body as [u128; 8u32];\n\nstruct InterchainGasPaymaster:\n    hook_owner as address;\n    nonce as u32;\n    balance as u64;\n    count as u32;\n\nstruct Tree:\n    branch as [[u128; 2u32]; 32u32];\n    count as u32;\n\nstruct MerkleTreeHook:\n    parent as address;\n    root as [u128; 2u32];\n    tree as Tree;\n    nonce as u32;\n\nstruct NoopHook:\n    nonce as u32;\n\nstruct InsertedIntoTreeEvent:\n    id as [u128; 2u32];\n    index as u32;\n\nstruct GasConfigKey:\n    igp as address;\n    destination as u32;\n\nstruct DomainGasConfig:\n    gas_overhead as u128;\n    exchange_rate as u128;\n    gas_price as u128;\n\nstruct GasPaymentEvent:\n    id as [u128; 2u32];\n    destination_domain as u32;\n    gas_amount as u128;\n    payment as u64;\n    index as u32;\n\nstruct EventKey:\n    hook as address;\n    index as u32;\n\nstruct EventIndexKey:\n    hook as address;\n    block_height as u32;\n\nstruct CreditAllowance:\n    spender as address;\n    amount as u64;\n\nstruct EthAddress:\n    bytes as [u8; 20u32];\n\nstruct Mailbox:\n    local_domain as u32;\n    nonce as u32;\n    process_count as u32;\n    default_ism as address;\n    default_hook as address;\n    required_hook as address;\n    dispatch_proxy as address;\n    mailbox_owner as address;\n\nmapping nonce:\n    key as boolean.public;\n    value as u32.public;\n\nmapping igps:\n    key as address.public;\n    value as InterchainGasPaymaster.public;\n\nmapping destination_gas_configs:\n    key as GasConfigKey.public;\n    value as DomainGasConfig.public;\n\nmapping merkle_tree_hooks:\n    key as address.public;\n    value as MerkleTreeHook.public;\n\nmapping hooks:\n    key as address.public;\n    value as u8.public;\n\nmapping hook_addresses:\n    key as u32.public;\n    value as address.public;\n\nmapping gas_payment_events:\n    key as EventKey.public;\n    value as GasPaymentEvent.public;\n\nmapping inserted_into_tree_events:\n    key as EventKey.public;\n    value as InsertedIntoTreeEvent.public;\n\nmapping last_event_index:\n    key as EventIndexKey.public;\n    value as u32.public;\n\nfunction init_noop:\n    async init_noop into r0;\n    output r0 as hook_manager.aleo/init_noop.future;\n\nfinalize init_noop:\n    get.or_use nonce[true] 0u32 into r0;\n    cast r0 into r1 as NoopHook;\n    hash.bhp256 r1 into r2 as address;\n    contains hooks[r2] into r3;\n    not r3 into r4;\n    assert.eq r4 true;\n    set r2 into hook_addresses[r0];\n    add r0 1u32 into r5;\n    set r5 into nonce[true];\n    set 0u8 into hooks[r2];\n\nfunction init_igp:\n    async init_igp self.caller into r0;\n    output r0 as hook_manager.aleo/init_igp.future;\n\nfinalize init_igp:\n    input r0 as address.public;\n    get.or_use nonce[true] 0u32 into r1;\n    cast r0 r1 0u64 0u32 into r2 as InterchainGasPaymaster;\n    hash.bhp256 r2 into r3 as address;\n    contains hooks[r3] into r4;\n    not r4 into r5;\n    assert.eq r5 true;\n    set r3 into hook_addresses[r1];\n    add r1 1u32 into r6;\n    set r6 into nonce[true];\n    set 4u8 into hooks[r3];\n    set r2 into igps[r3];\n\nfunction set_destination_gas_config:\n    input r0 as address.public;\n    input r1 as u32.public;\n    input r2 as DomainGasConfig.public;\n    async set_destination_gas_config r0 r1 r2 self.caller into r3;\n    output r3 as hook_manager.aleo/set_destination_gas_config.future;\n\nfinalize set_destination_gas_config:\n    input r0 as address.public;\n    input r1 as u32.public;\n    input r2 as DomainGasConfig.public;\n    input r3 as address.public;\n    contains igps[r0] into r4;\n    assert.eq r4 true;\n    get igps[r0] into r5;\n    assert.eq r5.hook_owner r3;\n    cast r0 r1 into r6 as GasConfigKey;\n    set r2 into destination_gas_configs[r6];\n\nfunction remove_destination_gas_config:\n    input r0 as address.public;\n    input r1 as u32.public;\n    async remove_destination_gas_config r0 r1 self.caller into r2;\n    output r2 as hook_manager.aleo/remove_destination_gas_config.future;\n\nfinalize remove_destination_gas_config:\n    input r0 as address.public;\n    input r1 as u32.public;\n    input r2 as address.public;\n    contains igps[r0] into r3;\n    assert.eq r3 true;\n    get igps[r0] into r4;\n    assert.eq r4.hook_owner r2;\n    cast r0 r1 into r5 as GasConfigKey;\n    remove destination_gas_configs[r5];\n\nfunction claim:\n    input r0 as address.private;\n    input r1 as u64.private;\n    call credits.aleo/transfer_public self.caller r1 into r2;\n    async claim r0 self.caller r1 r2 into r3;\n    output r3 as hook_manager.aleo/claim.future;\n\nfinalize claim:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as u64.public;\n    input r3 as credits.aleo/transfer_public.future;\n    contains igps[r0] into r4;\n    assert.eq r4 true;\n    get igps[r0] into r5;\n    assert.eq r5.hook_owner r1;\n    gte r5.balance r2 into r6;\n    assert.eq r6 true;\n    await r3;\n    sub r5.balance r2 into r7;\n    cast r5.hook_owner r5.nonce r7 r5.count into r8 as InterchainGasPaymaster;\n    set r8 into igps[r0];\n\nfunction pay_for_gas:\n    input r0 as address.private;\n    input r1 as [u128; 2u32].private;\n    input r2 as u32.private;\n    input r3 as u128.private;\n    input r4 as u64.private;\n    call credits.aleo/transfer_public_as_signer hook_manager.aleo r4 into r5;\n    async pay_for_gas r0 r1 r2 r3 r4 r5 into r6;\n    output r6 as hook_manager.aleo/pay_for_gas.future;\n\nfinalize pay_for_gas:\n    input r0 as address.public;\n    input r1 as [u128; 2u32].public;\n    input r2 as u32.public;\n    input r3 as u128.public;\n    input r4 as u64.public;\n    input r5 as credits.aleo/transfer_public_as_signer.future;\n    cast r0 r2 into r6 as GasConfigKey;\n    contains destination_gas_configs[r6] into r7;\n    assert.eq r7 true;\n    get destination_gas_configs[r6] into r8;\n    mul r3 r8.gas_price into r9;\n    mul r9 r8.exchange_rate into r10;\n    div r10 10000000000u128 into r11;\n    lte r11 18446744073709551615u128 into r12;\n    assert.eq r12 true;\n    cast r11 into r13 as u64;\n    assert.eq r13 r4;\n    await r5;\n    get igps[r0] into r14;\n    cast r0 r14.count into r15 as EventKey;\n    cast r1 r2 r3 r4 r14.count into r16 as GasPaymentEvent;\n    set r16 into gas_payment_events[r15];\n    cast r0 block.height into r17 as EventIndexKey;\n    set r14.count into last_event_index[r17];\n    add r14.balance r4 into r18;\n    add r14.count 1u32 into r19;\n    cast r14.hook_owner r14.nonce r18 r19 into r20 as InterchainGasPaymaster;\n    set r20 into igps[r0];\n\nfunction init_merkle_tree:\n    input r0 as address.private;\n    async init_merkle_tree r0 into r1;\n    output r1 as hook_manager.aleo/init_merkle_tree.future;\n\nfinalize init_merkle_tree:\n    input r0 as address.public;\n    get.or_use nonce[true] 0u32 into r1;\n    cast 0u128 0u128 into r2 as [u128; 2u32];\n    cast 200636014418684474793900124069647889069u128 241087320001230136080519585693436229163u128 into r3 as [u128; 2u32];\n    cast 93974531276030024843854739648391266740u128 63871773629875849864439396521971482176u128 into r4 as [u128; 2u32];\n    cast 66294067272630431583104841350689447201u128 177756802695730322470865725932422475556u128 into r5 as [u128; 2u32];\n    cast 17747458619593854979588589471465572325u128 91154039873745303917061774773470934559u128 into r6 as [u128; 2u32];\n    cast 41440521891025744745128838831940743182u128 60894629520669430433793374864326529801u128 into r7 as [u128; 2u32];\n    cast 59903522946444936989019680377850199176u128 138372656349779401676123096700574490028u128 into r8 as [u128; 2u32];\n    cast 3180262733561280138502805056821254143u128 174708888174609290132996609679840034611u128 into r9 as [u128; 2u32];\n    cast 48455171203811811641967620231072081816u128 233066451124647651551022141310218850885u128 into r10 as [u128; 2u32];\n    cast 334080689485914854275740245880500189902u128 298184847794429370937316245747346618882u128 into r11 as [u128; 2u32];\n    cast 282653557140816677488147447345498217721u128 220339046210024952190566302967731665406u128 into r12 as [u128; 2u32];\n    cast 145672768088204442335147548738764583416u128 195359773238112912523174698163665391889u128 into r13 as [u128; 2u32];\n    cast 21418297075731751014499913670238572596u128 208490304233564026108050214927462029255u128 into r14 as [u128; 2u32];\n    cast 281404733672930043025800266103516225473u128 249742050973351594617409037165098847317u128 into r15 as [u128; 2u32];\n    cast 289879148739902069907218623618383439708u128 272153760179965878774948581978868862730u128 into r16 as [u128; 2u32];\n    cast 293159551140992943817529578958841871322u128 279338235662809517033392482105447374970u128 into r17 as [u128; 2u32];\n    cast 322093384055859711002317835595919209255u128 42000488150413793222910142038008516924u128 into r18 as [u128; 2u32];\n    cast 122254499464535460357349615889605317601u128 163409875357997099341612933566874181274u128 into r19 as [u128; 2u32];\n    cast 59132542617709958082991564676137889114u128 213307109849065044721731388145721391918u128 into r20 as [u128; 2u32];\n    cast 81821347195604723027123097456320473780u128 213231151757453664031032733501577239314u128 into r21 as [u128; 2u32];\n    cast 336114429845119848727407931190249152198u128 301360598096960973755532425519001651903u128 into r22 as [u128; 2u32];\n    cast 320542506166910886628941017057425965556u128 289604304606881051317113816162407361165u128 into r23 as [u128; 2u32];\n    cast 270315001578019215236444169667452771418u128 159359836010757059645879798671718049365u128 into r24 as [u128; 2u32];\n    cast 222279943939488608983982977534856788045u128 110191212380795297761298100413926971842u128 into r25 as [u128; 2u32];\n    cast 133196525511722763539122868050171643853u128 317818349342580659794271157815744496524u128 into r26 as [u128; 2u32];\n    cast 155004929552231825612177418997554921226u128 187928388822560161625857840976354543861u128 into r27 as [u128; 2u32];\n    cast 133005247855215888074055167590444355000u128 277185228623223348062409148812927309868u128 into r28 as [u128; 2u32];\n    cast 297025694464961376815096585744545123459u128 40897156374938635533147054173498873588u128 into r29 as [u128; 2u32];\n    cast 6336040213458809633392154838101667430u128 62367222880804479430297662353502398838u128 into r30 as [u128; 2u32];\n    cast 202117996738898010692652600915964103224u128 46042986625269866222220954975551057138u128 into r31 as [u128; 2u32];\n    cast 85413120008009180910770793363078390675u128 71567477878241302074513460496530530059u128 into r32 as [u128; 2u32];\n    cast 297864792032486788802704391190316402820u128 225086078672275754295496924647458870974u128 into r33 as [u128; 2u32];\n    cast r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 r33 into r34 as [[u128; 2u32]; 32u32];\n    cast r34 0u32 into r35 as Tree;\n    cast 96697620089336775378094670865426525735u128 116761479129358376777137895554163725990u128 into r36 as [u128; 2u32];\n    cast r0 r36 r35 r1 into r37 as MerkleTreeHook;\n    hash.bhp256 r37 into r38 as address;\n    contains hooks[r38] into r39;\n    not r39 into r40;\n    assert.eq r40 true;\n    set r38 into hook_addresses[r1];\n    add r1 1u32 into r41;\n    set r41 into nonce[true];\n    set 3u8 into hooks[r38];\n    set r37 into merkle_tree_hooks[r38];\n\nfunction post_dispatch:\n    input r0 as address.public;\n    input r1 as [u8; 256u32].public;\n    input r2 as [CreditAllowance; 4u32].public;\n    is.eq r2[0u32].spender r0 into r3;\n    ternary r3 r2[0u32].amount 0u64 into r4;\n    is.eq r2[1u32].spender r0 into r5;\n    ternary r5 r2[1u32].amount r4 into r6;\n    is.eq r2[2u32].spender r0 into r7;\n    ternary r7 r2[2u32].amount r6 into r8;\n    is.eq r2[3u32].spender r0 into r9;\n    ternary r9 r2[3u32].amount r8 into r10;\n    call credits.aleo/transfer_public_as_signer hook_manager.aleo r10 into r11;\n    async post_dispatch r0 r1 self.caller r10 r11 into r12;\n    output r12 as hook_manager.aleo/post_dispatch.future;\n\nfinalize post_dispatch:\n    input r0 as address.public;\n    input r1 as [u8; 256u32].public;\n    input r2 as address.public;\n    input r3 as u64.public;\n    input r4 as credits.aleo/transfer_public_as_signer.future;\n    contains hooks[r0] into r5;\n    assert.eq r5 true;\n    get hooks[r0] into r6;\n    await r4;\n    get mailbox.aleo/mailbox[true] into r7;\n    gt r7.nonce 0u32 into r8;\n    assert.eq r8 true;\n    sub r7.nonce 1u32 into r9;\n    get mailbox.aleo/dispatch_events[r9] into r10;\n    sub r7.nonce 1u32 into r11;\n    get mailbox.aleo/dispatch_id_events[r11] into r12;\n    cast r0 block.height into r13 as EventIndexKey;\n    is.eq r6 3u8 into r14;\n    branch.eq r14 false to end_then_0_0;\n    get merkle_tree_hooks[r0] into r15;\n    assert.eq r15.parent r2;\n    lt r15.tree.count 4294967295u32 into r16;\n    assert.eq r16 true;\n    add r15.tree.count 1u32 into r17;\n    and r17 1u32 into r18;\n    gt r18 0u32 into r19;\n    not false into r20;\n    and r19 r20 into r21;\n    cast r15.tree.branch[0u32] r15.tree.branch[1u32] r15.tree.branch[2u32] r15.tree.branch[3u32] r15.tree.branch[4u32] r15.tree.branch[5u32] r15.tree.branch[6u32] r15.tree.branch[7u32] r15.tree.branch[8u32] r15.tree.branch[9u32] r15.tree.branch[10u32] r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r22 as [[u128; 2u32]; 32u32];\n    cast r22[0u32][0u32] r22[0u32][1u32] r12[0u32] r12[1u32] into r23 as [u128; 4u32];\n    hash.keccak256.native.raw r23 into r24 as [boolean; 256u32];\n    deserialize.bits.raw r24 ([boolean; 256u32]) into r25 ([u128; 2u32]);\n    div r17 2u32 into r26;\n    ternary r21 r12[0u32] r15.tree.branch[0u32][0u32] into r27;\n    ternary r21 r12[1u32] r15.tree.branch[0u32][1u32] into r28;\n    cast r27 r28 into r29 as [u128; 2u32];\n    ternary r21 true false into r30;\n    ternary r21 r12[0u32] r25[0u32] into r31;\n    ternary r21 r12[1u32] r25[1u32] into r32;\n    cast r31 r32 into r33 as [u128; 2u32];\n    ternary r21 r17 r26 into r34;\n    and r34 1u32 into r35;\n    gt r35 0u32 into r36;\n    not r30 into r37;\n    and r36 r37 into r38;\n    cast r29 r15.tree.branch[1u32] r15.tree.branch[2u32] r15.tree.branch[3u32] r15.tree.branch[4u32] r15.tree.branch[5u32] r15.tree.branch[6u32] r15.tree.branch[7u32] r15.tree.branch[8u32] r15.tree.branch[9u32] r15.tree.branch[10u32] r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r39 as [[u128; 2u32]; 32u32];\n    cast r39[1u32][0u32] r39[1u32][1u32] r33[0u32] r33[1u32] into r40 as [u128; 4u32];\n    hash.keccak256.native.raw r40 into r41 as [boolean; 256u32];\n    deserialize.bits.raw r41 ([boolean; 256u32]) into r42 ([u128; 2u32]);\n    div r34 2u32 into r43;\n    ternary r38 r33[0u32] r15.tree.branch[1u32][0u32] into r44;\n    ternary r38 r33[1u32] r15.tree.branch[1u32][1u32] into r45;\n    cast r44 r45 into r46 as [u128; 2u32];\n    ternary r38 true r30 into r47;\n    ternary r38 r33[0u32] r42[0u32] into r48;\n    ternary r38 r33[1u32] r42[1u32] into r49;\n    cast r48 r49 into r50 as [u128; 2u32];\n    ternary r38 r34 r43 into r51;\n    and r51 1u32 into r52;\n    gt r52 0u32 into r53;\n    not r47 into r54;\n    and r53 r54 into r55;\n    cast r29 r46 r15.tree.branch[2u32] r15.tree.branch[3u32] r15.tree.branch[4u32] r15.tree.branch[5u32] r15.tree.branch[6u32] r15.tree.branch[7u32] r15.tree.branch[8u32] r15.tree.branch[9u32] r15.tree.branch[10u32] r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r56 as [[u128; 2u32]; 32u32];\n    cast r56[2u32][0u32] r56[2u32][1u32] r50[0u32] r50[1u32] into r57 as [u128; 4u32];\n    hash.keccak256.native.raw r57 into r58 as [boolean; 256u32];\n    deserialize.bits.raw r58 ([boolean; 256u32]) into r59 ([u128; 2u32]);\n    div r51 2u32 into r60;\n    ternary r55 r50[0u32] r15.tree.branch[2u32][0u32] into r61;\n    ternary r55 r50[1u32] r15.tree.branch[2u32][1u32] into r62;\n    cast r61 r62 into r63 as [u128; 2u32];\n    ternary r55 true r47 into r64;\n    ternary r55 r50[0u32] r59[0u32] into r65;\n    ternary r55 r50[1u32] r59[1u32] into r66;\n    cast r65 r66 into r67 as [u128; 2u32];\n    ternary r55 r51 r60 into r68;\n    and r68 1u32 into r69;\n    gt r69 0u32 into r70;\n    not r64 into r71;\n    and r70 r71 into r72;\n    cast r29 r46 r63 r15.tree.branch[3u32] r15.tree.branch[4u32] r15.tree.branch[5u32] r15.tree.branch[6u32] r15.tree.branch[7u32] r15.tree.branch[8u32] r15.tree.branch[9u32] r15.tree.branch[10u32] r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r73 as [[u128; 2u32]; 32u32];\n    cast r73[3u32][0u32] r73[3u32][1u32] r67[0u32] r67[1u32] into r74 as [u128; 4u32];\n    hash.keccak256.native.raw r74 into r75 as [boolean; 256u32];\n    deserialize.bits.raw r75 ([boolean; 256u32]) into r76 ([u128; 2u32]);\n    div r68 2u32 into r77;\n    ternary r72 r67[0u32] r15.tree.branch[3u32][0u32] into r78;\n    ternary r72 r67[1u32] r15.tree.branch[3u32][1u32] into r79;\n    cast r78 r79 into r80 as [u128; 2u32];\n    ternary r72 true r64 into r81;\n    ternary r72 r67[0u32] r76[0u32] into r82;\n    ternary r72 r67[1u32] r76[1u32] into r83;\n    cast r82 r83 into r84 as [u128; 2u32];\n    ternary r72 r68 r77 into r85;\n    and r85 1u32 into r86;\n    gt r86 0u32 into r87;\n    not r81 into r88;\n    and r87 r88 into r89;\n    cast r29 r46 r63 r80 r15.tree.branch[4u32] r15.tree.branch[5u32] r15.tree.branch[6u32] r15.tree.branch[7u32] r15.tree.branch[8u32] r15.tree.branch[9u32] r15.tree.branch[10u32] r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r90 as [[u128; 2u32]; 32u32];\n    cast r90[4u32][0u32] r90[4u32][1u32] r84[0u32] r84[1u32] into r91 as [u128; 4u32];\n    hash.keccak256.native.raw r91 into r92 as [boolean; 256u32];\n    deserialize.bits.raw r92 ([boolean; 256u32]) into r93 ([u128; 2u32]);\n    div r85 2u32 into r94;\n    ternary r89 r84[0u32] r15.tree.branch[4u32][0u32] into r95;\n    ternary r89 r84[1u32] r15.tree.branch[4u32][1u32] into r96;\n    cast r95 r96 into r97 as [u128; 2u32];\n    ternary r89 true r81 into r98;\n    ternary r89 r84[0u32] r93[0u32] into r99;\n    ternary r89 r84[1u32] r93[1u32] into r100;\n    cast r99 r100 into r101 as [u128; 2u32];\n    ternary r89 r85 r94 into r102;\n    and r102 1u32 into r103;\n    gt r103 0u32 into r104;\n    not r98 into r105;\n    and r104 r105 into r106;\n    cast r29 r46 r63 r80 r97 r15.tree.branch[5u32] r15.tree.branch[6u32] r15.tree.branch[7u32] r15.tree.branch[8u32] r15.tree.branch[9u32] r15.tree.branch[10u32] r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r107 as [[u128; 2u32]; 32u32];\n    cast r107[5u32][0u32] r107[5u32][1u32] r101[0u32] r101[1u32] into r108 as [u128; 4u32];\n    hash.keccak256.native.raw r108 into r109 as [boolean; 256u32];\n    deserialize.bits.raw r109 ([boolean; 256u32]) into r110 ([u128; 2u32]);\n    div r102 2u32 into r111;\n    ternary r106 r101[0u32] r15.tree.branch[5u32][0u32] into r112;\n    ternary r106 r101[1u32] r15.tree.branch[5u32][1u32] into r113;\n    cast r112 r113 into r114 as [u128; 2u32];\n    ternary r106 true r98 into r115;\n    ternary r106 r101[0u32] r110[0u32] into r116;\n    ternary r106 r101[1u32] r110[1u32] into r117;\n    cast r116 r117 into r118 as [u128; 2u32];\n    ternary r106 r102 r111 into r119;\n    and r119 1u32 into r120;\n    gt r120 0u32 into r121;\n    not r115 into r122;\n    and r121 r122 into r123;\n    cast r29 r46 r63 r80 r97 r114 r15.tree.branch[6u32] r15.tree.branch[7u32] r15.tree.branch[8u32] r15.tree.branch[9u32] r15.tree.branch[10u32] r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r124 as [[u128; 2u32]; 32u32];\n    cast r124[6u32][0u32] r124[6u32][1u32] r118[0u32] r118[1u32] into r125 as [u128; 4u32];\n    hash.keccak256.native.raw r125 into r126 as [boolean; 256u32];\n    deserialize.bits.raw r126 ([boolean; 256u32]) into r127 ([u128; 2u32]);\n    div r119 2u32 into r128;\n    ternary r123 r118[0u32] r15.tree.branch[6u32][0u32] into r129;\n    ternary r123 r118[1u32] r15.tree.branch[6u32][1u32] into r130;\n    cast r129 r130 into r131 as [u128; 2u32];\n    ternary r123 true r115 into r132;\n    ternary r123 r118[0u32] r127[0u32] into r133;\n    ternary r123 r118[1u32] r127[1u32] into r134;\n    cast r133 r134 into r135 as [u128; 2u32];\n    ternary r123 r119 r128 into r136;\n    and r136 1u32 into r137;\n    gt r137 0u32 into r138;\n    not r132 into r139;\n    and r138 r139 into r140;\n    cast r29 r46 r63 r80 r97 r114 r131 r15.tree.branch[7u32] r15.tree.branch[8u32] r15.tree.branch[9u32] r15.tree.branch[10u32] r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r141 as [[u128; 2u32]; 32u32];\n    cast r141[7u32][0u32] r141[7u32][1u32] r135[0u32] r135[1u32] into r142 as [u128; 4u32];\n    hash.keccak256.native.raw r142 into r143 as [boolean; 256u32];\n    deserialize.bits.raw r143 ([boolean; 256u32]) into r144 ([u128; 2u32]);\n    div r136 2u32 into r145;\n    ternary r140 r135[0u32] r15.tree.branch[7u32][0u32] into r146;\n    ternary r140 r135[1u32] r15.tree.branch[7u32][1u32] into r147;\n    cast r146 r147 into r148 as [u128; 2u32];\n    ternary r140 true r132 into r149;\n    ternary r140 r135[0u32] r144[0u32] into r150;\n    ternary r140 r135[1u32] r144[1u32] into r151;\n    cast r150 r151 into r152 as [u128; 2u32];\n    ternary r140 r136 r145 into r153;\n    and r153 1u32 into r154;\n    gt r154 0u32 into r155;\n    not r149 into r156;\n    and r155 r156 into r157;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r15.tree.branch[8u32] r15.tree.branch[9u32] r15.tree.branch[10u32] r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r158 as [[u128; 2u32]; 32u32];\n    cast r158[8u32][0u32] r158[8u32][1u32] r152[0u32] r152[1u32] into r159 as [u128; 4u32];\n    hash.keccak256.native.raw r159 into r160 as [boolean; 256u32];\n    deserialize.bits.raw r160 ([boolean; 256u32]) into r161 ([u128; 2u32]);\n    div r153 2u32 into r162;\n    ternary r157 r152[0u32] r15.tree.branch[8u32][0u32] into r163;\n    ternary r157 r152[1u32] r15.tree.branch[8u32][1u32] into r164;\n    cast r163 r164 into r165 as [u128; 2u32];\n    ternary r157 true r149 into r166;\n    ternary r157 r152[0u32] r161[0u32] into r167;\n    ternary r157 r152[1u32] r161[1u32] into r168;\n    cast r167 r168 into r169 as [u128; 2u32];\n    ternary r157 r153 r162 into r170;\n    and r170 1u32 into r171;\n    gt r171 0u32 into r172;\n    not r166 into r173;\n    and r172 r173 into r174;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r15.tree.branch[9u32] r15.tree.branch[10u32] r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r175 as [[u128; 2u32]; 32u32];\n    cast r175[9u32][0u32] r175[9u32][1u32] r169[0u32] r169[1u32] into r176 as [u128; 4u32];\n    hash.keccak256.native.raw r176 into r177 as [boolean; 256u32];\n    deserialize.bits.raw r177 ([boolean; 256u32]) into r178 ([u128; 2u32]);\n    div r170 2u32 into r179;\n    ternary r174 r169[0u32] r15.tree.branch[9u32][0u32] into r180;\n    ternary r174 r169[1u32] r15.tree.branch[9u32][1u32] into r181;\n    cast r180 r181 into r182 as [u128; 2u32];\n    ternary r174 true r166 into r183;\n    ternary r174 r169[0u32] r178[0u32] into r184;\n    ternary r174 r169[1u32] r178[1u32] into r185;\n    cast r184 r185 into r186 as [u128; 2u32];\n    ternary r174 r170 r179 into r187;\n    and r187 1u32 into r188;\n    gt r188 0u32 into r189;\n    not r183 into r190;\n    and r189 r190 into r191;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r15.tree.branch[10u32] r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r192 as [[u128; 2u32]; 32u32];\n    cast r192[10u32][0u32] r192[10u32][1u32] r186[0u32] r186[1u32] into r193 as [u128; 4u32];\n    hash.keccak256.native.raw r193 into r194 as [boolean; 256u32];\n    deserialize.bits.raw r194 ([boolean; 256u32]) into r195 ([u128; 2u32]);\n    div r187 2u32 into r196;\n    ternary r191 r186[0u32] r15.tree.branch[10u32][0u32] into r197;\n    ternary r191 r186[1u32] r15.tree.branch[10u32][1u32] into r198;\n    cast r197 r198 into r199 as [u128; 2u32];\n    ternary r191 true r183 into r200;\n    ternary r191 r186[0u32] r195[0u32] into r201;\n    ternary r191 r186[1u32] r195[1u32] into r202;\n    cast r201 r202 into r203 as [u128; 2u32];\n    ternary r191 r187 r196 into r204;\n    and r204 1u32 into r205;\n    gt r205 0u32 into r206;\n    not r200 into r207;\n    and r206 r207 into r208;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r15.tree.branch[11u32] r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r209 as [[u128; 2u32]; 32u32];\n    cast r209[11u32][0u32] r209[11u32][1u32] r203[0u32] r203[1u32] into r210 as [u128; 4u32];\n    hash.keccak256.native.raw r210 into r211 as [boolean; 256u32];\n    deserialize.bits.raw r211 ([boolean; 256u32]) into r212 ([u128; 2u32]);\n    div r204 2u32 into r213;\n    ternary r208 r203[0u32] r15.tree.branch[11u32][0u32] into r214;\n    ternary r208 r203[1u32] r15.tree.branch[11u32][1u32] into r215;\n    cast r214 r215 into r216 as [u128; 2u32];\n    ternary r208 true r200 into r217;\n    ternary r208 r203[0u32] r212[0u32] into r218;\n    ternary r208 r203[1u32] r212[1u32] into r219;\n    cast r218 r219 into r220 as [u128; 2u32];\n    ternary r208 r204 r213 into r221;\n    and r221 1u32 into r222;\n    gt r222 0u32 into r223;\n    not r217 into r224;\n    and r223 r224 into r225;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r15.tree.branch[12u32] r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r226 as [[u128; 2u32]; 32u32];\n    cast r226[12u32][0u32] r226[12u32][1u32] r220[0u32] r220[1u32] into r227 as [u128; 4u32];\n    hash.keccak256.native.raw r227 into r228 as [boolean; 256u32];\n    deserialize.bits.raw r228 ([boolean; 256u32]) into r229 ([u128; 2u32]);\n    div r221 2u32 into r230;\n    ternary r225 r220[0u32] r15.tree.branch[12u32][0u32] into r231;\n    ternary r225 r220[1u32] r15.tree.branch[12u32][1u32] into r232;\n    cast r231 r232 into r233 as [u128; 2u32];\n    ternary r225 true r217 into r234;\n    ternary r225 r220[0u32] r229[0u32] into r235;\n    ternary r225 r220[1u32] r229[1u32] into r236;\n    cast r235 r236 into r237 as [u128; 2u32];\n    ternary r225 r221 r230 into r238;\n    and r238 1u32 into r239;\n    gt r239 0u32 into r240;\n    not r234 into r241;\n    and r240 r241 into r242;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r15.tree.branch[13u32] r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r243 as [[u128; 2u32]; 32u32];\n    cast r243[13u32][0u32] r243[13u32][1u32] r237[0u32] r237[1u32] into r244 as [u128; 4u32];\n    hash.keccak256.native.raw r244 into r245 as [boolean; 256u32];\n    deserialize.bits.raw r245 ([boolean; 256u32]) into r246 ([u128; 2u32]);\n    div r238 2u32 into r247;\n    ternary r242 r237[0u32] r15.tree.branch[13u32][0u32] into r248;\n    ternary r242 r237[1u32] r15.tree.branch[13u32][1u32] into r249;\n    cast r248 r249 into r250 as [u128; 2u32];\n    ternary r242 true r234 into r251;\n    ternary r242 r237[0u32] r246[0u32] into r252;\n    ternary r242 r237[1u32] r246[1u32] into r253;\n    cast r252 r253 into r254 as [u128; 2u32];\n    ternary r242 r238 r247 into r255;\n    and r255 1u32 into r256;\n    gt r256 0u32 into r257;\n    not r251 into r258;\n    and r257 r258 into r259;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r15.tree.branch[14u32] r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r260 as [[u128; 2u32]; 32u32];\n    cast r260[14u32][0u32] r260[14u32][1u32] r254[0u32] r254[1u32] into r261 as [u128; 4u32];\n    hash.keccak256.native.raw r261 into r262 as [boolean; 256u32];\n    deserialize.bits.raw r262 ([boolean; 256u32]) into r263 ([u128; 2u32]);\n    div r255 2u32 into r264;\n    ternary r259 r254[0u32] r15.tree.branch[14u32][0u32] into r265;\n    ternary r259 r254[1u32] r15.tree.branch[14u32][1u32] into r266;\n    cast r265 r266 into r267 as [u128; 2u32];\n    ternary r259 true r251 into r268;\n    ternary r259 r254[0u32] r263[0u32] into r269;\n    ternary r259 r254[1u32] r263[1u32] into r270;\n    cast r269 r270 into r271 as [u128; 2u32];\n    ternary r259 r255 r264 into r272;\n    and r272 1u32 into r273;\n    gt r273 0u32 into r274;\n    not r268 into r275;\n    and r274 r275 into r276;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r15.tree.branch[15u32] r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r277 as [[u128; 2u32]; 32u32];\n    cast r277[15u32][0u32] r277[15u32][1u32] r271[0u32] r271[1u32] into r278 as [u128; 4u32];\n    hash.keccak256.native.raw r278 into r279 as [boolean; 256u32];\n    deserialize.bits.raw r279 ([boolean; 256u32]) into r280 ([u128; 2u32]);\n    div r272 2u32 into r281;\n    ternary r276 r271[0u32] r15.tree.branch[15u32][0u32] into r282;\n    ternary r276 r271[1u32] r15.tree.branch[15u32][1u32] into r283;\n    cast r282 r283 into r284 as [u128; 2u32];\n    ternary r276 true r268 into r285;\n    ternary r276 r271[0u32] r280[0u32] into r286;\n    ternary r276 r271[1u32] r280[1u32] into r287;\n    cast r286 r287 into r288 as [u128; 2u32];\n    ternary r276 r272 r281 into r289;\n    and r289 1u32 into r290;\n    gt r290 0u32 into r291;\n    not r285 into r292;\n    and r291 r292 into r293;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r15.tree.branch[16u32] r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r294 as [[u128; 2u32]; 32u32];\n    cast r294[16u32][0u32] r294[16u32][1u32] r288[0u32] r288[1u32] into r295 as [u128; 4u32];\n    hash.keccak256.native.raw r295 into r296 as [boolean; 256u32];\n    deserialize.bits.raw r296 ([boolean; 256u32]) into r297 ([u128; 2u32]);\n    div r289 2u32 into r298;\n    ternary r293 r288[0u32] r15.tree.branch[16u32][0u32] into r299;\n    ternary r293 r288[1u32] r15.tree.branch[16u32][1u32] into r300;\n    cast r299 r300 into r301 as [u128; 2u32];\n    ternary r293 true r285 into r302;\n    ternary r293 r288[0u32] r297[0u32] into r303;\n    ternary r293 r288[1u32] r297[1u32] into r304;\n    cast r303 r304 into r305 as [u128; 2u32];\n    ternary r293 r289 r298 into r306;\n    and r306 1u32 into r307;\n    gt r307 0u32 into r308;\n    not r302 into r309;\n    and r308 r309 into r310;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r15.tree.branch[17u32] r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r311 as [[u128; 2u32]; 32u32];\n    cast r311[17u32][0u32] r311[17u32][1u32] r305[0u32] r305[1u32] into r312 as [u128; 4u32];\n    hash.keccak256.native.raw r312 into r313 as [boolean; 256u32];\n    deserialize.bits.raw r313 ([boolean; 256u32]) into r314 ([u128; 2u32]);\n    div r306 2u32 into r315;\n    ternary r310 r305[0u32] r15.tree.branch[17u32][0u32] into r316;\n    ternary r310 r305[1u32] r15.tree.branch[17u32][1u32] into r317;\n    cast r316 r317 into r318 as [u128; 2u32];\n    ternary r310 true r302 into r319;\n    ternary r310 r305[0u32] r314[0u32] into r320;\n    ternary r310 r305[1u32] r314[1u32] into r321;\n    cast r320 r321 into r322 as [u128; 2u32];\n    ternary r310 r306 r315 into r323;\n    and r323 1u32 into r324;\n    gt r324 0u32 into r325;\n    not r319 into r326;\n    and r325 r326 into r327;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r15.tree.branch[18u32] r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r328 as [[u128; 2u32]; 32u32];\n    cast r328[18u32][0u32] r328[18u32][1u32] r322[0u32] r322[1u32] into r329 as [u128; 4u32];\n    hash.keccak256.native.raw r329 into r330 as [boolean; 256u32];\n    deserialize.bits.raw r330 ([boolean; 256u32]) into r331 ([u128; 2u32]);\n    div r323 2u32 into r332;\n    ternary r327 r322[0u32] r15.tree.branch[18u32][0u32] into r333;\n    ternary r327 r322[1u32] r15.tree.branch[18u32][1u32] into r334;\n    cast r333 r334 into r335 as [u128; 2u32];\n    ternary r327 true r319 into r336;\n    ternary r327 r322[0u32] r331[0u32] into r337;\n    ternary r327 r322[1u32] r331[1u32] into r338;\n    cast r337 r338 into r339 as [u128; 2u32];\n    ternary r327 r323 r332 into r340;\n    and r340 1u32 into r341;\n    gt r341 0u32 into r342;\n    not r336 into r343;\n    and r342 r343 into r344;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r15.tree.branch[19u32] r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r345 as [[u128; 2u32]; 32u32];\n    cast r345[19u32][0u32] r345[19u32][1u32] r339[0u32] r339[1u32] into r346 as [u128; 4u32];\n    hash.keccak256.native.raw r346 into r347 as [boolean; 256u32];\n    deserialize.bits.raw r347 ([boolean; 256u32]) into r348 ([u128; 2u32]);\n    div r340 2u32 into r349;\n    ternary r344 r339[0u32] r15.tree.branch[19u32][0u32] into r350;\n    ternary r344 r339[1u32] r15.tree.branch[19u32][1u32] into r351;\n    cast r350 r351 into r352 as [u128; 2u32];\n    ternary r344 true r336 into r353;\n    ternary r344 r339[0u32] r348[0u32] into r354;\n    ternary r344 r339[1u32] r348[1u32] into r355;\n    cast r354 r355 into r356 as [u128; 2u32];\n    ternary r344 r340 r349 into r357;\n    and r357 1u32 into r358;\n    gt r358 0u32 into r359;\n    not r353 into r360;\n    and r359 r360 into r361;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r15.tree.branch[20u32] r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r362 as [[u128; 2u32]; 32u32];\n    cast r362[20u32][0u32] r362[20u32][1u32] r356[0u32] r356[1u32] into r363 as [u128; 4u32];\n    hash.keccak256.native.raw r363 into r364 as [boolean; 256u32];\n    deserialize.bits.raw r364 ([boolean; 256u32]) into r365 ([u128; 2u32]);\n    div r357 2u32 into r366;\n    ternary r361 r356[0u32] r15.tree.branch[20u32][0u32] into r367;\n    ternary r361 r356[1u32] r15.tree.branch[20u32][1u32] into r368;\n    cast r367 r368 into r369 as [u128; 2u32];\n    ternary r361 true r353 into r370;\n    ternary r361 r356[0u32] r365[0u32] into r371;\n    ternary r361 r356[1u32] r365[1u32] into r372;\n    cast r371 r372 into r373 as [u128; 2u32];\n    ternary r361 r357 r366 into r374;\n    and r374 1u32 into r375;\n    gt r375 0u32 into r376;\n    not r370 into r377;\n    and r376 r377 into r378;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r369 r15.tree.branch[21u32] r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r379 as [[u128; 2u32]; 32u32];\n    cast r379[21u32][0u32] r379[21u32][1u32] r373[0u32] r373[1u32] into r380 as [u128; 4u32];\n    hash.keccak256.native.raw r380 into r381 as [boolean; 256u32];\n    deserialize.bits.raw r381 ([boolean; 256u32]) into r382 ([u128; 2u32]);\n    div r374 2u32 into r383;\n    ternary r378 r373[0u32] r15.tree.branch[21u32][0u32] into r384;\n    ternary r378 r373[1u32] r15.tree.branch[21u32][1u32] into r385;\n    cast r384 r385 into r386 as [u128; 2u32];\n    ternary r378 true r370 into r387;\n    ternary r378 r373[0u32] r382[0u32] into r388;\n    ternary r378 r373[1u32] r382[1u32] into r389;\n    cast r388 r389 into r390 as [u128; 2u32];\n    ternary r378 r374 r383 into r391;\n    and r391 1u32 into r392;\n    gt r392 0u32 into r393;\n    not r387 into r394;\n    and r393 r394 into r395;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r369 r386 r15.tree.branch[22u32] r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r396 as [[u128; 2u32]; 32u32];\n    cast r396[22u32][0u32] r396[22u32][1u32] r390[0u32] r390[1u32] into r397 as [u128; 4u32];\n    hash.keccak256.native.raw r397 into r398 as [boolean; 256u32];\n    deserialize.bits.raw r398 ([boolean; 256u32]) into r399 ([u128; 2u32]);\n    div r391 2u32 into r400;\n    ternary r395 r390[0u32] r15.tree.branch[22u32][0u32] into r401;\n    ternary r395 r390[1u32] r15.tree.branch[22u32][1u32] into r402;\n    cast r401 r402 into r403 as [u128; 2u32];\n    ternary r395 true r387 into r404;\n    ternary r395 r390[0u32] r399[0u32] into r405;\n    ternary r395 r390[1u32] r399[1u32] into r406;\n    cast r405 r406 into r407 as [u128; 2u32];\n    ternary r395 r391 r400 into r408;\n    and r408 1u32 into r409;\n    gt r409 0u32 into r410;\n    not r404 into r411;\n    and r410 r411 into r412;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r369 r386 r403 r15.tree.branch[23u32] r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r413 as [[u128; 2u32]; 32u32];\n    cast r413[23u32][0u32] r413[23u32][1u32] r407[0u32] r407[1u32] into r414 as [u128; 4u32];\n    hash.keccak256.native.raw r414 into r415 as [boolean; 256u32];\n    deserialize.bits.raw r415 ([boolean; 256u32]) into r416 ([u128; 2u32]);\n    div r408 2u32 into r417;\n    ternary r412 r407[0u32] r15.tree.branch[23u32][0u32] into r418;\n    ternary r412 r407[1u32] r15.tree.branch[23u32][1u32] into r419;\n    cast r418 r419 into r420 as [u128; 2u32];\n    ternary r412 true r404 into r421;\n    ternary r412 r407[0u32] r416[0u32] into r422;\n    ternary r412 r407[1u32] r416[1u32] into r423;\n    cast r422 r423 into r424 as [u128; 2u32];\n    ternary r412 r408 r417 into r425;\n    and r425 1u32 into r426;\n    gt r426 0u32 into r427;\n    not r421 into r428;\n    and r427 r428 into r429;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r369 r386 r403 r420 r15.tree.branch[24u32] r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r430 as [[u128; 2u32]; 32u32];\n    cast r430[24u32][0u32] r430[24u32][1u32] r424[0u32] r424[1u32] into r431 as [u128; 4u32];\n    hash.keccak256.native.raw r431 into r432 as [boolean; 256u32];\n    deserialize.bits.raw r432 ([boolean; 256u32]) into r433 ([u128; 2u32]);\n    div r425 2u32 into r434;\n    ternary r429 r424[0u32] r15.tree.branch[24u32][0u32] into r435;\n    ternary r429 r424[1u32] r15.tree.branch[24u32][1u32] into r436;\n    cast r435 r436 into r437 as [u128; 2u32];\n    ternary r429 true r421 into r438;\n    ternary r429 r424[0u32] r433[0u32] into r439;\n    ternary r429 r424[1u32] r433[1u32] into r440;\n    cast r439 r440 into r441 as [u128; 2u32];\n    ternary r429 r425 r434 into r442;\n    and r442 1u32 into r443;\n    gt r443 0u32 into r444;\n    not r438 into r445;\n    and r444 r445 into r446;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r369 r386 r403 r420 r437 r15.tree.branch[25u32] r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r447 as [[u128; 2u32]; 32u32];\n    cast r447[25u32][0u32] r447[25u32][1u32] r441[0u32] r441[1u32] into r448 as [u128; 4u32];\n    hash.keccak256.native.raw r448 into r449 as [boolean; 256u32];\n    deserialize.bits.raw r449 ([boolean; 256u32]) into r450 ([u128; 2u32]);\n    div r442 2u32 into r451;\n    ternary r446 r441[0u32] r15.tree.branch[25u32][0u32] into r452;\n    ternary r446 r441[1u32] r15.tree.branch[25u32][1u32] into r453;\n    cast r452 r453 into r454 as [u128; 2u32];\n    ternary r446 true r438 into r455;\n    ternary r446 r441[0u32] r450[0u32] into r456;\n    ternary r446 r441[1u32] r450[1u32] into r457;\n    cast r456 r457 into r458 as [u128; 2u32];\n    ternary r446 r442 r451 into r459;\n    and r459 1u32 into r460;\n    gt r460 0u32 into r461;\n    not r455 into r462;\n    and r461 r462 into r463;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r369 r386 r403 r420 r437 r454 r15.tree.branch[26u32] r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r464 as [[u128; 2u32]; 32u32];\n    cast r464[26u32][0u32] r464[26u32][1u32] r458[0u32] r458[1u32] into r465 as [u128; 4u32];\n    hash.keccak256.native.raw r465 into r466 as [boolean; 256u32];\n    deserialize.bits.raw r466 ([boolean; 256u32]) into r467 ([u128; 2u32]);\n    div r459 2u32 into r468;\n    ternary r463 r458[0u32] r15.tree.branch[26u32][0u32] into r469;\n    ternary r463 r458[1u32] r15.tree.branch[26u32][1u32] into r470;\n    cast r469 r470 into r471 as [u128; 2u32];\n    ternary r463 true r455 into r472;\n    ternary r463 r458[0u32] r467[0u32] into r473;\n    ternary r463 r458[1u32] r467[1u32] into r474;\n    cast r473 r474 into r475 as [u128; 2u32];\n    ternary r463 r459 r468 into r476;\n    and r476 1u32 into r477;\n    gt r477 0u32 into r478;\n    not r472 into r479;\n    and r478 r479 into r480;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r369 r386 r403 r420 r437 r454 r471 r15.tree.branch[27u32] r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r481 as [[u128; 2u32]; 32u32];\n    cast r481[27u32][0u32] r481[27u32][1u32] r475[0u32] r475[1u32] into r482 as [u128; 4u32];\n    hash.keccak256.native.raw r482 into r483 as [boolean; 256u32];\n    deserialize.bits.raw r483 ([boolean; 256u32]) into r484 ([u128; 2u32]);\n    div r476 2u32 into r485;\n    ternary r480 r475[0u32] r15.tree.branch[27u32][0u32] into r486;\n    ternary r480 r475[1u32] r15.tree.branch[27u32][1u32] into r487;\n    cast r486 r487 into r488 as [u128; 2u32];\n    ternary r480 true r472 into r489;\n    ternary r480 r475[0u32] r484[0u32] into r490;\n    ternary r480 r475[1u32] r484[1u32] into r491;\n    cast r490 r491 into r492 as [u128; 2u32];\n    ternary r480 r476 r485 into r493;\n    and r493 1u32 into r494;\n    gt r494 0u32 into r495;\n    not r489 into r496;\n    and r495 r496 into r497;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r369 r386 r403 r420 r437 r454 r471 r488 r15.tree.branch[28u32] r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r498 as [[u128; 2u32]; 32u32];\n    cast r498[28u32][0u32] r498[28u32][1u32] r492[0u32] r492[1u32] into r499 as [u128; 4u32];\n    hash.keccak256.native.raw r499 into r500 as [boolean; 256u32];\n    deserialize.bits.raw r500 ([boolean; 256u32]) into r501 ([u128; 2u32]);\n    div r493 2u32 into r502;\n    ternary r497 r492[0u32] r15.tree.branch[28u32][0u32] into r503;\n    ternary r497 r492[1u32] r15.tree.branch[28u32][1u32] into r504;\n    cast r503 r504 into r505 as [u128; 2u32];\n    ternary r497 true r489 into r506;\n    ternary r497 r492[0u32] r501[0u32] into r507;\n    ternary r497 r492[1u32] r501[1u32] into r508;\n    cast r507 r508 into r509 as [u128; 2u32];\n    ternary r497 r493 r502 into r510;\n    and r510 1u32 into r511;\n    gt r511 0u32 into r512;\n    not r506 into r513;\n    and r512 r513 into r514;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r369 r386 r403 r420 r437 r454 r471 r488 r505 r15.tree.branch[29u32] r15.tree.branch[30u32] r15.tree.branch[31u32] into r515 as [[u128; 2u32]; 32u32];\n    cast r515[29u32][0u32] r515[29u32][1u32] r509[0u32] r509[1u32] into r516 as [u128; 4u32];\n    hash.keccak256.native.raw r516 into r517 as [boolean; 256u32];\n    deserialize.bits.raw r517 ([boolean; 256u32]) into r518 ([u128; 2u32]);\n    div r510 2u32 into r519;\n    ternary r514 r509[0u32] r15.tree.branch[29u32][0u32] into r520;\n    ternary r514 r509[1u32] r15.tree.branch[29u32][1u32] into r521;\n    cast r520 r521 into r522 as [u128; 2u32];\n    ternary r514 true r506 into r523;\n    ternary r514 r509[0u32] r518[0u32] into r524;\n    ternary r514 r509[1u32] r518[1u32] into r525;\n    cast r524 r525 into r526 as [u128; 2u32];\n    ternary r514 r510 r519 into r527;\n    and r527 1u32 into r528;\n    gt r528 0u32 into r529;\n    not r523 into r530;\n    and r529 r530 into r531;\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r369 r386 r403 r420 r437 r454 r471 r488 r505 r522 r15.tree.branch[30u32] r15.tree.branch[31u32] into r532 as [[u128; 2u32]; 32u32];\n    cast r532[30u32][0u32] r532[30u32][1u32] r526[0u32] r526[1u32] into r533 as [u128; 4u32];\n    hash.keccak256.native.raw r533 into r534 as [boolean; 256u32];\n    deserialize.bits.raw r534 ([boolean; 256u32]) into r535 ([u128; 2u32]);\n    div r527 2u32 into r536;\n    ternary r531 r526[0u32] r15.tree.branch[30u32][0u32] into r537;\n    ternary r531 r526[1u32] r15.tree.branch[30u32][1u32] into r538;\n    cast r537 r538 into r539 as [u128; 2u32];\n    ternary r531 true r523 into r540;\n    ternary r531 r526[0u32] r535[0u32] into r541;\n    ternary r531 r526[1u32] r535[1u32] into r542;\n    cast r541 r542 into r543 as [u128; 2u32];\n    ternary r531 r527 r536 into r544;\n    and r544 1u32 into r545;\n    gt r545 0u32 into r546;\n    not r540 into r547;\n    and r546 r547 into r548;\n    div r544 2u32 into r549;\n    ternary r548 r543[0u32] r15.tree.branch[31u32][0u32] into r550;\n    ternary r548 r543[1u32] r15.tree.branch[31u32][1u32] into r551;\n    cast r550 r551 into r552 as [u128; 2u32];\n    cast r29 r46 r63 r80 r97 r114 r131 r148 r165 r182 r199 r216 r233 r250 r267 r284 r301 r318 r335 r352 r369 r386 r403 r420 r437 r454 r471 r488 r505 r522 r539 r552 into r553 as [[u128; 2u32]; 32u32];\n    cast r553 r17 into r554 as Tree;\n    cast 0u128 0u128 into r555 as [u128; 2u32];\n    shr r554.count 0u32 into r556;\n    and r556 1u32 into r557;\n    is.eq r557 1u32 into r558;\n    cast r554.branch[0u32][0u32] r554.branch[0u32][1u32] r555[0u32] r555[1u32] into r559 as [u128; 4u32];\n    hash.keccak256.native.raw r559 into r560 as [boolean; 256u32];\n    deserialize.bits.raw r560 ([boolean; 256u32]) into r561 ([u128; 2u32]);\n    cast r555[0u32] r555[1u32] 0u128 0u128 into r562 as [u128; 4u32];\n    hash.keccak256.native.raw r562 into r563 as [boolean; 256u32];\n    deserialize.bits.raw r563 ([boolean; 256u32]) into r564 ([u128; 2u32]);\n    ternary r558 r561[0u32] r564[0u32] into r565;\n    ternary r558 r561[1u32] r564[1u32] into r566;\n    cast r565 r566 into r567 as [u128; 2u32];\n    shr r554.count 1u32 into r568;\n    and r568 1u32 into r569;\n    is.eq r569 1u32 into r570;\n    cast r554.branch[1u32][0u32] r554.branch[1u32][1u32] r567[0u32] r567[1u32] into r571 as [u128; 4u32];\n    hash.keccak256.native.raw r571 into r572 as [boolean; 256u32];\n    deserialize.bits.raw r572 ([boolean; 256u32]) into r573 ([u128; 2u32]);\n    cast r567[0u32] r567[1u32] 200636014418684474793900124069647889069u128 241087320001230136080519585693436229163u128 into r574 as [u128; 4u32];\n    hash.keccak256.native.raw r574 into r575 as [boolean; 256u32];\n    deserialize.bits.raw r575 ([boolean; 256u32]) into r576 ([u128; 2u32]);\n    ternary r570 r573[0u32] r576[0u32] into r577;\n    ternary r570 r573[1u32] r576[1u32] into r578;\n    cast r577 r578 into r579 as [u128; 2u32];\n    shr r554.count 2u32 into r580;\n    and r580 1u32 into r581;\n    is.eq r581 1u32 into r582;\n    cast r554.branch[2u32][0u32] r554.branch[2u32][1u32] r579[0u32] r579[1u32] into r583 as [u128; 4u32];\n    hash.keccak256.native.raw r583 into r584 as [boolean; 256u32];\n    deserialize.bits.raw r584 ([boolean; 256u32]) into r585 ([u128; 2u32]);\n    cast r579[0u32] r579[1u32] 93974531276030024843854739648391266740u128 63871773629875849864439396521971482176u128 into r586 as [u128; 4u32];\n    hash.keccak256.native.raw r586 into r587 as [boolean; 256u32];\n    deserialize.bits.raw r587 ([boolean; 256u32]) into r588 ([u128; 2u32]);\n    ternary r582 r585[0u32] r588[0u32] into r589;\n    ternary r582 r585[1u32] r588[1u32] into r590;\n    cast r589 r590 into r591 as [u128; 2u32];\n    shr r554.count 3u32 into r592;\n    and r592 1u32 into r593;\n    is.eq r593 1u32 into r594;\n    cast r554.branch[3u32][0u32] r554.branch[3u32][1u32] r591[0u32] r591[1u32] into r595 as [u128; 4u32];\n    hash.keccak256.native.raw r595 into r596 as [boolean; 256u32];\n    deserialize.bits.raw r596 ([boolean; 256u32]) into r597 ([u128; 2u32]);\n    cast r591[0u32] r591[1u32] 66294067272630431583104841350689447201u128 177756802695730322470865725932422475556u128 into r598 as [u128; 4u32];\n    hash.keccak256.native.raw r598 into r599 as [boolean; 256u32];\n    deserialize.bits.raw r599 ([boolean; 256u32]) into r600 ([u128; 2u32]);\n    ternary r594 r597[0u32] r600[0u32] into r601;\n    ternary r594 r597[1u32] r600[1u32] into r602;\n    cast r601 r602 into r603 as [u128; 2u32];\n    shr r554.count 4u32 into r604;\n    and r604 1u32 into r605;\n    is.eq r605 1u32 into r606;\n    cast r554.branch[4u32][0u32] r554.branch[4u32][1u32] r603[0u32] r603[1u32] into r607 as [u128; 4u32];\n    hash.keccak256.native.raw r607 into r608 as [boolean; 256u32];\n    deserialize.bits.raw r608 ([boolean; 256u32]) into r609 ([u128; 2u32]);\n    cast r603[0u32] r603[1u32] 17747458619593854979588589471465572325u128 91154039873745303917061774773470934559u128 into r610 as [u128; 4u32];\n    hash.keccak256.native.raw r610 into r611 as [boolean; 256u32];\n    deserialize.bits.raw r611 ([boolean; 256u32]) into r612 ([u128; 2u32]);\n    ternary r606 r609[0u32] r612[0u32] into r613;\n    ternary r606 r609[1u32] r612[1u32] into r614;\n    cast r613 r614 into r615 as [u128; 2u32];\n    shr r554.count 5u32 into r616;\n    and r616 1u32 into r617;\n    is.eq r617 1u32 into r618;\n    cast r554.branch[5u32][0u32] r554.branch[5u32][1u32] r615[0u32] r615[1u32] into r619 as [u128; 4u32];\n    hash.keccak256.native.raw r619 into r620 as [boolean; 256u32];\n    deserialize.bits.raw r620 ([boolean; 256u32]) into r621 ([u128; 2u32]);\n    cast r615[0u32] r615[1u32] 41440521891025744745128838831940743182u128 60894629520669430433793374864326529801u128 into r622 as [u128; 4u32];\n    hash.keccak256.native.raw r622 into r623 as [boolean; 256u32];\n    deserialize.bits.raw r623 ([boolean; 256u32]) into r624 ([u128; 2u32]);\n    ternary r618 r621[0u32] r624[0u32] into r625;\n    ternary r618 r621[1u32] r624[1u32] into r626;\n    cast r625 r626 into r627 as [u128; 2u32];\n    shr r554.count 6u32 into r628;\n    and r628 1u32 into r629;\n    is.eq r629 1u32 into r630;\n    cast r554.branch[6u32][0u32] r554.branch[6u32][1u32] r627[0u32] r627[1u32] into r631 as [u128; 4u32];\n    hash.keccak256.native.raw r631 into r632 as [boolean; 256u32];\n    deserialize.bits.raw r632 ([boolean; 256u32]) into r633 ([u128; 2u32]);\n    cast r627[0u32] r627[1u32] 59903522946444936989019680377850199176u128 138372656349779401676123096700574490028u128 into r634 as [u128; 4u32];\n    hash.keccak256.native.raw r634 into r635 as [boolean; 256u32];\n    deserialize.bits.raw r635 ([boolean; 256u32]) into r636 ([u128; 2u32]);\n    ternary r630 r633[0u32] r636[0u32] into r637;\n    ternary r630 r633[1u32] r636[1u32] into r638;\n    cast r637 r638 into r639 as [u128; 2u32];\n    shr r554.count 7u32 into r640;\n    and r640 1u32 into r641;\n    is.eq r641 1u32 into r642;\n    cast r554.branch[7u32][0u32] r554.branch[7u32][1u32] r639[0u32] r639[1u32] into r643 as [u128; 4u32];\n    hash.keccak256.native.raw r643 into r644 as [boolean; 256u32];\n    deserialize.bits.raw r644 ([boolean; 256u32]) into r645 ([u128; 2u32]);\n    cast r639[0u32] r639[1u32] 3180262733561280138502805056821254143u128 174708888174609290132996609679840034611u128 into r646 as [u128; 4u32];\n    hash.keccak256.native.raw r646 into r647 as [boolean; 256u32];\n    deserialize.bits.raw r647 ([boolean; 256u32]) into r648 ([u128; 2u32]);\n    ternary r642 r645[0u32] r648[0u32] into r649;\n    ternary r642 r645[1u32] r648[1u32] into r650;\n    cast r649 r650 into r651 as [u128; 2u32];\n    shr r554.count 8u32 into r652;\n    and r652 1u32 into r653;\n    is.eq r653 1u32 into r654;\n    cast r554.branch[8u32][0u32] r554.branch[8u32][1u32] r651[0u32] r651[1u32] into r655 as [u128; 4u32];\n    hash.keccak256.native.raw r655 into r656 as [boolean; 256u32];\n    deserialize.bits.raw r656 ([boolean; 256u32]) into r657 ([u128; 2u32]);\n    cast r651[0u32] r651[1u32] 48455171203811811641967620231072081816u128 233066451124647651551022141310218850885u128 into r658 as [u128; 4u32];\n    hash.keccak256.native.raw r658 into r659 as [boolean; 256u32];\n    deserialize.bits.raw r659 ([boolean; 256u32]) into r660 ([u128; 2u32]);\n    ternary r654 r657[0u32] r660[0u32] into r661;\n    ternary r654 r657[1u32] r660[1u32] into r662;\n    cast r661 r662 into r663 as [u128; 2u32];\n    shr r554.count 9u32 into r664;\n    and r664 1u32 into r665;\n    is.eq r665 1u32 into r666;\n    cast r554.branch[9u32][0u32] r554.branch[9u32][1u32] r663[0u32] r663[1u32] into r667 as [u128; 4u32];\n    hash.keccak256.native.raw r667 into r668 as [boolean; 256u32];\n    deserialize.bits.raw r668 ([boolean; 256u32]) into r669 ([u128; 2u32]);\n    cast r663[0u32] r663[1u32] 334080689485914854275740245880500189902u128 298184847794429370937316245747346618882u128 into r670 as [u128; 4u32];\n    hash.keccak256.native.raw r670 into r671 as [boolean; 256u32];\n    deserialize.bits.raw r671 ([boolean; 256u32]) into r672 ([u128; 2u32]);\n    ternary r666 r669[0u32] r672[0u32] into r673;\n    ternary r666 r669[1u32] r672[1u32] into r674;\n    cast r673 r674 into r675 as [u128; 2u32];\n    shr r554.count 10u32 into r676;\n    and r676 1u32 into r677;\n    is.eq r677 1u32 into r678;\n    cast r554.branch[10u32][0u32] r554.branch[10u32][1u32] r675[0u32] r675[1u32] into r679 as [u128; 4u32];\n    hash.keccak256.native.raw r679 into r680 as [boolean; 256u32];\n    deserialize.bits.raw r680 ([boolean; 256u32]) into r681 ([u128; 2u32]);\n    cast r675[0u32] r675[1u32] 282653557140816677488147447345498217721u128 220339046210024952190566302967731665406u128 into r682 as [u128; 4u32];\n    hash.keccak256.native.raw r682 into r683 as [boolean; 256u32];\n    deserialize.bits.raw r683 ([boolean; 256u32]) into r684 ([u128; 2u32]);\n    ternary r678 r681[0u32] r684[0u32] into r685;\n    ternary r678 r681[1u32] r684[1u32] into r686;\n    cast r685 r686 into r687 as [u128; 2u32];\n    shr r554.count 11u32 into r688;\n    and r688 1u32 into r689;\n    is.eq r689 1u32 into r690;\n    cast r554.branch[11u32][0u32] r554.branch[11u32][1u32] r687[0u32] r687[1u32] into r691 as [u128; 4u32];\n    hash.keccak256.native.raw r691 into r692 as [boolean; 256u32];\n    deserialize.bits.raw r692 ([boolean; 256u32]) into r693 ([u128; 2u32]);\n    cast r687[0u32] r687[1u32] 145672768088204442335147548738764583416u128 195359773238112912523174698163665391889u128 into r694 as [u128; 4u32];\n    hash.keccak256.native.raw r694 into r695 as [boolean; 256u32];\n    deserialize.bits.raw r695 ([boolean; 256u32]) into r696 ([u128; 2u32]);\n    ternary r690 r693[0u32] r696[0u32] into r697;\n    ternary r690 r693[1u32] r696[1u32] into r698;\n    cast r697 r698 into r699 as [u128; 2u32];\n    shr r554.count 12u32 into r700;\n    and r700 1u32 into r701;\n    is.eq r701 1u32 into r702;\n    cast r554.branch[12u32][0u32] r554.branch[12u32][1u32] r699[0u32] r699[1u32] into r703 as [u128; 4u32];\n    hash.keccak256.native.raw r703 into r704 as [boolean; 256u32];\n    deserialize.bits.raw r704 ([boolean; 256u32]) into r705 ([u128; 2u32]);\n    cast r699[0u32] r699[1u32] 21418297075731751014499913670238572596u128 208490304233564026108050214927462029255u128 into r706 as [u128; 4u32];\n    hash.keccak256.native.raw r706 into r707 as [boolean; 256u32];\n    deserialize.bits.raw r707 ([boolean; 256u32]) into r708 ([u128; 2u32]);\n    ternary r702 r705[0u32] r708[0u32] into r709;\n    ternary r702 r705[1u32] r708[1u32] into r710;\n    cast r709 r710 into r711 as [u128; 2u32];\n    shr r554.count 13u32 into r712;\n    and r712 1u32 into r713;\n    is.eq r713 1u32 into r714;\n    cast r554.branch[13u32][0u32] r554.branch[13u32][1u32] r711[0u32] r711[1u32] into r715 as [u128; 4u32];\n    hash.keccak256.native.raw r715 into r716 as [boolean; 256u32];\n    deserialize.bits.raw r716 ([boolean; 256u32]) into r717 ([u128; 2u32]);\n    cast r711[0u32] r711[1u32] 281404733672930043025800266103516225473u128 249742050973351594617409037165098847317u128 into r718 as [u128; 4u32];\n    hash.keccak256.native.raw r718 into r719 as [boolean; 256u32];\n    deserialize.bits.raw r719 ([boolean; 256u32]) into r720 ([u128; 2u32]);\n    ternary r714 r717[0u32] r720[0u32] into r721;\n    ternary r714 r717[1u32] r720[1u32] into r722;\n    cast r721 r722 into r723 as [u128; 2u32];\n    shr r554.count 14u32 into r724;\n    and r724 1u32 into r725;\n    is.eq r725 1u32 into r726;\n    cast r554.branch[14u32][0u32] r554.branch[14u32][1u32] r723[0u32] r723[1u32] into r727 as [u128; 4u32];\n    hash.keccak256.native.raw r727 into r728 as [boolean; 256u32];\n    deserialize.bits.raw r728 ([boolean; 256u32]) into r729 ([u128; 2u32]);\n    cast r723[0u32] r723[1u32] 289879148739902069907218623618383439708u128 272153760179965878774948581978868862730u128 into r730 as [u128; 4u32];\n    hash.keccak256.native.raw r730 into r731 as [boolean; 256u32];\n    deserialize.bits.raw r731 ([boolean; 256u32]) into r732 ([u128; 2u32]);\n    ternary r726 r729[0u32] r732[0u32] into r733;\n    ternary r726 r729[1u32] r732[1u32] into r734;\n    cast r733 r734 into r735 as [u128; 2u32];\n    shr r554.count 15u32 into r736;\n    and r736 1u32 into r737;\n    is.eq r737 1u32 into r738;\n    cast r554.branch[15u32][0u32] r554.branch[15u32][1u32] r735[0u32] r735[1u32] into r739 as [u128; 4u32];\n    hash.keccak256.native.raw r739 into r740 as [boolean; 256u32];\n    deserialize.bits.raw r740 ([boolean; 256u32]) into r741 ([u128; 2u32]);\n    cast r735[0u32] r735[1u32] 293159551140992943817529578958841871322u128 279338235662809517033392482105447374970u128 into r742 as [u128; 4u32];\n    hash.keccak256.native.raw r742 into r743 as [boolean; 256u32];\n    deserialize.bits.raw r743 ([boolean; 256u32]) into r744 ([u128; 2u32]);\n    ternary r738 r741[0u32] r744[0u32] into r745;\n    ternary r738 r741[1u32] r744[1u32] into r746;\n    cast r745 r746 into r747 as [u128; 2u32];\n    shr r554.count 16u32 into r748;\n    and r748 1u32 into r749;\n    is.eq r749 1u32 into r750;\n    cast r554.branch[16u32][0u32] r554.branch[16u32][1u32] r747[0u32] r747[1u32] into r751 as [u128; 4u32];\n    hash.keccak256.native.raw r751 into r752 as [boolean; 256u32];\n    deserialize.bits.raw r752 ([boolean; 256u32]) into r753 ([u128; 2u32]);\n    cast r747[0u32] r747[1u32] 322093384055859711002317835595919209255u128 42000488150413793222910142038008516924u128 into r754 as [u128; 4u32];\n    hash.keccak256.native.raw r754 into r755 as [boolean; 256u32];\n    deserialize.bits.raw r755 ([boolean; 256u32]) into r756 ([u128; 2u32]);\n    ternary r750 r753[0u32] r756[0u32] into r757;\n    ternary r750 r753[1u32] r756[1u32] into r758;\n    cast r757 r758 into r759 as [u128; 2u32];\n    shr r554.count 17u32 into r760;\n    and r760 1u32 into r761;\n    is.eq r761 1u32 into r762;\n    cast r554.branch[17u32][0u32] r554.branch[17u32][1u32] r759[0u32] r759[1u32] into r763 as [u128; 4u32];\n    hash.keccak256.native.raw r763 into r764 as [boolean; 256u32];\n    deserialize.bits.raw r764 ([boolean; 256u32]) into r765 ([u128; 2u32]);\n    cast r759[0u32] r759[1u32] 122254499464535460357349615889605317601u128 163409875357997099341612933566874181274u128 into r766 as [u128; 4u32];\n    hash.keccak256.native.raw r766 into r767 as [boolean; 256u32];\n    deserialize.bits.raw r767 ([boolean; 256u32]) into r768 ([u128; 2u32]);\n    ternary r762 r765[0u32] r768[0u32] into r769;\n    ternary r762 r765[1u32] r768[1u32] into r770;\n    cast r769 r770 into r771 as [u128; 2u32];\n    shr r554.count 18u32 into r772;\n    and r772 1u32 into r773;\n    is.eq r773 1u32 into r774;\n    cast r554.branch[18u32][0u32] r554.branch[18u32][1u32] r771[0u32] r771[1u32] into r775 as [u128; 4u32];\n    hash.keccak256.native.raw r775 into r776 as [boolean; 256u32];\n    deserialize.bits.raw r776 ([boolean; 256u32]) into r777 ([u128; 2u32]);\n    cast r771[0u32] r771[1u32] 59132542617709958082991564676137889114u128 213307109849065044721731388145721391918u128 into r778 as [u128; 4u32];\n    hash.keccak256.native.raw r778 into r779 as [boolean; 256u32];\n    deserialize.bits.raw r779 ([boolean; 256u32]) into r780 ([u128; 2u32]);\n    ternary r774 r777[0u32] r780[0u32] into r781;\n    ternary r774 r777[1u32] r780[1u32] into r782;\n    cast r781 r782 into r783 as [u128; 2u32];\n    shr r554.count 19u32 into r784;\n    and r784 1u32 into r785;\n    is.eq r785 1u32 into r786;\n    cast r554.branch[19u32][0u32] r554.branch[19u32][1u32] r783[0u32] r783[1u32] into r787 as [u128; 4u32];\n    hash.keccak256.native.raw r787 into r788 as [boolean; 256u32];\n    deserialize.bits.raw r788 ([boolean; 256u32]) into r789 ([u128; 2u32]);\n    cast r783[0u32] r783[1u32] 81821347195604723027123097456320473780u128 213231151757453664031032733501577239314u128 into r790 as [u128; 4u32];\n    hash.keccak256.native.raw r790 into r791 as [boolean; 256u32];\n    deserialize.bits.raw r791 ([boolean; 256u32]) into r792 ([u128; 2u32]);\n    ternary r786 r789[0u32] r792[0u32] into r793;\n    ternary r786 r789[1u32] r792[1u32] into r794;\n    cast r793 r794 into r795 as [u128; 2u32];\n    shr r554.count 20u32 into r796;\n    and r796 1u32 into r797;\n    is.eq r797 1u32 into r798;\n    cast r554.branch[20u32][0u32] r554.branch[20u32][1u32] r795[0u32] r795[1u32] into r799 as [u128; 4u32];\n    hash.keccak256.native.raw r799 into r800 as [boolean; 256u32];\n    deserialize.bits.raw r800 ([boolean; 256u32]) into r801 ([u128; 2u32]);\n    cast r795[0u32] r795[1u32] 336114429845119848727407931190249152198u128 301360598096960973755532425519001651903u128 into r802 as [u128; 4u32];\n    hash.keccak256.native.raw r802 into r803 as [boolean; 256u32];\n    deserialize.bits.raw r803 ([boolean; 256u32]) into r804 ([u128; 2u32]);\n    ternary r798 r801[0u32] r804[0u32] into r805;\n    ternary r798 r801[1u32] r804[1u32] into r806;\n    cast r805 r806 into r807 as [u128; 2u32];\n    shr r554.count 21u32 into r808;\n    and r808 1u32 into r809;\n    is.eq r809 1u32 into r810;\n    cast r554.branch[21u32][0u32] r554.branch[21u32][1u32] r807[0u32] r807[1u32] into r811 as [u128; 4u32];\n    hash.keccak256.native.raw r811 into r812 as [boolean; 256u32];\n    deserialize.bits.raw r812 ([boolean; 256u32]) into r813 ([u128; 2u32]);\n    cast r807[0u32] r807[1u32] 320542506166910886628941017057425965556u128 289604304606881051317113816162407361165u128 into r814 as [u128; 4u32];\n    hash.keccak256.native.raw r814 into r815 as [boolean; 256u32];\n    deserialize.bits.raw r815 ([boolean; 256u32]) into r816 ([u128; 2u32]);\n    ternary r810 r813[0u32] r816[0u32] into r817;\n    ternary r810 r813[1u32] r816[1u32] into r818;\n    cast r817 r818 into r819 as [u128; 2u32];\n    shr r554.count 22u32 into r820;\n    and r820 1u32 into r821;\n    is.eq r821 1u32 into r822;\n    cast r554.branch[22u32][0u32] r554.branch[22u32][1u32] r819[0u32] r819[1u32] into r823 as [u128; 4u32];\n    hash.keccak256.native.raw r823 into r824 as [boolean; 256u32];\n    deserialize.bits.raw r824 ([boolean; 256u32]) into r825 ([u128; 2u32]);\n    cast r819[0u32] r819[1u32] 270315001578019215236444169667452771418u128 159359836010757059645879798671718049365u128 into r826 as [u128; 4u32];\n    hash.keccak256.native.raw r826 into r827 as [boolean; 256u32];\n    deserialize.bits.raw r827 ([boolean; 256u32]) into r828 ([u128; 2u32]);\n    ternary r822 r825[0u32] r828[0u32] into r829;\n    ternary r822 r825[1u32] r828[1u32] into r830;\n    cast r829 r830 into r831 as [u128; 2u32];\n    shr r554.count 23u32 into r832;\n    and r832 1u32 into r833;\n    is.eq r833 1u32 into r834;\n    cast r554.branch[23u32][0u32] r554.branch[23u32][1u32] r831[0u32] r831[1u32] into r835 as [u128; 4u32];\n    hash.keccak256.native.raw r835 into r836 as [boolean; 256u32];\n    deserialize.bits.raw r836 ([boolean; 256u32]) into r837 ([u128; 2u32]);\n    cast r831[0u32] r831[1u32] 222279943939488608983982977534856788045u128 110191212380795297761298100413926971842u128 into r838 as [u128; 4u32];\n    hash.keccak256.native.raw r838 into r839 as [boolean; 256u32];\n    deserialize.bits.raw r839 ([boolean; 256u32]) into r840 ([u128; 2u32]);\n    ternary r834 r837[0u32] r840[0u32] into r841;\n    ternary r834 r837[1u32] r840[1u32] into r842;\n    cast r841 r842 into r843 as [u128; 2u32];\n    shr r554.count 24u32 into r844;\n    and r844 1u32 into r845;\n    is.eq r845 1u32 into r846;\n    cast r554.branch[24u32][0u32] r554.branch[24u32][1u32] r843[0u32] r843[1u32] into r847 as [u128; 4u32];\n    hash.keccak256.native.raw r847 into r848 as [boolean; 256u32];\n    deserialize.bits.raw r848 ([boolean; 256u32]) into r849 ([u128; 2u32]);\n    cast r843[0u32] r843[1u32] 133196525511722763539122868050171643853u128 317818349342580659794271157815744496524u128 into r850 as [u128; 4u32];\n    hash.keccak256.native.raw r850 into r851 as [boolean; 256u32];\n    deserialize.bits.raw r851 ([boolean; 256u32]) into r852 ([u128; 2u32]);\n    ternary r846 r849[0u32] r852[0u32] into r853;\n    ternary r846 r849[1u32] r852[1u32] into r854;\n    cast r853 r854 into r855 as [u128; 2u32];\n    shr r554.count 25u32 into r856;\n    and r856 1u32 into r857;\n    is.eq r857 1u32 into r858;\n    cast r554.branch[25u32][0u32] r554.branch[25u32][1u32] r855[0u32] r855[1u32] into r859 as [u128; 4u32];\n    hash.keccak256.native.raw r859 into r860 as [boolean; 256u32];\n    deserialize.bits.raw r860 ([boolean; 256u32]) into r861 ([u128; 2u32]);\n    cast r855[0u32] r855[1u32] 155004929552231825612177418997554921226u128 187928388822560161625857840976354543861u128 into r862 as [u128; 4u32];\n    hash.keccak256.native.raw r862 into r863 as [boolean; 256u32];\n    deserialize.bits.raw r863 ([boolean; 256u32]) into r864 ([u128; 2u32]);\n    ternary r858 r861[0u32] r864[0u32] into r865;\n    ternary r858 r861[1u32] r864[1u32] into r866;\n    cast r865 r866 into r867 as [u128; 2u32];\n    shr r554.count 26u32 into r868;\n    and r868 1u32 into r869;\n    is.eq r869 1u32 into r870;\n    cast r554.branch[26u32][0u32] r554.branch[26u32][1u32] r867[0u32] r867[1u32] into r871 as [u128; 4u32];\n    hash.keccak256.native.raw r871 into r872 as [boolean; 256u32];\n    deserialize.bits.raw r872 ([boolean; 256u32]) into r873 ([u128; 2u32]);\n    cast r867[0u32] r867[1u32] 133005247855215888074055167590444355000u128 277185228623223348062409148812927309868u128 into r874 as [u128; 4u32];\n    hash.keccak256.native.raw r874 into r875 as [boolean; 256u32];\n    deserialize.bits.raw r875 ([boolean; 256u32]) into r876 ([u128; 2u32]);\n    ternary r870 r873[0u32] r876[0u32] into r877;\n    ternary r870 r873[1u32] r876[1u32] into r878;\n    cast r877 r878 into r879 as [u128; 2u32];\n    shr r554.count 27u32 into r880;\n    and r880 1u32 into r881;\n    is.eq r881 1u32 into r882;\n    cast r554.branch[27u32][0u32] r554.branch[27u32][1u32] r879[0u32] r879[1u32] into r883 as [u128; 4u32];\n    hash.keccak256.native.raw r883 into r884 as [boolean; 256u32];\n    deserialize.bits.raw r884 ([boolean; 256u32]) into r885 ([u128; 2u32]);\n    cast r879[0u32] r879[1u32] 297025694464961376815096585744545123459u128 40897156374938635533147054173498873588u128 into r886 as [u128; 4u32];\n    hash.keccak256.native.raw r886 into r887 as [boolean; 256u32];\n    deserialize.bits.raw r887 ([boolean; 256u32]) into r888 ([u128; 2u32]);\n    ternary r882 r885[0u32] r888[0u32] into r889;\n    ternary r882 r885[1u32] r888[1u32] into r890;\n    cast r889 r890 into r891 as [u128; 2u32];\n    shr r554.count 28u32 into r892;\n    and r892 1u32 into r893;\n    is.eq r893 1u32 into r894;\n    cast r554.branch[28u32][0u32] r554.branch[28u32][1u32] r891[0u32] r891[1u32] into r895 as [u128; 4u32];\n    hash.keccak256.native.raw r895 into r896 as [boolean; 256u32];\n    deserialize.bits.raw r896 ([boolean; 256u32]) into r897 ([u128; 2u32]);\n    cast r891[0u32] r891[1u32] 6336040213458809633392154838101667430u128 62367222880804479430297662353502398838u128 into r898 as [u128; 4u32];\n    hash.keccak256.native.raw r898 into r899 as [boolean; 256u32];\n    deserialize.bits.raw r899 ([boolean; 256u32]) into r900 ([u128; 2u32]);\n    ternary r894 r897[0u32] r900[0u32] into r901;\n    ternary r894 r897[1u32] r900[1u32] into r902;\n    cast r901 r902 into r903 as [u128; 2u32];\n    shr r554.count 29u32 into r904;\n    and r904 1u32 into r905;\n    is.eq r905 1u32 into r906;\n    cast r554.branch[29u32][0u32] r554.branch[29u32][1u32] r903[0u32] r903[1u32] into r907 as [u128; 4u32];\n    hash.keccak256.native.raw r907 into r908 as [boolean; 256u32];\n    deserialize.bits.raw r908 ([boolean; 256u32]) into r909 ([u128; 2u32]);\n    cast r903[0u32] r903[1u32] 202117996738898010692652600915964103224u128 46042986625269866222220954975551057138u128 into r910 as [u128; 4u32];\n    hash.keccak256.native.raw r910 into r911 as [boolean; 256u32];\n    deserialize.bits.raw r911 ([boolean; 256u32]) into r912 ([u128; 2u32]);\n    ternary r906 r909[0u32] r912[0u32] into r913;\n    ternary r906 r909[1u32] r912[1u32] into r914;\n    cast r913 r914 into r915 as [u128; 2u32];\n    shr r554.count 30u32 into r916;\n    and r916 1u32 into r917;\n    is.eq r917 1u32 into r918;\n    cast r554.branch[30u32][0u32] r554.branch[30u32][1u32] r915[0u32] r915[1u32] into r919 as [u128; 4u32];\n    hash.keccak256.native.raw r919 into r920 as [boolean; 256u32];\n    deserialize.bits.raw r920 ([boolean; 256u32]) into r921 ([u128; 2u32]);\n    cast r915[0u32] r915[1u32] 85413120008009180910770793363078390675u128 71567477878241302074513460496530530059u128 into r922 as [u128; 4u32];\n    hash.keccak256.native.raw r922 into r923 as [boolean; 256u32];\n    deserialize.bits.raw r923 ([boolean; 256u32]) into r924 ([u128; 2u32]);\n    ternary r918 r921[0u32] r924[0u32] into r925;\n    ternary r918 r921[1u32] r924[1u32] into r926;\n    cast r925 r926 into r927 as [u128; 2u32];\n    shr r554.count 31u32 into r928;\n    and r928 1u32 into r929;\n    is.eq r929 1u32 into r930;\n    cast r554.branch[31u32][0u32] r554.branch[31u32][1u32] r927[0u32] r927[1u32] into r931 as [u128; 4u32];\n    hash.keccak256.native.raw r931 into r932 as [boolean; 256u32];\n    deserialize.bits.raw r932 ([boolean; 256u32]) into r933 ([u128; 2u32]);\n    cast r927[0u32] r927[1u32] 297864792032486788802704391190316402820u128 225086078672275754295496924647458870974u128 into r934 as [u128; 4u32];\n    hash.keccak256.native.raw r934 into r935 as [boolean; 256u32];\n    deserialize.bits.raw r935 ([boolean; 256u32]) into r936 ([u128; 2u32]);\n    ternary r930 r933[0u32] r936[0u32] into r937;\n    ternary r930 r933[1u32] r936[1u32] into r938;\n    cast r937 r938 into r939 as [u128; 2u32];\n    cast r15.parent r939 r554 r15.nonce into r940 as MerkleTreeHook;\n    set r940 into merkle_tree_hooks[r0];\n    assert.eq r3 0u64;\n    cast r0 r15.tree.count into r941 as EventKey;\n    cast r12 r15.tree.count into r942 as InsertedIntoTreeEvent;\n    set r942 into inserted_into_tree_events[r941];\n    set r15.tree.count into last_event_index[r13];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    is.eq r6 4u8 into r943;\n    branch.eq r943 false to end_then_1_2;\n    get igps[r0] into r944;\n    cast r0 r10.destination_domain into r945 as GasConfigKey;\n    cast 0u128 0u128 0u128 into r946 as DomainGasConfig;\n    get.or_use destination_gas_configs[r945] r946 into r947;\n    shl 0u128 8u32 into r948;\n    cast r1[0u32] into r949 as u128;\n    or r948 r949 into r950;\n    shl r950 8u32 into r951;\n    cast r1[1u32] into r952 as u128;\n    or r951 r952 into r953;\n    shl r953 8u32 into r954;\n    cast r1[2u32] into r955 as u128;\n    or r954 r955 into r956;\n    shl r956 8u32 into r957;\n    cast r1[3u32] into r958 as u128;\n    or r957 r958 into r959;\n    shl r959 8u32 into r960;\n    cast r1[4u32] into r961 as u128;\n    or r960 r961 into r962;\n    shl r962 8u32 into r963;\n    cast r1[5u32] into r964 as u128;\n    or r963 r964 into r965;\n    shl r965 8u32 into r966;\n    cast r1[6u32] into r967 as u128;\n    or r966 r967 into r968;\n    shl r968 8u32 into r969;\n    cast r1[7u32] into r970 as u128;\n    or r969 r970 into r971;\n    shl r971 8u32 into r972;\n    cast r1[8u32] into r973 as u128;\n    or r972 r973 into r974;\n    shl r974 8u32 into r975;\n    cast r1[9u32] into r976 as u128;\n    or r975 r976 into r977;\n    shl r977 8u32 into r978;\n    cast r1[10u32] into r979 as u128;\n    or r978 r979 into r980;\n    shl r980 8u32 into r981;\n    cast r1[11u32] into r982 as u128;\n    or r981 r982 into r983;\n    shl r983 8u32 into r984;\n    cast r1[12u32] into r985 as u128;\n    or r984 r985 into r986;\n    shl r986 8u32 into r987;\n    cast r1[13u32] into r988 as u128;\n    or r987 r988 into r989;\n    shl r989 8u32 into r990;\n    cast r1[14u32] into r991 as u128;\n    or r990 r991 into r992;\n    shl r992 8u32 into r993;\n    cast r1[15u32] into r994 as u128;\n    or r993 r994 into r995;\n    is.eq r995 0u128 into r996;\n    ternary r996 50000u128 r995 into r997;\n    add r997 r947.gas_overhead into r998;\n    mul r998 r947.gas_price into r999;\n    mul r999 r947.exchange_rate into r1000;\n    div r1000 10000000000u128 into r1001;\n    lte r1001 18446744073709551615u128 into r1002;\n    assert.eq r1002 true;\n    cast r1001 into r1003 as u64;\n    assert.eq r1003 r3;\n    cast r0 r944.count into r1004 as EventKey;\n    cast r12 r10.destination_domain r998 r1003 r944.count into r1005 as GasPaymentEvent;\n    set r1005 into gas_payment_events[r1004];\n    set r944.count into last_event_index[r13];\n    add r944.balance r3 into r1006;\n    add r944.count 1u32 into r1007;\n    cast r944.hook_owner r944.nonce r1006 r1007 into r1008 as InterchainGasPaymaster;\n    set r1008 into igps[r0];\n    branch.eq true true to end_otherwise_1_3;\n    position end_then_1_2;\n    is.eq r6 0u8 into r1009;\n    branch.eq r1009 false to end_then_2_4;\n    assert.eq r3 0u64;\n    branch.eq true true to end_otherwise_2_5;\n    position end_then_2_4;\n    assert.eq false true;\n    position end_otherwise_2_5;\n    position end_otherwise_1_3;\n    position end_otherwise_0_1;\n\nconstructor:\n    assert.eq edition 0u16;\n`;
export const ism_manager = `program ism_manager.aleo;\n\nstruct Message:\n    version as u8;\n    nonce as u32;\n    origin_domain as u32;\n    sender as [u8; 32u32];\n    destination_domain as u32;\n    recipient as [u8; 32u32];\n    body as [u128; 8u32];\n\nstruct EthAddress:\n    bytes as [u8; 20u32];\n\nstruct MessageIdMultisigIsm:\n    validators as [EthAddress; 6u32];\n    validator_count as u8;\n    threshold as u8;\n    nonce as u32;\n\nstruct DomainRoutingIsm:\n    ism_owner as address;\n    nonce as u32;\n\nstruct NoopIsm:\n    nonce as u32;\n\nstruct IsmRouteKey:\n    ism as address;\n    domain as u32;\n\nmapping nonce:\n    key as boolean.public;\n    value as u32.public;\n\nmapping domain_routing_isms:\n    key as address.public;\n    value as DomainRoutingIsm.public;\n\nmapping message_id_multisigs:\n    key as address.public;\n    value as MessageIdMultisigIsm.public;\n\nmapping ism_addresses:\n    key as u32.public;\n    value as address.public;\n\nmapping routes:\n    key as IsmRouteKey.public;\n    value as address.public;\n\nmapping isms:\n    key as address.public;\n    value as u8.public;\n\nfunction init_noop:\n    async init_noop into r0;\n    output r0 as ism_manager.aleo/init_noop.future;\n\nfinalize init_noop:\n    get.or_use nonce[true] 0u32 into r0;\n    cast r0 into r1 as NoopIsm;\n    hash.bhp256 r1 into r2 as address;\n    contains isms[r2] into r3;\n    not r3 into r4;\n    assert.eq r4 true;\n    add r0 1u32 into r5;\n    set r5 into nonce[true];\n    set 0u8 into isms[r2];\n    set r2 into ism_addresses[r0];\n\nfunction init_message_id_multisig:\n    input r0 as [EthAddress; 6u32].private;\n    input r1 as u8.private;\n    input r2 as u8.private;\n    async init_message_id_multisig r0 r1 r2 into r3;\n    output r3 as ism_manager.aleo/init_message_id_multisig.future;\n\nfinalize init_message_id_multisig:\n    input r0 as [EthAddress; 6u32].public;\n    input r1 as u8.public;\n    input r2 as u8.public;\n    gt r2 0u8 into r3;\n    assert.eq r3 true;\n    lte r2 6u8 into r4;\n    assert.eq r4 true;\n    lte r1 6u8 into r5;\n    assert.eq r5 true;\n    get.or_use nonce[true] 0u32 into r6;\n    cast r0 r1 r2 r6 into r7 as MessageIdMultisigIsm;\n    hash.bhp256 r7 into r8 as address;\n    contains message_id_multisigs[r8] into r9;\n    not r9 into r10;\n    assert.eq r10 true;\n    set r7 into message_id_multisigs[r8];\n    add r6 1u32 into r11;\n    set r11 into nonce[true];\n    set 5u8 into isms[r8];\n    set r8 into ism_addresses[r6];\n\nfunction init_domain_routing:\n    async init_domain_routing self.caller into r0;\n    output r0 as ism_manager.aleo/init_domain_routing.future;\n\nfinalize init_domain_routing:\n    input r0 as address.public;\n    get.or_use nonce[true] 0u32 into r1;\n    cast r0 r1 into r2 as DomainRoutingIsm;\n    hash.bhp256 r2 into r3 as address;\n    contains domain_routing_isms[r3] into r4;\n    not r4 into r5;\n    assert.eq r5 true;\n    set r2 into domain_routing_isms[r3];\n    add r1 1u32 into r6;\n    set r6 into nonce[true];\n    set 1u8 into isms[r3];\n    set r3 into ism_addresses[r1];\n\nfunction set_domain:\n    input r0 as address.private;\n    input r1 as u32.private;\n    input r2 as address.private;\n    async set_domain r0 r1 r2 self.caller into r3;\n    output r3 as ism_manager.aleo/set_domain.future;\n\nfinalize set_domain:\n    input r0 as address.public;\n    input r1 as u32.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    contains domain_routing_isms[r0] into r4;\n    assert.eq r4 true;\n    get domain_routing_isms[r0] into r5;\n    assert.eq r5.ism_owner r3;\n    cast r0 r1 into r6 as IsmRouteKey;\n    set r2 into routes[r6];\n\nfunction remove_domain:\n    input r0 as address.private;\n    input r1 as u32.private;\n    async remove_domain r0 r1 self.caller into r2;\n    output r2 as ism_manager.aleo/remove_domain.future;\n\nfinalize remove_domain:\n    input r0 as address.public;\n    input r1 as u32.public;\n    input r2 as address.public;\n    contains domain_routing_isms[r0] into r3;\n    assert.eq r3 true;\n    get domain_routing_isms[r0] into r4;\n    assert.eq r4.ism_owner r2;\n    cast r0 r1 into r5 as IsmRouteKey;\n    remove routes[r5];\n\nfunction verify:\n    input r0 as address.public;\n    input r1 as Message.public;\n    input r2 as [u128; 2u32].public;\n    input r3 as [u8; 512u32].public;\n    async verify r0 r1 r2 r3 into r4;\n    output r4 as ism_manager.aleo/verify.future;\n\nfinalize verify:\n    input r0 as address.public;\n    input r1 as Message.public;\n    input r2 as [u128; 2u32].public;\n    input r3 as [u8; 512u32].public;\n    cast r3[68u32] r3[69u32] r3[70u32] r3[71u32] r3[72u32] r3[73u32] r3[74u32] r3[75u32] r3[76u32] r3[77u32] r3[78u32] r3[79u32] r3[80u32] r3[81u32] r3[82u32] r3[83u32] r3[84u32] r3[85u32] r3[86u32] r3[87u32] r3[88u32] r3[89u32] r3[90u32] r3[91u32] r3[92u32] r3[93u32] r3[94u32] r3[95u32] r3[96u32] r3[97u32] r3[98u32] r3[99u32] r3[100u32] r3[101u32] r3[102u32] r3[103u32] r3[104u32] r3[105u32] r3[106u32] r3[107u32] r3[108u32] r3[109u32] r3[110u32] r3[111u32] r3[112u32] r3[113u32] r3[114u32] r3[115u32] r3[116u32] r3[117u32] r3[118u32] r3[119u32] r3[120u32] r3[121u32] r3[122u32] r3[123u32] r3[124u32] r3[125u32] r3[126u32] r3[127u32] r3[128u32] r3[129u32] r3[130u32] r3[131u32] r3[132u32] into r4 as [u8; 65u32];\n    cast r3[133u32] r3[134u32] r3[135u32] r3[136u32] r3[137u32] r3[138u32] r3[139u32] r3[140u32] r3[141u32] r3[142u32] r3[143u32] r3[144u32] r3[145u32] r3[146u32] r3[147u32] r3[148u32] r3[149u32] r3[150u32] r3[151u32] r3[152u32] r3[153u32] r3[154u32] r3[155u32] r3[156u32] r3[157u32] r3[158u32] r3[159u32] r3[160u32] r3[161u32] r3[162u32] r3[163u32] r3[164u32] r3[165u32] r3[166u32] r3[167u32] r3[168u32] r3[169u32] r3[170u32] r3[171u32] r3[172u32] r3[173u32] r3[174u32] r3[175u32] r3[176u32] r3[177u32] r3[178u32] r3[179u32] r3[180u32] r3[181u32] r3[182u32] r3[183u32] r3[184u32] r3[185u32] r3[186u32] r3[187u32] r3[188u32] r3[189u32] r3[190u32] r3[191u32] r3[192u32] r3[193u32] r3[194u32] r3[195u32] r3[196u32] r3[197u32] into r5 as [u8; 65u32];\n    cast r3[198u32] r3[199u32] r3[200u32] r3[201u32] r3[202u32] r3[203u32] r3[204u32] r3[205u32] r3[206u32] r3[207u32] r3[208u32] r3[209u32] r3[210u32] r3[211u32] r3[212u32] r3[213u32] r3[214u32] r3[215u32] r3[216u32] r3[217u32] r3[218u32] r3[219u32] r3[220u32] r3[221u32] r3[222u32] r3[223u32] r3[224u32] r3[225u32] r3[226u32] r3[227u32] r3[228u32] r3[229u32] r3[230u32] r3[231u32] r3[232u32] r3[233u32] r3[234u32] r3[235u32] r3[236u32] r3[237u32] r3[238u32] r3[239u32] r3[240u32] r3[241u32] r3[242u32] r3[243u32] r3[244u32] r3[245u32] r3[246u32] r3[247u32] r3[248u32] r3[249u32] r3[250u32] r3[251u32] r3[252u32] r3[253u32] r3[254u32] r3[255u32] r3[256u32] r3[257u32] r3[258u32] r3[259u32] r3[260u32] r3[261u32] r3[262u32] into r6 as [u8; 65u32];\n    cast r3[263u32] r3[264u32] r3[265u32] r3[266u32] r3[267u32] r3[268u32] r3[269u32] r3[270u32] r3[271u32] r3[272u32] r3[273u32] r3[274u32] r3[275u32] r3[276u32] r3[277u32] r3[278u32] r3[279u32] r3[280u32] r3[281u32] r3[282u32] r3[283u32] r3[284u32] r3[285u32] r3[286u32] r3[287u32] r3[288u32] r3[289u32] r3[290u32] r3[291u32] r3[292u32] r3[293u32] r3[294u32] r3[295u32] r3[296u32] r3[297u32] r3[298u32] r3[299u32] r3[300u32] r3[301u32] r3[302u32] r3[303u32] r3[304u32] r3[305u32] r3[306u32] r3[307u32] r3[308u32] r3[309u32] r3[310u32] r3[311u32] r3[312u32] r3[313u32] r3[314u32] r3[315u32] r3[316u32] r3[317u32] r3[318u32] r3[319u32] r3[320u32] r3[321u32] r3[322u32] r3[323u32] r3[324u32] r3[325u32] r3[326u32] r3[327u32] into r7 as [u8; 65u32];\n    cast r3[328u32] r3[329u32] r3[330u32] r3[331u32] r3[332u32] r3[333u32] r3[334u32] r3[335u32] r3[336u32] r3[337u32] r3[338u32] r3[339u32] r3[340u32] r3[341u32] r3[342u32] r3[343u32] r3[344u32] r3[345u32] r3[346u32] r3[347u32] r3[348u32] r3[349u32] r3[350u32] r3[351u32] r3[352u32] r3[353u32] r3[354u32] r3[355u32] r3[356u32] r3[357u32] r3[358u32] r3[359u32] r3[360u32] r3[361u32] r3[362u32] r3[363u32] r3[364u32] r3[365u32] r3[366u32] r3[367u32] r3[368u32] r3[369u32] r3[370u32] r3[371u32] r3[372u32] r3[373u32] r3[374u32] r3[375u32] r3[376u32] r3[377u32] r3[378u32] r3[379u32] r3[380u32] r3[381u32] r3[382u32] r3[383u32] r3[384u32] r3[385u32] r3[386u32] r3[387u32] r3[388u32] r3[389u32] r3[390u32] r3[391u32] r3[392u32] into r8 as [u8; 65u32];\n    cast r3[393u32] r3[394u32] r3[395u32] r3[396u32] r3[397u32] r3[398u32] r3[399u32] r3[400u32] r3[401u32] r3[402u32] r3[403u32] r3[404u32] r3[405u32] r3[406u32] r3[407u32] r3[408u32] r3[409u32] r3[410u32] r3[411u32] r3[412u32] r3[413u32] r3[414u32] r3[415u32] r3[416u32] r3[417u32] r3[418u32] r3[419u32] r3[420u32] r3[421u32] r3[422u32] r3[423u32] r3[424u32] r3[425u32] r3[426u32] r3[427u32] r3[428u32] r3[429u32] r3[430u32] r3[431u32] r3[432u32] r3[433u32] r3[434u32] r3[435u32] r3[436u32] r3[437u32] r3[438u32] r3[439u32] r3[440u32] r3[441u32] r3[442u32] r3[443u32] r3[444u32] r3[445u32] r3[446u32] r3[447u32] r3[448u32] r3[449u32] r3[450u32] r3[451u32] r3[452u32] r3[453u32] r3[454u32] r3[455u32] r3[456u32] r3[457u32] into r9 as [u8; 65u32];\n    cast r4 r5 r6 r7 r8 r9 into r10 as [[u8; 65u32]; 6u32];\n    cast r3[0u32] r3[1u32] r3[2u32] r3[3u32] r3[4u32] r3[5u32] r3[6u32] r3[7u32] r3[8u32] r3[9u32] r3[10u32] r3[11u32] r3[12u32] r3[13u32] r3[14u32] r3[15u32] r3[16u32] r3[17u32] r3[18u32] r3[19u32] r3[20u32] r3[21u32] r3[22u32] r3[23u32] r3[24u32] r3[25u32] r3[26u32] r3[27u32] r3[28u32] r3[29u32] r3[30u32] r3[31u32] into r11 as [u8; 32u32];\n    shr r1.origin_domain 24u32 into r12;\n    cast r12 into r13 as u8;\n    shr r1.origin_domain 16u32 into r14;\n    rem r14 256u32 into r15;\n    cast r15 into r16 as u8;\n    shr r1.origin_domain 8u32 into r17;\n    rem r17 256u32 into r18;\n    cast r18 into r19 as u8;\n    rem r1.origin_domain 256u32 into r20;\n    cast r20 into r21 as u8;\n    cast r13 r16 r19 r21 r11[0u32] r11[1u32] r11[2u32] r11[3u32] r11[4u32] r11[5u32] r11[6u32] r11[7u32] r11[8u32] r11[9u32] r11[10u32] r11[11u32] r11[12u32] r11[13u32] r11[14u32] r11[15u32] r11[16u32] r11[17u32] r11[18u32] r11[19u32] r11[20u32] r11[21u32] r11[22u32] r11[23u32] r11[24u32] r11[25u32] r11[26u32] r11[27u32] r11[28u32] r11[29u32] r11[30u32] r11[31u32] 72u8 89u8 80u8 69u8 82u8 76u8 65u8 78u8 69u8 into r22 as [u8; 45u32];\n    hash.keccak256.native.raw r22 into r23 as [boolean; 256u32];\n    deserialize.bits.raw r23 ([boolean; 256u32]) into r24 ([u8; 32u32]);\n    serialize.bits.raw r2[0u32] (u128) into r25 ([boolean; 128u32]);\n    serialize.bits.raw r2[1u32] (u128) into r26 ([boolean; 128u32]);\n    cast r25[0u32] r25[1u32] r25[2u32] r25[3u32] r25[4u32] r25[5u32] r25[6u32] r25[7u32] r25[8u32] r25[9u32] r25[10u32] r25[11u32] r25[12u32] r25[13u32] r25[14u32] r25[15u32] r25[16u32] r25[17u32] r25[18u32] r25[19u32] r25[20u32] r25[21u32] r25[22u32] r25[23u32] r25[24u32] r25[25u32] r25[26u32] r25[27u32] r25[28u32] r25[29u32] r25[30u32] r25[31u32] r25[32u32] r25[33u32] r25[34u32] r25[35u32] r25[36u32] r25[37u32] r25[38u32] r25[39u32] r25[40u32] r25[41u32] r25[42u32] r25[43u32] r25[44u32] r25[45u32] r25[46u32] r25[47u32] r25[48u32] r25[49u32] r25[50u32] r25[51u32] r25[52u32] r25[53u32] r25[54u32] r25[55u32] r25[56u32] r25[57u32] r25[58u32] r25[59u32] r25[60u32] r25[61u32] r25[62u32] r25[63u32] r25[64u32] r25[65u32] r25[66u32] r25[67u32] r25[68u32] r25[69u32] r25[70u32] r25[71u32] r25[72u32] r25[73u32] r25[74u32] r25[75u32] r25[76u32] r25[77u32] r25[78u32] r25[79u32] r25[80u32] r25[81u32] r25[82u32] r25[83u32] r25[84u32] r25[85u32] r25[86u32] r25[87u32] r25[88u32] r25[89u32] r25[90u32] r25[91u32] r25[92u32] r25[93u32] r25[94u32] r25[95u32] r25[96u32] r25[97u32] r25[98u32] r25[99u32] r25[100u32] r25[101u32] r25[102u32] r25[103u32] r25[104u32] r25[105u32] r25[106u32] r25[107u32] r25[108u32] r25[109u32] r25[110u32] r25[111u32] r25[112u32] r25[113u32] r25[114u32] r25[115u32] r25[116u32] r25[117u32] r25[118u32] r25[119u32] r25[120u32] r25[121u32] r25[122u32] r25[123u32] r25[124u32] r25[125u32] r25[126u32] r25[127u32] r26[0u32] r26[1u32] r26[2u32] r26[3u32] r26[4u32] r26[5u32] r26[6u32] r26[7u32] r26[8u32] r26[9u32] r26[10u32] r26[11u32] r26[12u32] r26[13u32] r26[14u32] r26[15u32] r26[16u32] r26[17u32] r26[18u32] r26[19u32] r26[20u32] r26[21u32] r26[22u32] r26[23u32] r26[24u32] r26[25u32] r26[26u32] r26[27u32] r26[28u32] r26[29u32] r26[30u32] r26[31u32] r26[32u32] r26[33u32] r26[34u32] r26[35u32] r26[36u32] r26[37u32] r26[38u32] r26[39u32] r26[40u32] r26[41u32] r26[42u32] r26[43u32] r26[44u32] r26[45u32] r26[46u32] r26[47u32] r26[48u32] r26[49u32] r26[50u32] r26[51u32] r26[52u32] r26[53u32] r26[54u32] r26[55u32] r26[56u32] r26[57u32] r26[58u32] r26[59u32] r26[60u32] r26[61u32] r26[62u32] r26[63u32] r26[64u32] r26[65u32] r26[66u32] r26[67u32] r26[68u32] r26[69u32] r26[70u32] r26[71u32] r26[72u32] r26[73u32] r26[74u32] r26[75u32] r26[76u32] r26[77u32] r26[78u32] r26[79u32] r26[80u32] r26[81u32] r26[82u32] r26[83u32] r26[84u32] r26[85u32] r26[86u32] r26[87u32] r26[88u32] r26[89u32] r26[90u32] r26[91u32] r26[92u32] r26[93u32] r26[94u32] r26[95u32] r26[96u32] r26[97u32] r26[98u32] r26[99u32] r26[100u32] r26[101u32] r26[102u32] r26[103u32] r26[104u32] r26[105u32] r26[106u32] r26[107u32] r26[108u32] r26[109u32] r26[110u32] r26[111u32] r26[112u32] r26[113u32] r26[114u32] r26[115u32] r26[116u32] r26[117u32] r26[118u32] r26[119u32] r26[120u32] r26[121u32] r26[122u32] r26[123u32] r26[124u32] r26[125u32] r26[126u32] r26[127u32] into r27 as [boolean; 256u32];\n    deserialize.bits.raw r27 ([boolean; 256u32]) into r28 ([u8; 32u32]);\n    cast r24[0u32] r24[1u32] r24[2u32] r24[3u32] r24[4u32] r24[5u32] r24[6u32] r24[7u32] r24[8u32] r24[9u32] r24[10u32] r24[11u32] r24[12u32] r24[13u32] r24[14u32] r24[15u32] r24[16u32] r24[17u32] r24[18u32] r24[19u32] r24[20u32] r24[21u32] r24[22u32] r24[23u32] r24[24u32] r24[25u32] r24[26u32] r24[27u32] r24[28u32] r24[29u32] r24[30u32] r24[31u32] r3[32u32] r3[33u32] r3[34u32] r3[35u32] r3[36u32] r3[37u32] r3[38u32] r3[39u32] r3[40u32] r3[41u32] r3[42u32] r3[43u32] r3[44u32] r3[45u32] r3[46u32] r3[47u32] r3[48u32] r3[49u32] r3[50u32] r3[51u32] r3[52u32] r3[53u32] r3[54u32] r3[55u32] r3[56u32] r3[57u32] r3[58u32] r3[59u32] r3[60u32] r3[61u32] r3[62u32] r3[63u32] r3[64u32] r3[65u32] r3[66u32] r3[67u32] r28[0u32] r28[1u32] r28[2u32] r28[3u32] r28[4u32] r28[5u32] r28[6u32] r28[7u32] r28[8u32] r28[9u32] r28[10u32] r28[11u32] r28[12u32] r28[13u32] r28[14u32] r28[15u32] r28[16u32] r28[17u32] r28[18u32] r28[19u32] r28[20u32] r28[21u32] r28[22u32] r28[23u32] r28[24u32] r28[25u32] r28[26u32] r28[27u32] r28[28u32] r28[29u32] r28[30u32] r28[31u32] into r29 as [u8; 100u32];\n    hash.keccak256.native.raw r29 into r30 as [boolean; 256u32];\n    deserialize.bits.raw r30 ([boolean; 256u32]) into r31 ([u8; 32u32]);\n    cast 25u8 69u8 116u8 104u8 101u8 114u8 101u8 117u8 109u8 32u8 83u8 105u8 103u8 110u8 101u8 100u8 32u8 77u8 101u8 115u8 115u8 97u8 103u8 101u8 58u8 10u8 51u8 50u8 r31[0u32] r31[1u32] r31[2u32] r31[3u32] r31[4u32] r31[5u32] r31[6u32] r31[7u32] r31[8u32] r31[9u32] r31[10u32] r31[11u32] r31[12u32] r31[13u32] r31[14u32] r31[15u32] r31[16u32] r31[17u32] r31[18u32] r31[19u32] r31[20u32] r31[21u32] r31[22u32] r31[23u32] r31[24u32] r31[25u32] r31[26u32] r31[27u32] r31[28u32] r31[29u32] r31[30u32] r31[31u32] into r32 as [u8; 60u32];\n    hash.keccak256.native.raw r32 into r33 as [boolean; 256u32];\n    deserialize.bits.raw r33 ([boolean; 256u32]) into r34 ([u8; 32u32]);\n    get isms[r0] into r35;\n    contains isms[r0] into r36;\n    assert.eq r36 true;\n    is.eq r35 5u8 into r37;\n    branch.eq r37 false to end_then_0_0;\n    get message_id_multisigs[r0] into r38;\n    ecdsa.verify.digest.eth r10[0u32] r38.validators[0u32].bytes r34 into r39;\n    ternary r39 1u8 0u8 into r40;\n    add 0u8 r40 into r41;\n    ecdsa.verify.digest.eth r10[1u32] r38.validators[1u32].bytes r34 into r42;\n    ternary r42 1u8 0u8 into r43;\n    add r41 r43 into r44;\n    ecdsa.verify.digest.eth r10[2u32] r38.validators[2u32].bytes r34 into r45;\n    ternary r45 1u8 0u8 into r46;\n    add r44 r46 into r47;\n    ecdsa.verify.digest.eth r10[3u32] r38.validators[3u32].bytes r34 into r48;\n    ternary r48 1u8 0u8 into r49;\n    add r47 r49 into r50;\n    ecdsa.verify.digest.eth r10[4u32] r38.validators[4u32].bytes r34 into r51;\n    ternary r51 1u8 0u8 into r52;\n    add r50 r52 into r53;\n    ecdsa.verify.digest.eth r10[5u32] r38.validators[5u32].bytes r34 into r54;\n    ternary r54 1u8 0u8 into r55;\n    add r53 r55 into r56;\n    gte r56 r38.threshold into r57;\n    assert.eq r57 true;\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    is.eq r35 0u8 into r58;\n    is.eq r35 1u8 into r59;\n    or r58 r59 into r60;\n    branch.eq r60 false to end_then_1_2;\n    branch.eq true true to end_otherwise_1_3;\n    position end_then_1_2;\n    assert.eq false true;\n    position end_otherwise_1_3;\n    position end_otherwise_0_1;\n    cast r0 r1.origin_domain into r61 as IsmRouteKey;\n    get.or_use routes[r61] r0 into r62;\n    get isms[r62] into r63;\n    contains isms[r62] into r64;\n    assert.eq r64 true;\n    is.eq r63 5u8 into r65;\n    branch.eq r65 false to end_then_0_4;\n    get message_id_multisigs[r62] into r66;\n    ecdsa.verify.digest.eth r10[0u32] r66.validators[0u32].bytes r34 into r67;\n    ternary r67 1u8 0u8 into r68;\n    add 0u8 r68 into r69;\n    ecdsa.verify.digest.eth r10[1u32] r66.validators[1u32].bytes r34 into r70;\n    ternary r70 1u8 0u8 into r71;\n    add r69 r71 into r72;\n    ecdsa.verify.digest.eth r10[2u32] r66.validators[2u32].bytes r34 into r73;\n    ternary r73 1u8 0u8 into r74;\n    add r72 r74 into r75;\n    ecdsa.verify.digest.eth r10[3u32] r66.validators[3u32].bytes r34 into r76;\n    ternary r76 1u8 0u8 into r77;\n    add r75 r77 into r78;\n    ecdsa.verify.digest.eth r10[4u32] r66.validators[4u32].bytes r34 into r79;\n    ternary r79 1u8 0u8 into r80;\n    add r78 r80 into r81;\n    ecdsa.verify.digest.eth r10[5u32] r66.validators[5u32].bytes r34 into r82;\n    ternary r82 1u8 0u8 into r83;\n    add r81 r83 into r84;\n    gte r84 r66.threshold into r85;\n    assert.eq r85 true;\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    is.eq r63 0u8 into r86;\n    is.eq r63 1u8 into r87;\n    or r86 r87 into r88;\n    branch.eq r88 false to end_then_1_6;\n    branch.eq true true to end_otherwise_1_7;\n    position end_then_1_6;\n    assert.eq false true;\n    position end_otherwise_1_7;\n    position end_otherwise_0_5;\n    cast r62 r1.origin_domain into r89 as IsmRouteKey;\n    get.or_use routes[r89] r62 into r90;\n    get isms[r90] into r91;\n    contains isms[r90] into r92;\n    assert.eq r92 true;\n    is.eq r91 5u8 into r93;\n    branch.eq r93 false to end_then_0_8;\n    get message_id_multisigs[r90] into r94;\n    ecdsa.verify.digest.eth r10[0u32] r94.validators[0u32].bytes r34 into r95;\n    ternary r95 1u8 0u8 into r96;\n    add 0u8 r96 into r97;\n    ecdsa.verify.digest.eth r10[1u32] r94.validators[1u32].bytes r34 into r98;\n    ternary r98 1u8 0u8 into r99;\n    add r97 r99 into r100;\n    ecdsa.verify.digest.eth r10[2u32] r94.validators[2u32].bytes r34 into r101;\n    ternary r101 1u8 0u8 into r102;\n    add r100 r102 into r103;\n    ecdsa.verify.digest.eth r10[3u32] r94.validators[3u32].bytes r34 into r104;\n    ternary r104 1u8 0u8 into r105;\n    add r103 r105 into r106;\n    ecdsa.verify.digest.eth r10[4u32] r94.validators[4u32].bytes r34 into r107;\n    ternary r107 1u8 0u8 into r108;\n    add r106 r108 into r109;\n    ecdsa.verify.digest.eth r10[5u32] r94.validators[5u32].bytes r34 into r110;\n    ternary r110 1u8 0u8 into r111;\n    add r109 r111 into r112;\n    gte r112 r94.threshold into r113;\n    assert.eq r113 true;\n    branch.eq true true to end_otherwise_0_9;\n    position end_then_0_8;\n    is.eq r91 0u8 into r114;\n    is.eq r91 1u8 into r115;\n    or r114 r115 into r116;\n    branch.eq r116 false to end_then_1_10;\n    branch.eq true true to end_otherwise_1_11;\n    position end_then_1_10;\n    assert.eq false true;\n    position end_otherwise_1_11;\n    position end_otherwise_0_9;\n    cast r90 r1.origin_domain into r117 as IsmRouteKey;\n    get.or_use routes[r117] r90 into r118;\n    get isms[r118] into r119;\n    contains isms[r118] into r120;\n    assert.eq r120 true;\n    is.eq r119 5u8 into r121;\n    branch.eq r121 false to end_then_0_12;\n    get message_id_multisigs[r118] into r122;\n    ecdsa.verify.digest.eth r10[0u32] r122.validators[0u32].bytes r34 into r123;\n    ternary r123 1u8 0u8 into r124;\n    add 0u8 r124 into r125;\n    ecdsa.verify.digest.eth r10[1u32] r122.validators[1u32].bytes r34 into r126;\n    ternary r126 1u8 0u8 into r127;\n    add r125 r127 into r128;\n    ecdsa.verify.digest.eth r10[2u32] r122.validators[2u32].bytes r34 into r129;\n    ternary r129 1u8 0u8 into r130;\n    add r128 r130 into r131;\n    ecdsa.verify.digest.eth r10[3u32] r122.validators[3u32].bytes r34 into r132;\n    ternary r132 1u8 0u8 into r133;\n    add r131 r133 into r134;\n    ecdsa.verify.digest.eth r10[4u32] r122.validators[4u32].bytes r34 into r135;\n    ternary r135 1u8 0u8 into r136;\n    add r134 r136 into r137;\n    ecdsa.verify.digest.eth r10[5u32] r122.validators[5u32].bytes r34 into r138;\n    ternary r138 1u8 0u8 into r139;\n    add r137 r139 into r140;\n    gte r140 r122.threshold into r141;\n    assert.eq r141 true;\n    branch.eq true true to end_otherwise_0_13;\n    position end_then_0_12;\n    is.eq r119 0u8 into r142;\n    is.eq r119 1u8 into r143;\n    or r142 r143 into r144;\n    branch.eq r144 false to end_then_1_14;\n    branch.eq true true to end_otherwise_1_15;\n    position end_then_1_14;\n    assert.eq false true;\n    position end_otherwise_1_15;\n    position end_otherwise_0_13;\n    cast r118 r1.origin_domain into r145 as IsmRouteKey;\n    get.or_use routes[r145] r118 into r146;\n    get isms[r146] into r147;\n    is.eq r147 1u8 into r148;\n    branch.eq r148 false to end_then_0_16;\n    assert.eq false true;\n    branch.eq true true to end_otherwise_0_17;\n    position end_then_0_16;\n    position end_otherwise_0_17;\n\nconstructor:\n    assert.eq edition 0u16;\n`;
export const mailbox = `import ism_manager.aleo;\nprogram mailbox.aleo;\n\nstruct Mailbox:\n    local_domain as u32;\n    nonce as u32;\n    process_count as u32;\n    default_ism as address;\n    default_hook as address;\n    required_hook as address;\n    dispatch_proxy as address;\n    mailbox_owner as address;\n\nstruct Message:\n    version as u8;\n    nonce as u32;\n    origin_domain as u32;\n    sender as [u8; 32u32];\n    destination_domain as u32;\n    recipient as [u8; 32u32];\n    body as [u128; 8u32];\n\nstruct Delivery:\n    processor as address;\n    block_number as u32;\n\nstruct DeliveryKey:\n    id as [u128; 2u32];\n\nstruct EthAddress:\n    bytes as [u8; 20u32];\n\nmapping deliveries:\n    key as DeliveryKey.public;\n    value as Delivery.public;\n\nmapping dispatch_events:\n    key as u32.public;\n    value as Message.public;\n\nmapping dispatch_id_events:\n    key as u32.public;\n    value as [u128; 2u32].public;\n\nmapping process_events:\n    key as u32.public;\n    value as [u128; 2u32].public;\n\nmapping mailbox:\n    key as boolean.public;\n    value as Mailbox.public;\n\nmapping process_event_index:\n    key as u32.public;\n    value as u32.public;\n\nmapping dispatch_event_index:\n    key as u32.public;\n    value as u32.public;\n\nfunction init:\n    input r0 as u32.private;\n    async init r0 self.caller into r1;\n    output r1 as mailbox.aleo/init.future;\n\nfinalize init:\n    input r0 as u32.public;\n    input r1 as address.public;\n    contains mailbox[true] into r2;\n    not r2 into r3;\n    assert.eq r3 true;\n    cast r0 0u32 0u32 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r1 into r4 as Mailbox;\n    set r4 into mailbox[true];\n\nfunction set_dispatch_proxy:\n    input r0 as address.private;\n    async set_dispatch_proxy r0 self.caller into r1;\n    output r1 as mailbox.aleo/set_dispatch_proxy.future;\n\nfinalize set_dispatch_proxy:\n    input r0 as address.public;\n    input r1 as address.public;\n    get mailbox[true] into r2;\n    assert.eq r2.mailbox_owner r1;\n    cast r2.local_domain r2.nonce r2.process_count r2.default_ism r2.default_hook r2.required_hook r0 r2.mailbox_owner into r3 as Mailbox;\n    set r3 into mailbox[true];\n\nfunction set_owner:\n    input r0 as address.private;\n    async set_owner r0 self.caller into r1;\n    output r1 as mailbox.aleo/set_owner.future;\n\nfinalize set_owner:\n    input r0 as address.public;\n    input r1 as address.public;\n    get mailbox[true] into r2;\n    assert.eq r2.mailbox_owner r1;\n    cast r2.local_domain r2.nonce r2.process_count r2.default_ism r2.default_hook r2.required_hook r2.dispatch_proxy r0 into r3 as Mailbox;\n    set r3 into mailbox[true];\n\nfunction set_default_ism:\n    input r0 as address.private;\n    async set_default_ism r0 self.caller into r1;\n    output r1 as mailbox.aleo/set_default_ism.future;\n\nfinalize set_default_ism:\n    input r0 as address.public;\n    input r1 as address.public;\n    get mailbox[true] into r2;\n    assert.eq r2.mailbox_owner r1;\n    cast r2.local_domain r2.nonce r2.process_count r0 r2.default_hook r2.required_hook r2.dispatch_proxy r2.mailbox_owner into r3 as Mailbox;\n    set r3 into mailbox[true];\n\nfunction set_default_hook:\n    input r0 as address.private;\n    async set_default_hook r0 self.caller into r1;\n    output r1 as mailbox.aleo/set_default_hook.future;\n\nfinalize set_default_hook:\n    input r0 as address.public;\n    input r1 as address.public;\n    get mailbox[true] into r2;\n    assert.eq r2.mailbox_owner r1;\n    cast r2.local_domain r2.nonce r2.process_count r2.default_ism r0 r2.required_hook r2.dispatch_proxy r2.mailbox_owner into r3 as Mailbox;\n    set r3 into mailbox[true];\n\nfunction set_required_hook:\n    input r0 as address.private;\n    async set_required_hook r0 self.caller into r1;\n    output r1 as mailbox.aleo/set_required_hook.future;\n\nfinalize set_required_hook:\n    input r0 as address.public;\n    input r1 as address.public;\n    get mailbox[true] into r2;\n    assert.eq r2.mailbox_owner r1;\n    cast r2.local_domain r2.nonce r2.process_count r2.default_ism r2.default_hook r0 r2.dispatch_proxy r2.mailbox_owner into r3 as Mailbox;\n    set r3 into mailbox[true];\n\nfunction process:\n    input r0 as address.public;\n    input r1 as Message.public;\n    input r2 as u32.public;\n    input r3 as [u128; 2u32].public;\n    input r4 as [u8; 512u32].public;\n    call ism_manager.aleo/verify r0 r1 r3 r4 into r5;\n    async process r0 r1 r2 r3 self.caller r5 into r6;\n    output r6 as mailbox.aleo/process.future;\n\nfinalize process:\n    input r0 as address.public;\n    input r1 as Message.public;\n    input r2 as u32.public;\n    input r3 as [u128; 2u32].public;\n    input r4 as address.public;\n    input r5 as ism_manager.aleo/verify.future;\n    contains mailbox[true] into r6;\n    assert.eq r6 true;\n    gte r2 77u32 into r7;\n    assert.eq r7 true;\n    sub r2 77u32 into r8;\n    rem r8 8u32 into r9;\n    is.eq r9 0u32 into r10;\n    assert.eq r10 true;\n    cast 0u128 0u128 into r11 as [u128; 2u32];\n    shr r1.nonce 24u32 into r12;\n    cast r12 into r13 as u8;\n    shr r1.nonce 16u32 into r14;\n    rem r14 256u32 into r15;\n    cast r15 into r16 as u8;\n    shr r1.nonce 8u32 into r17;\n    rem r17 256u32 into r18;\n    cast r18 into r19 as u8;\n    rem r1.nonce 256u32 into r20;\n    cast r20 into r21 as u8;\n    cast r13 r16 r19 r21 into r22 as [u8; 4u32];\n    shr r1.origin_domain 24u32 into r23;\n    cast r23 into r24 as u8;\n    shr r1.origin_domain 16u32 into r25;\n    rem r25 256u32 into r26;\n    cast r26 into r27 as u8;\n    shr r1.origin_domain 8u32 into r28;\n    rem r28 256u32 into r29;\n    cast r29 into r30 as u8;\n    rem r1.origin_domain 256u32 into r31;\n    cast r31 into r32 as u8;\n    cast r24 r27 r30 r32 into r33 as [u8; 4u32];\n    shr r1.destination_domain 24u32 into r34;\n    cast r34 into r35 as u8;\n    shr r1.destination_domain 16u32 into r36;\n    rem r36 256u32 into r37;\n    cast r37 into r38 as u8;\n    shr r1.destination_domain 8u32 into r39;\n    rem r39 256u32 into r40;\n    cast r40 into r41 as u8;\n    rem r1.destination_domain 256u32 into r42;\n    cast r42 into r43 as u8;\n    cast r35 r38 r41 r43 into r44 as [u8; 4u32];\n    serialize.bits.raw r1.body[0u32] (u128) into r45 ([boolean; 128u32]);\n    deserialize.bits.raw r45 ([boolean; 128u32]) into r46 ([u8; 16u32]);\n    serialize.bits.raw r1.body[1u32] (u128) into r47 ([boolean; 128u32]);\n    deserialize.bits.raw r47 ([boolean; 128u32]) into r48 ([u8; 16u32]);\n    serialize.bits.raw r1.body[2u32] (u128) into r49 ([boolean; 128u32]);\n    deserialize.bits.raw r49 ([boolean; 128u32]) into r50 ([u8; 16u32]);\n    serialize.bits.raw r1.body[3u32] (u128) into r51 ([boolean; 128u32]);\n    deserialize.bits.raw r51 ([boolean; 128u32]) into r52 ([u8; 16u32]);\n    serialize.bits.raw r1.body[4u32] (u128) into r53 ([boolean; 128u32]);\n    deserialize.bits.raw r53 ([boolean; 128u32]) into r54 ([u8; 16u32]);\n    serialize.bits.raw r1.body[5u32] (u128) into r55 ([boolean; 128u32]);\n    deserialize.bits.raw r55 ([boolean; 128u32]) into r56 ([u8; 16u32]);\n    serialize.bits.raw r1.body[6u32] (u128) into r57 ([boolean; 128u32]);\n    deserialize.bits.raw r57 ([boolean; 128u32]) into r58 ([u8; 16u32]);\n    serialize.bits.raw r1.body[7u32] (u128) into r59 ([boolean; 128u32]);\n    deserialize.bits.raw r59 ([boolean; 128u32]) into r60 ([u8; 16u32]);\n    cast r1.version r22[0u32] r22[1u32] r22[2u32] r22[3u32] r33[0u32] r33[1u32] r33[2u32] r33[3u32] r1.sender[0u32] r1.sender[1u32] r1.sender[2u32] r1.sender[3u32] r1.sender[4u32] r1.sender[5u32] r1.sender[6u32] r1.sender[7u32] r1.sender[8u32] r1.sender[9u32] r1.sender[10u32] r1.sender[11u32] r1.sender[12u32] r1.sender[13u32] r1.sender[14u32] r1.sender[15u32] r1.sender[16u32] r1.sender[17u32] r1.sender[18u32] r1.sender[19u32] r1.sender[20u32] r1.sender[21u32] r1.sender[22u32] r1.sender[23u32] r1.sender[24u32] r1.sender[25u32] r1.sender[26u32] r1.sender[27u32] r1.sender[28u32] r1.sender[29u32] r1.sender[30u32] r1.sender[31u32] r44[0u32] r44[1u32] r44[2u32] r44[3u32] r1.recipient[0u32] r1.recipient[1u32] r1.recipient[2u32] r1.recipient[3u32] r1.recipient[4u32] r1.recipient[5u32] r1.recipient[6u32] r1.recipient[7u32] r1.recipient[8u32] r1.recipient[9u32] r1.recipient[10u32] r1.recipient[11u32] r1.recipient[12u32] r1.recipient[13u32] r1.recipient[14u32] r1.recipient[15u32] r1.recipient[16u32] r1.recipient[17u32] r1.recipient[18u32] r1.recipient[19u32] r1.recipient[20u32] r1.recipient[21u32] r1.recipient[22u32] r1.recipient[23u32] r1.recipient[24u32] r1.recipient[25u32] r1.recipient[26u32] r1.recipient[27u32] r1.recipient[28u32] r1.recipient[29u32] r1.recipient[30u32] r1.recipient[31u32] r46[0u32] r46[1u32] r46[2u32] r46[3u32] r46[4u32] r46[5u32] r46[6u32] r46[7u32] r46[8u32] r46[9u32] r46[10u32] r46[11u32] r46[12u32] r46[13u32] r46[14u32] r46[15u32] r48[0u32] r48[1u32] r48[2u32] r48[3u32] r48[4u32] r48[5u32] r48[6u32] r48[7u32] r48[8u32] r48[9u32] r48[10u32] r48[11u32] r48[12u32] r48[13u32] r48[14u32] r48[15u32] r50[0u32] r50[1u32] r50[2u32] r50[3u32] r50[4u32] r50[5u32] r50[6u32] r50[7u32] r50[8u32] r50[9u32] r50[10u32] r50[11u32] r50[12u32] r50[13u32] r50[14u32] r50[15u32] r52[0u32] r52[1u32] r52[2u32] r52[3u32] r52[4u32] r52[5u32] r52[6u32] r52[7u32] r52[8u32] r52[9u32] r52[10u32] r52[11u32] r52[12u32] r52[13u32] r52[14u32] r52[15u32] r54[0u32] r54[1u32] r54[2u32] r54[3u32] r54[4u32] r54[5u32] r54[6u32] r54[7u32] r54[8u32] r54[9u32] r54[10u32] r54[11u32] r54[12u32] r54[13u32] r54[14u32] r54[15u32] r56[0u32] r56[1u32] r56[2u32] r56[3u32] r56[4u32] r56[5u32] r56[6u32] r56[7u32] r56[8u32] r56[9u32] r56[10u32] r56[11u32] r56[12u32] r56[13u32] r56[14u32] r56[15u32] r58[0u32] r58[1u32] r58[2u32] r58[3u32] r58[4u32] r58[5u32] r58[6u32] r58[7u32] r58[8u32] r58[9u32] r58[10u32] r58[11u32] r58[12u32] r58[13u32] r58[14u32] r58[15u32] r60[0u32] r60[1u32] r60[2u32] r60[3u32] r60[4u32] r60[5u32] r60[6u32] r60[7u32] r60[8u32] r60[9u32] r60[10u32] r60[11u32] r60[12u32] r60[13u32] r60[14u32] r60[15u32] into r61 as [u8; 205u32];\n    is.eq r2 77u32 into r62;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] into r63 as [u8; 77u32];\n    hash.keccak256.native.raw r63 into r64 as [boolean; 256u32];\n    deserialize.bits.raw r64 ([boolean; 256u32]) into r65 ([u128; 2u32]);\n    is.eq r2 85u32 into r66;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] into r67 as [u8; 85u32];\n    hash.keccak256.native.raw r67 into r68 as [boolean; 256u32];\n    deserialize.bits.raw r68 ([boolean; 256u32]) into r69 ([u128; 2u32]);\n    is.eq r2 93u32 into r70;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] into r71 as [u8; 93u32];\n    hash.keccak256.native.raw r71 into r72 as [boolean; 256u32];\n    deserialize.bits.raw r72 ([boolean; 256u32]) into r73 ([u128; 2u32]);\n    is.eq r2 101u32 into r74;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] into r75 as [u8; 101u32];\n    hash.keccak256.native.raw r75 into r76 as [boolean; 256u32];\n    deserialize.bits.raw r76 ([boolean; 256u32]) into r77 ([u128; 2u32]);\n    is.eq r2 109u32 into r78;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] into r79 as [u8; 109u32];\n    hash.keccak256.native.raw r79 into r80 as [boolean; 256u32];\n    deserialize.bits.raw r80 ([boolean; 256u32]) into r81 ([u128; 2u32]);\n    is.eq r2 117u32 into r82;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] r61[109u32] r61[110u32] r61[111u32] r61[112u32] r61[113u32] r61[114u32] r61[115u32] r61[116u32] into r83 as [u8; 117u32];\n    hash.keccak256.native.raw r83 into r84 as [boolean; 256u32];\n    deserialize.bits.raw r84 ([boolean; 256u32]) into r85 ([u128; 2u32]);\n    is.eq r2 125u32 into r86;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] r61[109u32] r61[110u32] r61[111u32] r61[112u32] r61[113u32] r61[114u32] r61[115u32] r61[116u32] r61[117u32] r61[118u32] r61[119u32] r61[120u32] r61[121u32] r61[122u32] r61[123u32] r61[124u32] into r87 as [u8; 125u32];\n    hash.keccak256.native.raw r87 into r88 as [boolean; 256u32];\n    deserialize.bits.raw r88 ([boolean; 256u32]) into r89 ([u128; 2u32]);\n    is.eq r2 133u32 into r90;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] r61[109u32] r61[110u32] r61[111u32] r61[112u32] r61[113u32] r61[114u32] r61[115u32] r61[116u32] r61[117u32] r61[118u32] r61[119u32] r61[120u32] r61[121u32] r61[122u32] r61[123u32] r61[124u32] r61[125u32] r61[126u32] r61[127u32] r61[128u32] r61[129u32] r61[130u32] r61[131u32] r61[132u32] into r91 as [u8; 133u32];\n    hash.keccak256.native.raw r91 into r92 as [boolean; 256u32];\n    deserialize.bits.raw r92 ([boolean; 256u32]) into r93 ([u128; 2u32]);\n    is.eq r2 141u32 into r94;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] r61[109u32] r61[110u32] r61[111u32] r61[112u32] r61[113u32] r61[114u32] r61[115u32] r61[116u32] r61[117u32] r61[118u32] r61[119u32] r61[120u32] r61[121u32] r61[122u32] r61[123u32] r61[124u32] r61[125u32] r61[126u32] r61[127u32] r61[128u32] r61[129u32] r61[130u32] r61[131u32] r61[132u32] r61[133u32] r61[134u32] r61[135u32] r61[136u32] r61[137u32] r61[138u32] r61[139u32] r61[140u32] into r95 as [u8; 141u32];\n    hash.keccak256.native.raw r95 into r96 as [boolean; 256u32];\n    deserialize.bits.raw r96 ([boolean; 256u32]) into r97 ([u128; 2u32]);\n    is.eq r2 149u32 into r98;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] r61[109u32] r61[110u32] r61[111u32] r61[112u32] r61[113u32] r61[114u32] r61[115u32] r61[116u32] r61[117u32] r61[118u32] r61[119u32] r61[120u32] r61[121u32] r61[122u32] r61[123u32] r61[124u32] r61[125u32] r61[126u32] r61[127u32] r61[128u32] r61[129u32] r61[130u32] r61[131u32] r61[132u32] r61[133u32] r61[134u32] r61[135u32] r61[136u32] r61[137u32] r61[138u32] r61[139u32] r61[140u32] r61[141u32] r61[142u32] r61[143u32] r61[144u32] r61[145u32] r61[146u32] r61[147u32] r61[148u32] into r99 as [u8; 149u32];\n    hash.keccak256.native.raw r99 into r100 as [boolean; 256u32];\n    deserialize.bits.raw r100 ([boolean; 256u32]) into r101 ([u128; 2u32]);\n    is.eq r2 157u32 into r102;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] r61[109u32] r61[110u32] r61[111u32] r61[112u32] r61[113u32] r61[114u32] r61[115u32] r61[116u32] r61[117u32] r61[118u32] r61[119u32] r61[120u32] r61[121u32] r61[122u32] r61[123u32] r61[124u32] r61[125u32] r61[126u32] r61[127u32] r61[128u32] r61[129u32] r61[130u32] r61[131u32] r61[132u32] r61[133u32] r61[134u32] r61[135u32] r61[136u32] r61[137u32] r61[138u32] r61[139u32] r61[140u32] r61[141u32] r61[142u32] r61[143u32] r61[144u32] r61[145u32] r61[146u32] r61[147u32] r61[148u32] r61[149u32] r61[150u32] r61[151u32] r61[152u32] r61[153u32] r61[154u32] r61[155u32] r61[156u32] into r103 as [u8; 157u32];\n    hash.keccak256.native.raw r103 into r104 as [boolean; 256u32];\n    deserialize.bits.raw r104 ([boolean; 256u32]) into r105 ([u128; 2u32]);\n    is.eq r2 165u32 into r106;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] r61[109u32] r61[110u32] r61[111u32] r61[112u32] r61[113u32] r61[114u32] r61[115u32] r61[116u32] r61[117u32] r61[118u32] r61[119u32] r61[120u32] r61[121u32] r61[122u32] r61[123u32] r61[124u32] r61[125u32] r61[126u32] r61[127u32] r61[128u32] r61[129u32] r61[130u32] r61[131u32] r61[132u32] r61[133u32] r61[134u32] r61[135u32] r61[136u32] r61[137u32] r61[138u32] r61[139u32] r61[140u32] r61[141u32] r61[142u32] r61[143u32] r61[144u32] r61[145u32] r61[146u32] r61[147u32] r61[148u32] r61[149u32] r61[150u32] r61[151u32] r61[152u32] r61[153u32] r61[154u32] r61[155u32] r61[156u32] r61[157u32] r61[158u32] r61[159u32] r61[160u32] r61[161u32] r61[162u32] r61[163u32] r61[164u32] into r107 as [u8; 165u32];\n    hash.keccak256.native.raw r107 into r108 as [boolean; 256u32];\n    deserialize.bits.raw r108 ([boolean; 256u32]) into r109 ([u128; 2u32]);\n    is.eq r2 173u32 into r110;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] r61[109u32] r61[110u32] r61[111u32] r61[112u32] r61[113u32] r61[114u32] r61[115u32] r61[116u32] r61[117u32] r61[118u32] r61[119u32] r61[120u32] r61[121u32] r61[122u32] r61[123u32] r61[124u32] r61[125u32] r61[126u32] r61[127u32] r61[128u32] r61[129u32] r61[130u32] r61[131u32] r61[132u32] r61[133u32] r61[134u32] r61[135u32] r61[136u32] r61[137u32] r61[138u32] r61[139u32] r61[140u32] r61[141u32] r61[142u32] r61[143u32] r61[144u32] r61[145u32] r61[146u32] r61[147u32] r61[148u32] r61[149u32] r61[150u32] r61[151u32] r61[152u32] r61[153u32] r61[154u32] r61[155u32] r61[156u32] r61[157u32] r61[158u32] r61[159u32] r61[160u32] r61[161u32] r61[162u32] r61[163u32] r61[164u32] r61[165u32] r61[166u32] r61[167u32] r61[168u32] r61[169u32] r61[170u32] r61[171u32] r61[172u32] into r111 as [u8; 173u32];\n    hash.keccak256.native.raw r111 into r112 as [boolean; 256u32];\n    deserialize.bits.raw r112 ([boolean; 256u32]) into r113 ([u128; 2u32]);\n    is.eq r2 181u32 into r114;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] r61[109u32] r61[110u32] r61[111u32] r61[112u32] r61[113u32] r61[114u32] r61[115u32] r61[116u32] r61[117u32] r61[118u32] r61[119u32] r61[120u32] r61[121u32] r61[122u32] r61[123u32] r61[124u32] r61[125u32] r61[126u32] r61[127u32] r61[128u32] r61[129u32] r61[130u32] r61[131u32] r61[132u32] r61[133u32] r61[134u32] r61[135u32] r61[136u32] r61[137u32] r61[138u32] r61[139u32] r61[140u32] r61[141u32] r61[142u32] r61[143u32] r61[144u32] r61[145u32] r61[146u32] r61[147u32] r61[148u32] r61[149u32] r61[150u32] r61[151u32] r61[152u32] r61[153u32] r61[154u32] r61[155u32] r61[156u32] r61[157u32] r61[158u32] r61[159u32] r61[160u32] r61[161u32] r61[162u32] r61[163u32] r61[164u32] r61[165u32] r61[166u32] r61[167u32] r61[168u32] r61[169u32] r61[170u32] r61[171u32] r61[172u32] r61[173u32] r61[174u32] r61[175u32] r61[176u32] r61[177u32] r61[178u32] r61[179u32] r61[180u32] into r115 as [u8; 181u32];\n    hash.keccak256.native.raw r115 into r116 as [boolean; 256u32];\n    deserialize.bits.raw r116 ([boolean; 256u32]) into r117 ([u128; 2u32]);\n    is.eq r2 189u32 into r118;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] r61[109u32] r61[110u32] r61[111u32] r61[112u32] r61[113u32] r61[114u32] r61[115u32] r61[116u32] r61[117u32] r61[118u32] r61[119u32] r61[120u32] r61[121u32] r61[122u32] r61[123u32] r61[124u32] r61[125u32] r61[126u32] r61[127u32] r61[128u32] r61[129u32] r61[130u32] r61[131u32] r61[132u32] r61[133u32] r61[134u32] r61[135u32] r61[136u32] r61[137u32] r61[138u32] r61[139u32] r61[140u32] r61[141u32] r61[142u32] r61[143u32] r61[144u32] r61[145u32] r61[146u32] r61[147u32] r61[148u32] r61[149u32] r61[150u32] r61[151u32] r61[152u32] r61[153u32] r61[154u32] r61[155u32] r61[156u32] r61[157u32] r61[158u32] r61[159u32] r61[160u32] r61[161u32] r61[162u32] r61[163u32] r61[164u32] r61[165u32] r61[166u32] r61[167u32] r61[168u32] r61[169u32] r61[170u32] r61[171u32] r61[172u32] r61[173u32] r61[174u32] r61[175u32] r61[176u32] r61[177u32] r61[178u32] r61[179u32] r61[180u32] r61[181u32] r61[182u32] r61[183u32] r61[184u32] r61[185u32] r61[186u32] r61[187u32] r61[188u32] into r119 as [u8; 189u32];\n    hash.keccak256.native.raw r119 into r120 as [boolean; 256u32];\n    deserialize.bits.raw r120 ([boolean; 256u32]) into r121 ([u128; 2u32]);\n    is.eq r2 197u32 into r122;\n    cast r61[0u32] r61[1u32] r61[2u32] r61[3u32] r61[4u32] r61[5u32] r61[6u32] r61[7u32] r61[8u32] r61[9u32] r61[10u32] r61[11u32] r61[12u32] r61[13u32] r61[14u32] r61[15u32] r61[16u32] r61[17u32] r61[18u32] r61[19u32] r61[20u32] r61[21u32] r61[22u32] r61[23u32] r61[24u32] r61[25u32] r61[26u32] r61[27u32] r61[28u32] r61[29u32] r61[30u32] r61[31u32] r61[32u32] r61[33u32] r61[34u32] r61[35u32] r61[36u32] r61[37u32] r61[38u32] r61[39u32] r61[40u32] r61[41u32] r61[42u32] r61[43u32] r61[44u32] r61[45u32] r61[46u32] r61[47u32] r61[48u32] r61[49u32] r61[50u32] r61[51u32] r61[52u32] r61[53u32] r61[54u32] r61[55u32] r61[56u32] r61[57u32] r61[58u32] r61[59u32] r61[60u32] r61[61u32] r61[62u32] r61[63u32] r61[64u32] r61[65u32] r61[66u32] r61[67u32] r61[68u32] r61[69u32] r61[70u32] r61[71u32] r61[72u32] r61[73u32] r61[74u32] r61[75u32] r61[76u32] r61[77u32] r61[78u32] r61[79u32] r61[80u32] r61[81u32] r61[82u32] r61[83u32] r61[84u32] r61[85u32] r61[86u32] r61[87u32] r61[88u32] r61[89u32] r61[90u32] r61[91u32] r61[92u32] r61[93u32] r61[94u32] r61[95u32] r61[96u32] r61[97u32] r61[98u32] r61[99u32] r61[100u32] r61[101u32] r61[102u32] r61[103u32] r61[104u32] r61[105u32] r61[106u32] r61[107u32] r61[108u32] r61[109u32] r61[110u32] r61[111u32] r61[112u32] r61[113u32] r61[114u32] r61[115u32] r61[116u32] r61[117u32] r61[118u32] r61[119u32] r61[120u32] r61[121u32] r61[122u32] r61[123u32] r61[124u32] r61[125u32] r61[126u32] r61[127u32] r61[128u32] r61[129u32] r61[130u32] r61[131u32] r61[132u32] r61[133u32] r61[134u32] r61[135u32] r61[136u32] r61[137u32] r61[138u32] r61[139u32] r61[140u32] r61[141u32] r61[142u32] r61[143u32] r61[144u32] r61[145u32] r61[146u32] r61[147u32] r61[148u32] r61[149u32] r61[150u32] r61[151u32] r61[152u32] r61[153u32] r61[154u32] r61[155u32] r61[156u32] r61[157u32] r61[158u32] r61[159u32] r61[160u32] r61[161u32] r61[162u32] r61[163u32] r61[164u32] r61[165u32] r61[166u32] r61[167u32] r61[168u32] r61[169u32] r61[170u32] r61[171u32] r61[172u32] r61[173u32] r61[174u32] r61[175u32] r61[176u32] r61[177u32] r61[178u32] r61[179u32] r61[180u32] r61[181u32] r61[182u32] r61[183u32] r61[184u32] r61[185u32] r61[186u32] r61[187u32] r61[188u32] r61[189u32] r61[190u32] r61[191u32] r61[192u32] r61[193u32] r61[194u32] r61[195u32] r61[196u32] into r123 as [u8; 197u32];\n    hash.keccak256.native.raw r123 into r124 as [boolean; 256u32];\n    deserialize.bits.raw r124 ([boolean; 256u32]) into r125 ([u128; 2u32]);\n    is.eq r2 205u32 into r126;\n    hash.keccak256.native.raw r61 into r127 as [boolean; 256u32];\n    deserialize.bits.raw r127 ([boolean; 256u32]) into r128 ([u128; 2u32]);\n    ternary r126 r128[0u32] r11[0u32] into r129;\n    ternary r126 r128[1u32] r11[1u32] into r130;\n    cast r129 r130 into r131 as [u128; 2u32];\n    ternary r122 r125[0u32] r131[0u32] into r132;\n    ternary r122 r125[1u32] r131[1u32] into r133;\n    cast r132 r133 into r134 as [u128; 2u32];\n    ternary r118 r121[0u32] r134[0u32] into r135;\n    ternary r118 r121[1u32] r134[1u32] into r136;\n    cast r135 r136 into r137 as [u128; 2u32];\n    ternary r114 r117[0u32] r137[0u32] into r138;\n    ternary r114 r117[1u32] r137[1u32] into r139;\n    cast r138 r139 into r140 as [u128; 2u32];\n    ternary r110 r113[0u32] r140[0u32] into r141;\n    ternary r110 r113[1u32] r140[1u32] into r142;\n    cast r141 r142 into r143 as [u128; 2u32];\n    ternary r106 r109[0u32] r143[0u32] into r144;\n    ternary r106 r109[1u32] r143[1u32] into r145;\n    cast r144 r145 into r146 as [u128; 2u32];\n    ternary r102 r105[0u32] r146[0u32] into r147;\n    ternary r102 r105[1u32] r146[1u32] into r148;\n    cast r147 r148 into r149 as [u128; 2u32];\n    ternary r98 r101[0u32] r149[0u32] into r150;\n    ternary r98 r101[1u32] r149[1u32] into r151;\n    cast r150 r151 into r152 as [u128; 2u32];\n    ternary r94 r97[0u32] r152[0u32] into r153;\n    ternary r94 r97[1u32] r152[1u32] into r154;\n    cast r153 r154 into r155 as [u128; 2u32];\n    ternary r90 r93[0u32] r155[0u32] into r156;\n    ternary r90 r93[1u32] r155[1u32] into r157;\n    cast r156 r157 into r158 as [u128; 2u32];\n    ternary r86 r89[0u32] r158[0u32] into r159;\n    ternary r86 r89[1u32] r158[1u32] into r160;\n    cast r159 r160 into r161 as [u128; 2u32];\n    ternary r82 r85[0u32] r161[0u32] into r162;\n    ternary r82 r85[1u32] r161[1u32] into r163;\n    cast r162 r163 into r164 as [u128; 2u32];\n    ternary r78 r81[0u32] r164[0u32] into r165;\n    ternary r78 r81[1u32] r164[1u32] into r166;\n    cast r165 r166 into r167 as [u128; 2u32];\n    ternary r74 r77[0u32] r167[0u32] into r168;\n    ternary r74 r77[1u32] r167[1u32] into r169;\n    cast r168 r169 into r170 as [u128; 2u32];\n    ternary r70 r73[0u32] r170[0u32] into r171;\n    ternary r70 r73[1u32] r170[1u32] into r172;\n    cast r171 r172 into r173 as [u128; 2u32];\n    ternary r66 r69[0u32] r173[0u32] into r174;\n    ternary r66 r69[1u32] r173[1u32] into r175;\n    cast r174 r175 into r176 as [u128; 2u32];\n    ternary r62 r65[0u32] r176[0u32] into r177;\n    ternary r62 r65[1u32] r176[1u32] into r178;\n    cast r177 r178 into r179 as [u128; 2u32];\n    assert.eq r179 r3;\n    get mailbox[true] into r180;\n    await r5;\n    serialize.bits.raw r4 (address) into r181 ([boolean; 253u32]);\n    cast false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false into r182 as [boolean; 256u32];\n    cast r181[0u32] r181[1u32] r181[2u32] r181[3u32] r181[4u32] r181[5u32] r181[6u32] r181[7u32] r181[8u32] r181[9u32] r181[10u32] r181[11u32] r181[12u32] r181[13u32] r181[14u32] r181[15u32] r181[16u32] r181[17u32] r181[18u32] r181[19u32] r181[20u32] r181[21u32] r181[22u32] r181[23u32] r181[24u32] r181[25u32] r181[26u32] r181[27u32] r181[28u32] r181[29u32] r181[30u32] r181[31u32] r181[32u32] r181[33u32] r181[34u32] r181[35u32] r181[36u32] r181[37u32] r181[38u32] r181[39u32] r181[40u32] r181[41u32] r181[42u32] r181[43u32] r181[44u32] r181[45u32] r181[46u32] r181[47u32] r181[48u32] r181[49u32] r181[50u32] r181[51u32] r181[52u32] r181[53u32] r181[54u32] r181[55u32] r181[56u32] r181[57u32] r181[58u32] r181[59u32] r181[60u32] r181[61u32] r181[62u32] r181[63u32] r181[64u32] r181[65u32] r181[66u32] r181[67u32] r181[68u32] r181[69u32] r181[70u32] r181[71u32] r181[72u32] r181[73u32] r181[74u32] r181[75u32] r181[76u32] r181[77u32] r181[78u32] r181[79u32] r181[80u32] r181[81u32] r181[82u32] r181[83u32] r181[84u32] r181[85u32] r181[86u32] r181[87u32] r181[88u32] r181[89u32] r181[90u32] r181[91u32] r181[92u32] r181[93u32] r181[94u32] r181[95u32] r181[96u32] r181[97u32] r181[98u32] r181[99u32] r181[100u32] r181[101u32] r181[102u32] r181[103u32] r181[104u32] r181[105u32] r181[106u32] r181[107u32] r181[108u32] r181[109u32] r181[110u32] r181[111u32] r181[112u32] r181[113u32] r181[114u32] r181[115u32] r181[116u32] r181[117u32] r181[118u32] r181[119u32] r181[120u32] r181[121u32] r181[122u32] r181[123u32] r181[124u32] r181[125u32] r181[126u32] r181[127u32] r181[128u32] r181[129u32] r181[130u32] r181[131u32] r181[132u32] r181[133u32] r181[134u32] r181[135u32] r181[136u32] r181[137u32] r181[138u32] r181[139u32] r181[140u32] r181[141u32] r181[142u32] r181[143u32] r181[144u32] r181[145u32] r181[146u32] r181[147u32] r181[148u32] r181[149u32] r181[150u32] r181[151u32] r181[152u32] r181[153u32] r181[154u32] r181[155u32] r181[156u32] r181[157u32] r181[158u32] r181[159u32] r181[160u32] r181[161u32] r181[162u32] r181[163u32] r181[164u32] r181[165u32] r181[166u32] r181[167u32] r181[168u32] r181[169u32] r181[170u32] r181[171u32] r181[172u32] r181[173u32] r181[174u32] r181[175u32] r181[176u32] r181[177u32] r181[178u32] r181[179u32] r181[180u32] r181[181u32] r181[182u32] r181[183u32] r181[184u32] r181[185u32] r181[186u32] r181[187u32] r181[188u32] r181[189u32] r181[190u32] r181[191u32] r181[192u32] r181[193u32] r181[194u32] r181[195u32] r181[196u32] r181[197u32] r181[198u32] r181[199u32] r181[200u32] r181[201u32] r181[202u32] r181[203u32] r181[204u32] r181[205u32] r181[206u32] r181[207u32] r181[208u32] r181[209u32] r181[210u32] r181[211u32] r181[212u32] r181[213u32] r181[214u32] r181[215u32] r181[216u32] r181[217u32] r181[218u32] r181[219u32] r181[220u32] r181[221u32] r181[222u32] r181[223u32] r181[224u32] r181[225u32] r181[226u32] r181[227u32] r181[228u32] r181[229u32] r181[230u32] r181[231u32] r181[232u32] r181[233u32] r181[234u32] r181[235u32] r181[236u32] r181[237u32] r181[238u32] r181[239u32] r181[240u32] r181[241u32] r181[242u32] r181[243u32] r181[244u32] r181[245u32] r181[246u32] r181[247u32] r181[248u32] r181[249u32] r181[250u32] r181[251u32] r181[252u32] r182[253u32] r182[254u32] r182[255u32] into r183 as [boolean; 256u32];\n    deserialize.bits.raw r183 ([boolean; 256u32]) into r184 ([u8; 32u32]);\n    assert.eq r1.recipient r184;\n    assert.eq r1.version 3u8;\n    assert.eq r1.destination_domain r180.local_domain;\n    cast r3 into r185 as DeliveryKey;\n    contains deliveries[r185] into r186;\n    not r186 into r187;\n    assert.eq r187 true;\n    cast r4 block.height into r188 as Delivery;\n    set r188 into deliveries[r185];\n    set r3 into process_events[r180.process_count];\n    set r180.process_count into dispatch_event_index[block.height];\n    add r180.process_count 1u32 into r189;\n    cast r180.local_domain r180.nonce r189 r180.default_ism r180.default_hook r180.required_hook r180.dispatch_proxy r180.mailbox_owner into r190 as Mailbox;\n    set r190 into mailbox[true];\n\nfunction dispatch:\n    input r0 as u32.public;\n    input r1 as [u8; 32u32].public;\n    input r2 as [u128; 8u32].public;\n    input r3 as address.public;\n    async dispatch r0 r1 r2 r3 self.caller into r4;\n    output r4 as mailbox.aleo/dispatch.future;\n\nfinalize dispatch:\n    input r0 as u32.public;\n    input r1 as [u8; 32u32].public;\n    input r2 as [u128; 8u32].public;\n    input r3 as address.public;\n    input r4 as address.public;\n    contains mailbox[true] into r5;\n    assert.eq r5 true;\n    get mailbox[true] into r6;\n    assert.eq r4 r6.dispatch_proxy;\n    serialize.bits.raw r3 (address) into r7 ([boolean; 253u32]);\n    cast false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false into r8 as [boolean; 256u32];\n    cast r7[0u32] r7[1u32] r7[2u32] r7[3u32] r7[4u32] r7[5u32] r7[6u32] r7[7u32] r7[8u32] r7[9u32] r7[10u32] r7[11u32] r7[12u32] r7[13u32] r7[14u32] r7[15u32] r7[16u32] r7[17u32] r7[18u32] r7[19u32] r7[20u32] r7[21u32] r7[22u32] r7[23u32] r7[24u32] r7[25u32] r7[26u32] r7[27u32] r7[28u32] r7[29u32] r7[30u32] r7[31u32] r7[32u32] r7[33u32] r7[34u32] r7[35u32] r7[36u32] r7[37u32] r7[38u32] r7[39u32] r7[40u32] r7[41u32] r7[42u32] r7[43u32] r7[44u32] r7[45u32] r7[46u32] r7[47u32] r7[48u32] r7[49u32] r7[50u32] r7[51u32] r7[52u32] r7[53u32] r7[54u32] r7[55u32] r7[56u32] r7[57u32] r7[58u32] r7[59u32] r7[60u32] r7[61u32] r7[62u32] r7[63u32] r7[64u32] r7[65u32] r7[66u32] r7[67u32] r7[68u32] r7[69u32] r7[70u32] r7[71u32] r7[72u32] r7[73u32] r7[74u32] r7[75u32] r7[76u32] r7[77u32] r7[78u32] r7[79u32] r7[80u32] r7[81u32] r7[82u32] r7[83u32] r7[84u32] r7[85u32] r7[86u32] r7[87u32] r7[88u32] r7[89u32] r7[90u32] r7[91u32] r7[92u32] r7[93u32] r7[94u32] r7[95u32] r7[96u32] r7[97u32] r7[98u32] r7[99u32] r7[100u32] r7[101u32] r7[102u32] r7[103u32] r7[104u32] r7[105u32] r7[106u32] r7[107u32] r7[108u32] r7[109u32] r7[110u32] r7[111u32] r7[112u32] r7[113u32] r7[114u32] r7[115u32] r7[116u32] r7[117u32] r7[118u32] r7[119u32] r7[120u32] r7[121u32] r7[122u32] r7[123u32] r7[124u32] r7[125u32] r7[126u32] r7[127u32] r7[128u32] r7[129u32] r7[130u32] r7[131u32] r7[132u32] r7[133u32] r7[134u32] r7[135u32] r7[136u32] r7[137u32] r7[138u32] r7[139u32] r7[140u32] r7[141u32] r7[142u32] r7[143u32] r7[144u32] r7[145u32] r7[146u32] r7[147u32] r7[148u32] r7[149u32] r7[150u32] r7[151u32] r7[152u32] r7[153u32] r7[154u32] r7[155u32] r7[156u32] r7[157u32] r7[158u32] r7[159u32] r7[160u32] r7[161u32] r7[162u32] r7[163u32] r7[164u32] r7[165u32] r7[166u32] r7[167u32] r7[168u32] r7[169u32] r7[170u32] r7[171u32] r7[172u32] r7[173u32] r7[174u32] r7[175u32] r7[176u32] r7[177u32] r7[178u32] r7[179u32] r7[180u32] r7[181u32] r7[182u32] r7[183u32] r7[184u32] r7[185u32] r7[186u32] r7[187u32] r7[188u32] r7[189u32] r7[190u32] r7[191u32] r7[192u32] r7[193u32] r7[194u32] r7[195u32] r7[196u32] r7[197u32] r7[198u32] r7[199u32] r7[200u32] r7[201u32] r7[202u32] r7[203u32] r7[204u32] r7[205u32] r7[206u32] r7[207u32] r7[208u32] r7[209u32] r7[210u32] r7[211u32] r7[212u32] r7[213u32] r7[214u32] r7[215u32] r7[216u32] r7[217u32] r7[218u32] r7[219u32] r7[220u32] r7[221u32] r7[222u32] r7[223u32] r7[224u32] r7[225u32] r7[226u32] r7[227u32] r7[228u32] r7[229u32] r7[230u32] r7[231u32] r7[232u32] r7[233u32] r7[234u32] r7[235u32] r7[236u32] r7[237u32] r7[238u32] r7[239u32] r7[240u32] r7[241u32] r7[242u32] r7[243u32] r7[244u32] r7[245u32] r7[246u32] r7[247u32] r7[248u32] r7[249u32] r7[250u32] r7[251u32] r7[252u32] r8[253u32] r8[254u32] r8[255u32] into r9 as [boolean; 256u32];\n    deserialize.bits.raw r9 ([boolean; 256u32]) into r10 ([u8; 32u32]);\n    cast 3u8 r6.nonce r6.local_domain r10 r0 r1 r2 into r11 as Message;\n    shr r11.nonce 24u32 into r12;\n    cast r12 into r13 as u8;\n    shr r11.nonce 16u32 into r14;\n    rem r14 256u32 into r15;\n    cast r15 into r16 as u8;\n    shr r11.nonce 8u32 into r17;\n    rem r17 256u32 into r18;\n    cast r18 into r19 as u8;\n    rem r11.nonce 256u32 into r20;\n    cast r20 into r21 as u8;\n    cast r13 r16 r19 r21 into r22 as [u8; 4u32];\n    shr r11.origin_domain 24u32 into r23;\n    cast r23 into r24 as u8;\n    shr r11.origin_domain 16u32 into r25;\n    rem r25 256u32 into r26;\n    cast r26 into r27 as u8;\n    shr r11.origin_domain 8u32 into r28;\n    rem r28 256u32 into r29;\n    cast r29 into r30 as u8;\n    rem r11.origin_domain 256u32 into r31;\n    cast r31 into r32 as u8;\n    cast r24 r27 r30 r32 into r33 as [u8; 4u32];\n    shr r11.destination_domain 24u32 into r34;\n    cast r34 into r35 as u8;\n    shr r11.destination_domain 16u32 into r36;\n    rem r36 256u32 into r37;\n    cast r37 into r38 as u8;\n    shr r11.destination_domain 8u32 into r39;\n    rem r39 256u32 into r40;\n    cast r40 into r41 as u8;\n    rem r11.destination_domain 256u32 into r42;\n    cast r42 into r43 as u8;\n    cast r35 r38 r41 r43 into r44 as [u8; 4u32];\n    serialize.bits.raw r11.body[0u32] (u128) into r45 ([boolean; 128u32]);\n    deserialize.bits.raw r45 ([boolean; 128u32]) into r46 ([u8; 16u32]);\n    serialize.bits.raw r11.body[1u32] (u128) into r47 ([boolean; 128u32]);\n    deserialize.bits.raw r47 ([boolean; 128u32]) into r48 ([u8; 16u32]);\n    serialize.bits.raw r11.body[2u32] (u128) into r49 ([boolean; 128u32]);\n    deserialize.bits.raw r49 ([boolean; 128u32]) into r50 ([u8; 16u32]);\n    serialize.bits.raw r11.body[3u32] (u128) into r51 ([boolean; 128u32]);\n    deserialize.bits.raw r51 ([boolean; 128u32]) into r52 ([u8; 16u32]);\n    serialize.bits.raw r11.body[4u32] (u128) into r53 ([boolean; 128u32]);\n    deserialize.bits.raw r53 ([boolean; 128u32]) into r54 ([u8; 16u32]);\n    serialize.bits.raw r11.body[5u32] (u128) into r55 ([boolean; 128u32]);\n    deserialize.bits.raw r55 ([boolean; 128u32]) into r56 ([u8; 16u32]);\n    serialize.bits.raw r11.body[6u32] (u128) into r57 ([boolean; 128u32]);\n    deserialize.bits.raw r57 ([boolean; 128u32]) into r58 ([u8; 16u32]);\n    serialize.bits.raw r11.body[7u32] (u128) into r59 ([boolean; 128u32]);\n    deserialize.bits.raw r59 ([boolean; 128u32]) into r60 ([u8; 16u32]);\n    cast r11.version r22[0u32] r22[1u32] r22[2u32] r22[3u32] r33[0u32] r33[1u32] r33[2u32] r33[3u32] r11.sender[0u32] r11.sender[1u32] r11.sender[2u32] r11.sender[3u32] r11.sender[4u32] r11.sender[5u32] r11.sender[6u32] r11.sender[7u32] r11.sender[8u32] r11.sender[9u32] r11.sender[10u32] r11.sender[11u32] r11.sender[12u32] r11.sender[13u32] r11.sender[14u32] r11.sender[15u32] r11.sender[16u32] r11.sender[17u32] r11.sender[18u32] r11.sender[19u32] r11.sender[20u32] r11.sender[21u32] r11.sender[22u32] r11.sender[23u32] r11.sender[24u32] r11.sender[25u32] r11.sender[26u32] r11.sender[27u32] r11.sender[28u32] r11.sender[29u32] r11.sender[30u32] r11.sender[31u32] r44[0u32] r44[1u32] r44[2u32] r44[3u32] r11.recipient[0u32] r11.recipient[1u32] r11.recipient[2u32] r11.recipient[3u32] r11.recipient[4u32] r11.recipient[5u32] r11.recipient[6u32] r11.recipient[7u32] r11.recipient[8u32] r11.recipient[9u32] r11.recipient[10u32] r11.recipient[11u32] r11.recipient[12u32] r11.recipient[13u32] r11.recipient[14u32] r11.recipient[15u32] r11.recipient[16u32] r11.recipient[17u32] r11.recipient[18u32] r11.recipient[19u32] r11.recipient[20u32] r11.recipient[21u32] r11.recipient[22u32] r11.recipient[23u32] r11.recipient[24u32] r11.recipient[25u32] r11.recipient[26u32] r11.recipient[27u32] r11.recipient[28u32] r11.recipient[29u32] r11.recipient[30u32] r11.recipient[31u32] r46[0u32] r46[1u32] r46[2u32] r46[3u32] r46[4u32] r46[5u32] r46[6u32] r46[7u32] r46[8u32] r46[9u32] r46[10u32] r46[11u32] r46[12u32] r46[13u32] r46[14u32] r46[15u32] r48[0u32] r48[1u32] r48[2u32] r48[3u32] r48[4u32] r48[5u32] r48[6u32] r48[7u32] r48[8u32] r48[9u32] r48[10u32] r48[11u32] r48[12u32] r48[13u32] r48[14u32] r48[15u32] r50[0u32] r50[1u32] r50[2u32] r50[3u32] r50[4u32] r50[5u32] r50[6u32] r50[7u32] r50[8u32] r50[9u32] r50[10u32] r50[11u32] r50[12u32] r50[13u32] r50[14u32] r50[15u32] r52[0u32] r52[1u32] r52[2u32] r52[3u32] r52[4u32] r52[5u32] r52[6u32] r52[7u32] r52[8u32] r52[9u32] r52[10u32] r52[11u32] r52[12u32] r52[13u32] r52[14u32] r52[15u32] r54[0u32] r54[1u32] r54[2u32] r54[3u32] r54[4u32] r54[5u32] r54[6u32] r54[7u32] r54[8u32] r54[9u32] r54[10u32] r54[11u32] r54[12u32] r54[13u32] r54[14u32] r54[15u32] r56[0u32] r56[1u32] r56[2u32] r56[3u32] r56[4u32] r56[5u32] r56[6u32] r56[7u32] r56[8u32] r56[9u32] r56[10u32] r56[11u32] r56[12u32] r56[13u32] r56[14u32] r56[15u32] r58[0u32] r58[1u32] r58[2u32] r58[3u32] r58[4u32] r58[5u32] r58[6u32] r58[7u32] r58[8u32] r58[9u32] r58[10u32] r58[11u32] r58[12u32] r58[13u32] r58[14u32] r58[15u32] r60[0u32] r60[1u32] r60[2u32] r60[3u32] r60[4u32] r60[5u32] r60[6u32] r60[7u32] r60[8u32] r60[9u32] r60[10u32] r60[11u32] r60[12u32] r60[13u32] r60[14u32] r60[15u32] into r61 as [u8; 205u32];\n    hash.keccak256.native.raw r61 into r62 as [boolean; 256u32];\n    deserialize.bits.raw r62 ([boolean; 256u32]) into r63 ([u128; 2u32]);\n    set r11 into dispatch_events[r6.nonce];\n    set r63 into dispatch_id_events[r6.nonce];\n    set r6.nonce into dispatch_event_index[block.height];\n    add r6.nonce 1u32 into r64;\n    cast r6.local_domain r64 r6.process_count r6.default_ism r6.default_hook r6.required_hook r6.dispatch_proxy r6.mailbox_owner into r65 as Mailbox;\n    set r65 into mailbox[true];\n\nconstructor:\n    assert.eq edition 0u16;\n`;
export const validator_announce = `program validator_announce.aleo;\n\nstruct EthAddress:\n    bytes as [u8; 20u32];\n\nstruct StorageLocationKey:\n    validator as [u8; 20u32];\n    index as u8;\n\nstruct ValidatorAnnounce:\n    mailbox as [u8; 32u32];\n    local_domain as u32;\n\nstruct HashKey:\n    hash as [u8; 32u32];\n\nmapping storage_sequences:\n    key as EthAddress.public;\n    value as u8.public;\n\nmapping storage_locations:\n    key as StorageLocationKey.public;\n    value as [u8; 480u32].public;\n\nmapping replay_protection:\n    key as HashKey.public;\n    value as boolean.public;\n\nmapping validator_announce:\n    key as boolean.public;\n    value as ValidatorAnnounce.public;\n\nfunction init:\n    input r0 as [u8; 32u32].private;\n    input r1 as u32.private;\n    async init r0 r1 into r2;\n    output r2 as validator_announce.aleo/init.future;\n\nfinalize init:\n    input r0 as [u8; 32u32].public;\n    input r1 as u32.public;\n    contains validator_announce[true] into r2;\n    not r2 into r3;\n    assert.eq r3 true;\n    cast r0 r1 into r4 as ValidatorAnnounce;\n    set r4 into validator_announce[true];\n\nfunction announce:\n    input r0 as [u8; 20u32].private;\n    input r1 as [u8; 480u32].private;\n    input r2 as [u8; 65u32].private;\n    async announce r0 r1 r2 into r3;\n    output r3 as validator_announce.aleo/announce.future;\n\nfinalize announce:\n    input r0 as [u8; 20u32].public;\n    input r1 as [u8; 480u32].public;\n    input r2 as [u8; 65u32].public;\n    contains validator_announce[true] into r3;\n    assert.eq r3 true;\n    get validator_announce[true] into r4;\n    cast r0[0u32] r0[1u32] r0[2u32] r0[3u32] r0[4u32] r0[5u32] r0[6u32] r0[7u32] r0[8u32] r0[9u32] r0[10u32] r0[11u32] r0[12u32] r0[13u32] r0[14u32] r0[15u32] r0[16u32] r0[17u32] r0[18u32] r0[19u32] r1[0u32] r1[1u32] r1[2u32] r1[3u32] r1[4u32] r1[5u32] r1[6u32] r1[7u32] r1[8u32] r1[9u32] r1[10u32] r1[11u32] r1[12u32] r1[13u32] r1[14u32] r1[15u32] r1[16u32] r1[17u32] r1[18u32] r1[19u32] r1[20u32] r1[21u32] r1[22u32] r1[23u32] r1[24u32] r1[25u32] r1[26u32] r1[27u32] r1[28u32] r1[29u32] r1[30u32] r1[31u32] r1[32u32] r1[33u32] r1[34u32] r1[35u32] r1[36u32] r1[37u32] r1[38u32] r1[39u32] r1[40u32] r1[41u32] r1[42u32] r1[43u32] r1[44u32] r1[45u32] r1[46u32] r1[47u32] r1[48u32] r1[49u32] r1[50u32] r1[51u32] r1[52u32] r1[53u32] r1[54u32] r1[55u32] r1[56u32] r1[57u32] r1[58u32] r1[59u32] r1[60u32] r1[61u32] r1[62u32] r1[63u32] r1[64u32] r1[65u32] r1[66u32] r1[67u32] r1[68u32] r1[69u32] r1[70u32] r1[71u32] r1[72u32] r1[73u32] r1[74u32] r1[75u32] r1[76u32] r1[77u32] r1[78u32] r1[79u32] r1[80u32] r1[81u32] r1[82u32] r1[83u32] r1[84u32] r1[85u32] r1[86u32] r1[87u32] r1[88u32] r1[89u32] r1[90u32] r1[91u32] r1[92u32] r1[93u32] r1[94u32] r1[95u32] r1[96u32] r1[97u32] r1[98u32] r1[99u32] r1[100u32] r1[101u32] r1[102u32] r1[103u32] r1[104u32] r1[105u32] r1[106u32] r1[107u32] r1[108u32] r1[109u32] r1[110u32] r1[111u32] r1[112u32] r1[113u32] r1[114u32] r1[115u32] r1[116u32] r1[117u32] r1[118u32] r1[119u32] r1[120u32] r1[121u32] r1[122u32] r1[123u32] r1[124u32] r1[125u32] r1[126u32] r1[127u32] r1[128u32] r1[129u32] r1[130u32] r1[131u32] r1[132u32] r1[133u32] r1[134u32] r1[135u32] r1[136u32] r1[137u32] r1[138u32] r1[139u32] r1[140u32] r1[141u32] r1[142u32] r1[143u32] r1[144u32] r1[145u32] r1[146u32] r1[147u32] r1[148u32] r1[149u32] r1[150u32] r1[151u32] r1[152u32] r1[153u32] r1[154u32] r1[155u32] r1[156u32] r1[157u32] r1[158u32] r1[159u32] r1[160u32] r1[161u32] r1[162u32] r1[163u32] r1[164u32] r1[165u32] r1[166u32] r1[167u32] r1[168u32] r1[169u32] r1[170u32] r1[171u32] r1[172u32] r1[173u32] r1[174u32] r1[175u32] r1[176u32] r1[177u32] r1[178u32] r1[179u32] into r5 as [u8; 200u32];\n    hash.keccak256.native.raw r5 into r6 as [boolean; 256u32];\n    deserialize.bits.raw r6 ([boolean; 256u32]) into r7 ([u8; 32u32]);\n    cast r7 into r8 as HashKey;\n    contains replay_protection[r8] into r9;\n    not r9 into r10;\n    assert.eq r10 true;\n    cast r0 into r11 as EthAddress;\n    get.or_use storage_sequences[r11] 0u8 into r12;\n    shr r4.local_domain 24u32 into r13;\n    cast r13 into r14 as u8;\n    shr r4.local_domain 16u32 into r15;\n    rem r15 256u32 into r16;\n    cast r16 into r17 as u8;\n    shr r4.local_domain 8u32 into r18;\n    rem r18 256u32 into r19;\n    cast r19 into r20 as u8;\n    rem r4.local_domain 256u32 into r21;\n    cast r21 into r22 as u8;\n    cast r14 r17 r20 r22 r4.mailbox[0u32] r4.mailbox[1u32] r4.mailbox[2u32] r4.mailbox[3u32] r4.mailbox[4u32] r4.mailbox[5u32] r4.mailbox[6u32] r4.mailbox[7u32] r4.mailbox[8u32] r4.mailbox[9u32] r4.mailbox[10u32] r4.mailbox[11u32] r4.mailbox[12u32] r4.mailbox[13u32] r4.mailbox[14u32] r4.mailbox[15u32] r4.mailbox[16u32] r4.mailbox[17u32] r4.mailbox[18u32] r4.mailbox[19u32] r4.mailbox[20u32] r4.mailbox[21u32] r4.mailbox[22u32] r4.mailbox[23u32] r4.mailbox[24u32] r4.mailbox[25u32] r4.mailbox[26u32] r4.mailbox[27u32] r4.mailbox[28u32] r4.mailbox[29u32] r4.mailbox[30u32] r4.mailbox[31u32] 72u8 89u8 80u8 69u8 82u8 76u8 65u8 78u8 69u8 95u8 65u8 78u8 78u8 79u8 85u8 78u8 67u8 69u8 77u8 69u8 78u8 84u8 into r23 as [u8; 58u32];\n    hash.keccak256.native.raw r23 into r24 as [boolean; 256u32];\n    deserialize.bits.raw r24 ([boolean; 256u32]) into r25 ([u8; 32u32]);\n    cast r25[0u32] r25[1u32] r25[2u32] r25[3u32] r25[4u32] r25[5u32] r25[6u32] r25[7u32] r25[8u32] r25[9u32] r25[10u32] r25[11u32] r25[12u32] r25[13u32] r25[14u32] r25[15u32] r25[16u32] r25[17u32] r25[18u32] r25[19u32] r25[20u32] r25[21u32] r25[22u32] r25[23u32] r25[24u32] r25[25u32] r25[26u32] r25[27u32] r25[28u32] r25[29u32] r25[30u32] r25[31u32] r1[0u32] r1[1u32] r1[2u32] r1[3u32] r1[4u32] r1[5u32] r1[6u32] r1[7u32] r1[8u32] r1[9u32] r1[10u32] r1[11u32] r1[12u32] r1[13u32] r1[14u32] r1[15u32] r1[16u32] r1[17u32] r1[18u32] r1[19u32] r1[20u32] r1[21u32] r1[22u32] r1[23u32] r1[24u32] r1[25u32] r1[26u32] r1[27u32] r1[28u32] r1[29u32] r1[30u32] r1[31u32] r1[32u32] r1[33u32] r1[34u32] r1[35u32] r1[36u32] r1[37u32] r1[38u32] r1[39u32] r1[40u32] r1[41u32] r1[42u32] r1[43u32] r1[44u32] r1[45u32] r1[46u32] r1[47u32] r1[48u32] r1[49u32] r1[50u32] r1[51u32] r1[52u32] r1[53u32] r1[54u32] r1[55u32] r1[56u32] r1[57u32] r1[58u32] r1[59u32] r1[60u32] r1[61u32] r1[62u32] r1[63u32] r1[64u32] r1[65u32] r1[66u32] r1[67u32] r1[68u32] r1[69u32] r1[70u32] r1[71u32] r1[72u32] r1[73u32] r1[74u32] r1[75u32] r1[76u32] r1[77u32] r1[78u32] r1[79u32] r1[80u32] r1[81u32] r1[82u32] r1[83u32] r1[84u32] r1[85u32] r1[86u32] r1[87u32] r1[88u32] r1[89u32] r1[90u32] r1[91u32] r1[92u32] r1[93u32] r1[94u32] r1[95u32] r1[96u32] r1[97u32] r1[98u32] r1[99u32] r1[100u32] r1[101u32] r1[102u32] r1[103u32] r1[104u32] r1[105u32] r1[106u32] r1[107u32] r1[108u32] r1[109u32] r1[110u32] r1[111u32] r1[112u32] r1[113u32] r1[114u32] r1[115u32] r1[116u32] r1[117u32] r1[118u32] r1[119u32] r1[120u32] r1[121u32] r1[122u32] r1[123u32] r1[124u32] r1[125u32] r1[126u32] r1[127u32] r1[128u32] r1[129u32] r1[130u32] r1[131u32] r1[132u32] r1[133u32] r1[134u32] r1[135u32] r1[136u32] r1[137u32] r1[138u32] r1[139u32] r1[140u32] r1[141u32] r1[142u32] r1[143u32] r1[144u32] r1[145u32] r1[146u32] r1[147u32] r1[148u32] r1[149u32] r1[150u32] r1[151u32] r1[152u32] r1[153u32] r1[154u32] r1[155u32] r1[156u32] r1[157u32] r1[158u32] r1[159u32] r1[160u32] r1[161u32] r1[162u32] r1[163u32] r1[164u32] r1[165u32] r1[166u32] r1[167u32] r1[168u32] r1[169u32] r1[170u32] r1[171u32] r1[172u32] r1[173u32] r1[174u32] r1[175u32] r1[176u32] r1[177u32] r1[178u32] r1[179u32] r1[180u32] r1[181u32] r1[182u32] r1[183u32] r1[184u32] r1[185u32] r1[186u32] r1[187u32] r1[188u32] r1[189u32] r1[190u32] r1[191u32] r1[192u32] r1[193u32] r1[194u32] r1[195u32] r1[196u32] r1[197u32] r1[198u32] r1[199u32] r1[200u32] r1[201u32] r1[202u32] r1[203u32] r1[204u32] r1[205u32] r1[206u32] r1[207u32] r1[208u32] r1[209u32] r1[210u32] r1[211u32] r1[212u32] r1[213u32] r1[214u32] r1[215u32] r1[216u32] r1[217u32] r1[218u32] r1[219u32] r1[220u32] r1[221u32] r1[222u32] r1[223u32] r1[224u32] r1[225u32] r1[226u32] r1[227u32] r1[228u32] r1[229u32] r1[230u32] r1[231u32] r1[232u32] r1[233u32] r1[234u32] r1[235u32] r1[236u32] r1[237u32] r1[238u32] r1[239u32] r1[240u32] r1[241u32] r1[242u32] r1[243u32] r1[244u32] r1[245u32] r1[246u32] r1[247u32] r1[248u32] r1[249u32] r1[250u32] r1[251u32] r1[252u32] r1[253u32] r1[254u32] r1[255u32] r1[256u32] r1[257u32] r1[258u32] r1[259u32] r1[260u32] r1[261u32] r1[262u32] r1[263u32] r1[264u32] r1[265u32] r1[266u32] r1[267u32] r1[268u32] r1[269u32] r1[270u32] r1[271u32] r1[272u32] r1[273u32] r1[274u32] r1[275u32] r1[276u32] r1[277u32] r1[278u32] r1[279u32] r1[280u32] r1[281u32] r1[282u32] r1[283u32] r1[284u32] r1[285u32] r1[286u32] r1[287u32] r1[288u32] r1[289u32] r1[290u32] r1[291u32] r1[292u32] r1[293u32] r1[294u32] r1[295u32] r1[296u32] r1[297u32] r1[298u32] r1[299u32] r1[300u32] r1[301u32] r1[302u32] r1[303u32] r1[304u32] r1[305u32] r1[306u32] r1[307u32] r1[308u32] r1[309u32] r1[310u32] r1[311u32] r1[312u32] r1[313u32] r1[314u32] r1[315u32] r1[316u32] r1[317u32] r1[318u32] r1[319u32] r1[320u32] r1[321u32] r1[322u32] r1[323u32] r1[324u32] r1[325u32] r1[326u32] r1[327u32] r1[328u32] r1[329u32] r1[330u32] r1[331u32] r1[332u32] r1[333u32] r1[334u32] r1[335u32] r1[336u32] r1[337u32] r1[338u32] r1[339u32] r1[340u32] r1[341u32] r1[342u32] r1[343u32] r1[344u32] r1[345u32] r1[346u32] r1[347u32] r1[348u32] r1[349u32] r1[350u32] r1[351u32] r1[352u32] r1[353u32] r1[354u32] r1[355u32] r1[356u32] r1[357u32] r1[358u32] r1[359u32] r1[360u32] r1[361u32] r1[362u32] r1[363u32] r1[364u32] r1[365u32] r1[366u32] r1[367u32] r1[368u32] r1[369u32] r1[370u32] r1[371u32] r1[372u32] r1[373u32] r1[374u32] r1[375u32] r1[376u32] r1[377u32] r1[378u32] r1[379u32] r1[380u32] r1[381u32] r1[382u32] r1[383u32] r1[384u32] r1[385u32] r1[386u32] r1[387u32] r1[388u32] r1[389u32] r1[390u32] r1[391u32] r1[392u32] r1[393u32] r1[394u32] r1[395u32] r1[396u32] r1[397u32] r1[398u32] r1[399u32] r1[400u32] r1[401u32] r1[402u32] r1[403u32] r1[404u32] r1[405u32] r1[406u32] r1[407u32] r1[408u32] r1[409u32] r1[410u32] r1[411u32] r1[412u32] r1[413u32] r1[414u32] r1[415u32] r1[416u32] r1[417u32] r1[418u32] r1[419u32] r1[420u32] r1[421u32] r1[422u32] r1[423u32] r1[424u32] r1[425u32] r1[426u32] r1[427u32] r1[428u32] r1[429u32] r1[430u32] r1[431u32] r1[432u32] r1[433u32] r1[434u32] r1[435u32] r1[436u32] r1[437u32] r1[438u32] r1[439u32] r1[440u32] r1[441u32] r1[442u32] r1[443u32] r1[444u32] r1[445u32] r1[446u32] r1[447u32] r1[448u32] r1[449u32] r1[450u32] r1[451u32] r1[452u32] r1[453u32] r1[454u32] r1[455u32] r1[456u32] r1[457u32] r1[458u32] r1[459u32] r1[460u32] r1[461u32] r1[462u32] r1[463u32] r1[464u32] r1[465u32] r1[466u32] r1[467u32] r1[468u32] r1[469u32] r1[470u32] r1[471u32] r1[472u32] r1[473u32] r1[474u32] r1[475u32] r1[476u32] r1[477u32] r1[478u32] r1[479u32] into r26 as [u8; 512u32];\n    hash.keccak256.native.raw r26 into r27 as [boolean; 256u32];\n    deserialize.bits.raw r27 ([boolean; 256u32]) into r28 ([u8; 32u32]);\n    cast 25u8 69u8 116u8 104u8 101u8 114u8 101u8 117u8 109u8 32u8 83u8 105u8 103u8 110u8 101u8 100u8 32u8 77u8 101u8 115u8 115u8 97u8 103u8 101u8 58u8 10u8 51u8 50u8 r28[0u32] r28[1u32] r28[2u32] r28[3u32] r28[4u32] r28[5u32] r28[6u32] r28[7u32] r28[8u32] r28[9u32] r28[10u32] r28[11u32] r28[12u32] r28[13u32] r28[14u32] r28[15u32] r28[16u32] r28[17u32] r28[18u32] r28[19u32] r28[20u32] r28[21u32] r28[22u32] r28[23u32] r28[24u32] r28[25u32] r28[26u32] r28[27u32] r28[28u32] r28[29u32] r28[30u32] r28[31u32] into r29 as [u8; 60u32];\n    hash.keccak256.native.raw r29 into r30 as [boolean; 256u32];\n    deserialize.bits.raw r30 ([boolean; 256u32]) into r31 ([u8; 32u32]);\n    ecdsa.verify.digest.eth r2 r0 r31 into r32;\n    assert.eq r32 true;\n    cast r0 r12 into r33 as StorageLocationKey;\n    add r12 1u8 into r34;\n    set true into replay_protection[r8];\n    set r1 into storage_locations[r33];\n    set r34 into storage_sequences[r11];\n\nconstructor:\n    assert.eq edition 0u16;\n`;

export const programRegistry: Record<string, string> = {
  dispatch_proxy,
  credits,
  hook_manager,
  ism_manager,
  mailbox,
  validator_announce,
};

export function loadProgramsInDeployOrder(programName: string): Program[] {
  const visited = new Set<string>();
  const programs: Program[] = [];

  function visit(p: string) {
    if (visited.has(p)) return;
    visited.add(p);

    const code = programRegistry[p];
    if (!code) throw new Error(`Program ${p} not found`);

    const program = Program.fromString(code);

    program
      .getImports()
      .map((dep) => dep.replace('.aleo', ''))
      .forEach((dep) => visit(dep));

    programs.push(program);
  }

  visit(programName);
  return programs;
}
