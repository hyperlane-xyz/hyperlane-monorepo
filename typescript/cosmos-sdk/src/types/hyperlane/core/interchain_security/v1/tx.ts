// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/interchain_security/v1/tx.proto

/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

export const protobufPackage = 'hyperlane.core.interchain_security.v1';

/** MsgCreateMessageIdMultisigIsm ... */
export interface MsgCreateMessageIdMultisigIsm {
  /** creator is the message sender. */
  creator: string;
  /**
   * validators
   * these are 20 byte long ethereum style addresses
   */
  validators: string[];
  /** threshold ... */
  threshold: number;
}

/** MsgCreateMessageIdMultisigIsmResponse ... */
export interface MsgCreateMessageIdMultisigIsmResponse {
  id: string;
}

/** MsgCreateMultisigIsm ... */
export interface MsgCreateMerkleRootMultisigIsm {
  /** creator is the message sender. */
  creator: string;
  /**
   * validators
   * these are 20 byte long ethereum style addresses
   */
  validators: string[];
  /** threshold ... */
  threshold: number;
}

/** MsgCreateMultisigIsmResponse ... */
export interface MsgCreateMerkleRootMultisigIsmResponse {
  id: string;
}

/** MsgCreateNoopIsm ... */
export interface MsgCreateNoopIsm {
  /** creator is the message sender. */
  creator: string;
}

/** MsgCreateNoopIsmResponse ... */
export interface MsgCreateNoopIsmResponse {
  id: string;
}

/** MsgAnnounceValidator ... */
export interface MsgAnnounceValidator {
  /** validator ... */
  validator: string;
  /** storage_location ... */
  storage_location: string;
  /** signature ... */
  signature: string;
  /** mailbox_id ... */
  mailbox_id: string;
  /** creator ... */
  creator: string;
}

/** MsgAnnounceValidatorResponse ... */
export interface MsgAnnounceValidatorResponse {}

function createBaseMsgCreateMessageIdMultisigIsm(): MsgCreateMessageIdMultisigIsm {
  return { creator: '', validators: [], threshold: 0 };
}

export const MsgCreateMessageIdMultisigIsm = {
  encode(
    message: MsgCreateMessageIdMultisigIsm,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.creator !== '') {
      writer.uint32(10).string(message.creator);
    }
    for (const v of message.validators) {
      writer.uint32(18).string(v!);
    }
    if (message.threshold !== 0) {
      writer.uint32(24).uint32(message.threshold);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateMessageIdMultisigIsm {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMessageIdMultisigIsm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validators.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.threshold = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateMessageIdMultisigIsm {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
      validators: globalThis.Array.isArray(object?.validators)
        ? object.validators.map((e: any) => globalThis.String(e))
        : [],
      threshold: isSet(object.threshold)
        ? globalThis.Number(object.threshold)
        : 0,
    };
  },

  toJSON(message: MsgCreateMessageIdMultisigIsm): unknown {
    const obj: any = {};
    if (message.creator !== '') {
      obj.creator = message.creator;
    }
    if (message.validators?.length) {
      obj.validators = message.validators;
    }
    if (message.threshold !== 0) {
      obj.threshold = Math.round(message.threshold);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateMessageIdMultisigIsm>, I>>(
    base?: I,
  ): MsgCreateMessageIdMultisigIsm {
    return MsgCreateMessageIdMultisigIsm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateMessageIdMultisigIsm>, I>>(
    object: I,
  ): MsgCreateMessageIdMultisigIsm {
    const message = createBaseMsgCreateMessageIdMultisigIsm();
    message.creator = object.creator ?? '';
    message.validators = object.validators?.map((e) => e) || [];
    message.threshold = object.threshold ?? 0;
    return message;
  },
};

function createBaseMsgCreateMessageIdMultisigIsmResponse(): MsgCreateMessageIdMultisigIsmResponse {
  return { id: '' };
}

export const MsgCreateMessageIdMultisigIsmResponse = {
  encode(
    message: MsgCreateMessageIdMultisigIsmResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateMessageIdMultisigIsmResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMessageIdMultisigIsmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateMessageIdMultisigIsmResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: MsgCreateMessageIdMultisigIsmResponse): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<MsgCreateMessageIdMultisigIsmResponse>, I>,
  >(base?: I): MsgCreateMessageIdMultisigIsmResponse {
    return MsgCreateMessageIdMultisigIsmResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<MsgCreateMessageIdMultisigIsmResponse>, I>,
  >(object: I): MsgCreateMessageIdMultisigIsmResponse {
    const message = createBaseMsgCreateMessageIdMultisigIsmResponse();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseMsgCreateMerkleRootMultisigIsm(): MsgCreateMerkleRootMultisigIsm {
  return { creator: '', validators: [], threshold: 0 };
}

export const MsgCreateMerkleRootMultisigIsm = {
  encode(
    message: MsgCreateMerkleRootMultisigIsm,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.creator !== '') {
      writer.uint32(10).string(message.creator);
    }
    for (const v of message.validators) {
      writer.uint32(18).string(v!);
    }
    if (message.threshold !== 0) {
      writer.uint32(24).uint32(message.threshold);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateMerkleRootMultisigIsm {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMerkleRootMultisigIsm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validators.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.threshold = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateMerkleRootMultisigIsm {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
      validators: globalThis.Array.isArray(object?.validators)
        ? object.validators.map((e: any) => globalThis.String(e))
        : [],
      threshold: isSet(object.threshold)
        ? globalThis.Number(object.threshold)
        : 0,
    };
  },

  toJSON(message: MsgCreateMerkleRootMultisigIsm): unknown {
    const obj: any = {};
    if (message.creator !== '') {
      obj.creator = message.creator;
    }
    if (message.validators?.length) {
      obj.validators = message.validators;
    }
    if (message.threshold !== 0) {
      obj.threshold = Math.round(message.threshold);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateMerkleRootMultisigIsm>, I>>(
    base?: I,
  ): MsgCreateMerkleRootMultisigIsm {
    return MsgCreateMerkleRootMultisigIsm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateMerkleRootMultisigIsm>, I>>(
    object: I,
  ): MsgCreateMerkleRootMultisigIsm {
    const message = createBaseMsgCreateMerkleRootMultisigIsm();
    message.creator = object.creator ?? '';
    message.validators = object.validators?.map((e) => e) || [];
    message.threshold = object.threshold ?? 0;
    return message;
  },
};

function createBaseMsgCreateMerkleRootMultisigIsmResponse(): MsgCreateMerkleRootMultisigIsmResponse {
  return { id: '' };
}

export const MsgCreateMerkleRootMultisigIsmResponse = {
  encode(
    message: MsgCreateMerkleRootMultisigIsmResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateMerkleRootMultisigIsmResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMerkleRootMultisigIsmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateMerkleRootMultisigIsmResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: MsgCreateMerkleRootMultisigIsmResponse): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<MsgCreateMerkleRootMultisigIsmResponse>, I>,
  >(base?: I): MsgCreateMerkleRootMultisigIsmResponse {
    return MsgCreateMerkleRootMultisigIsmResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<MsgCreateMerkleRootMultisigIsmResponse>, I>,
  >(object: I): MsgCreateMerkleRootMultisigIsmResponse {
    const message = createBaseMsgCreateMerkleRootMultisigIsmResponse();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseMsgCreateNoopIsm(): MsgCreateNoopIsm {
  return { creator: '' };
}

export const MsgCreateNoopIsm = {
  encode(
    message: MsgCreateNoopIsm,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.creator !== '') {
      writer.uint32(10).string(message.creator);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateNoopIsm {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNoopIsm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateNoopIsm {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
    };
  },

  toJSON(message: MsgCreateNoopIsm): unknown {
    const obj: any = {};
    if (message.creator !== '') {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateNoopIsm>, I>>(
    base?: I,
  ): MsgCreateNoopIsm {
    return MsgCreateNoopIsm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateNoopIsm>, I>>(
    object: I,
  ): MsgCreateNoopIsm {
    const message = createBaseMsgCreateNoopIsm();
    message.creator = object.creator ?? '';
    return message;
  },
};

function createBaseMsgCreateNoopIsmResponse(): MsgCreateNoopIsmResponse {
  return { id: '' };
}

export const MsgCreateNoopIsmResponse = {
  encode(
    message: MsgCreateNoopIsmResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateNoopIsmResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNoopIsmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateNoopIsmResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: MsgCreateNoopIsmResponse): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateNoopIsmResponse>, I>>(
    base?: I,
  ): MsgCreateNoopIsmResponse {
    return MsgCreateNoopIsmResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateNoopIsmResponse>, I>>(
    object: I,
  ): MsgCreateNoopIsmResponse {
    const message = createBaseMsgCreateNoopIsmResponse();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseMsgAnnounceValidator(): MsgAnnounceValidator {
  return {
    validator: '',
    storage_location: '',
    signature: '',
    mailbox_id: '',
    creator: '',
  };
}

export const MsgAnnounceValidator = {
  encode(
    message: MsgAnnounceValidator,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.validator !== '') {
      writer.uint32(10).string(message.validator);
    }
    if (message.storage_location !== '') {
      writer.uint32(18).string(message.storage_location);
    }
    if (message.signature !== '') {
      writer.uint32(26).string(message.signature);
    }
    if (message.mailbox_id !== '') {
      writer.uint32(34).string(message.mailbox_id);
    }
    if (message.creator !== '') {
      writer.uint32(42).string(message.creator);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgAnnounceValidator {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAnnounceValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.storage_location = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.mailbox_id = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.creator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAnnounceValidator {
    return {
      validator: isSet(object.validator)
        ? globalThis.String(object.validator)
        : '',
      storage_location: isSet(object.storage_location)
        ? globalThis.String(object.storage_location)
        : '',
      signature: isSet(object.signature)
        ? globalThis.String(object.signature)
        : '',
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
      creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
    };
  },

  toJSON(message: MsgAnnounceValidator): unknown {
    const obj: any = {};
    if (message.validator !== '') {
      obj.validator = message.validator;
    }
    if (message.storage_location !== '') {
      obj.storage_location = message.storage_location;
    }
    if (message.signature !== '') {
      obj.signature = message.signature;
    }
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.creator !== '') {
      obj.creator = message.creator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAnnounceValidator>, I>>(
    base?: I,
  ): MsgAnnounceValidator {
    return MsgAnnounceValidator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAnnounceValidator>, I>>(
    object: I,
  ): MsgAnnounceValidator {
    const message = createBaseMsgAnnounceValidator();
    message.validator = object.validator ?? '';
    message.storage_location = object.storage_location ?? '';
    message.signature = object.signature ?? '';
    message.mailbox_id = object.mailbox_id ?? '';
    message.creator = object.creator ?? '';
    return message;
  },
};

function createBaseMsgAnnounceValidatorResponse(): MsgAnnounceValidatorResponse {
  return {};
}

export const MsgAnnounceValidatorResponse = {
  encode(
    _: MsgAnnounceValidatorResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgAnnounceValidatorResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAnnounceValidatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAnnounceValidatorResponse {
    return {};
  },

  toJSON(_: MsgAnnounceValidatorResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAnnounceValidatorResponse>, I>>(
    base?: I,
  ): MsgAnnounceValidatorResponse {
    return MsgAnnounceValidatorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAnnounceValidatorResponse>, I>>(
    _: I,
  ): MsgAnnounceValidatorResponse {
    const message = createBaseMsgAnnounceValidatorResponse();
    return message;
  },
};

/** Msg defines the module Msg service. */
export interface Msg {
  /** CreateMessageIdMultisigIsm ... */
  CreateMessageIdMultisigIsm(
    request: MsgCreateMessageIdMultisigIsm,
  ): Promise<MsgCreateMessageIdMultisigIsmResponse>;
  /** CreateMerkleRootMultisigIsm ... */
  CreateMerkleRootMultisigIsm(
    request: MsgCreateMerkleRootMultisigIsm,
  ): Promise<MsgCreateMerkleRootMultisigIsmResponse>;
  /** CreateNoopIsm ... */
  CreateNoopIsm(request: MsgCreateNoopIsm): Promise<MsgCreateNoopIsmResponse>;
  /** AnnounceValidator ... */
  AnnounceValidator(
    request: MsgAnnounceValidator,
  ): Promise<MsgAnnounceValidatorResponse>;
}

export const MsgServiceName = 'hyperlane.core.interchain_security.v1.Msg';
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateMessageIdMultisigIsm =
      this.CreateMessageIdMultisigIsm.bind(this);
    this.CreateMerkleRootMultisigIsm =
      this.CreateMerkleRootMultisigIsm.bind(this);
    this.CreateNoopIsm = this.CreateNoopIsm.bind(this);
    this.AnnounceValidator = this.AnnounceValidator.bind(this);
  }
  CreateMessageIdMultisigIsm(
    request: MsgCreateMessageIdMultisigIsm,
  ): Promise<MsgCreateMessageIdMultisigIsmResponse> {
    const data = MsgCreateMessageIdMultisigIsm.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateMessageIdMultisigIsm',
      data,
    );
    return promise.then((data) =>
      MsgCreateMessageIdMultisigIsmResponse.decode(_m0.Reader.create(data)),
    );
  }

  CreateMerkleRootMultisigIsm(
    request: MsgCreateMerkleRootMultisigIsm,
  ): Promise<MsgCreateMerkleRootMultisigIsmResponse> {
    const data = MsgCreateMerkleRootMultisigIsm.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateMerkleRootMultisigIsm',
      data,
    );
    return promise.then((data) =>
      MsgCreateMerkleRootMultisigIsmResponse.decode(_m0.Reader.create(data)),
    );
  }

  CreateNoopIsm(request: MsgCreateNoopIsm): Promise<MsgCreateNoopIsmResponse> {
    const data = MsgCreateNoopIsm.encode(request).finish();
    const promise = this.rpc.request(this.service, 'CreateNoopIsm', data);
    return promise.then((data) =>
      MsgCreateNoopIsmResponse.decode(_m0.Reader.create(data)),
    );
  }

  AnnounceValidator(
    request: MsgAnnounceValidator,
  ): Promise<MsgAnnounceValidatorResponse> {
    const data = MsgAnnounceValidator.encode(request).finish();
    const promise = this.rpc.request(this.service, 'AnnounceValidator', data);
    return promise.then((data) =>
      MsgAnnounceValidatorResponse.decode(_m0.Reader.create(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
