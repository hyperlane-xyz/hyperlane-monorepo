// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/post_dispatch/v1/tx.proto

/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

import { Coin } from '../../../../cosmos/base/v1beta1/coin.js';

import { DestinationGasConfig } from './types.js';

export const protobufPackage = 'hyperlane.core.post_dispatch.v1';

/** MsgCreateIgp ... */
export interface MsgCreateIgp {
  /** owner is the message sender. */
  owner: string;
  /** denom */
  denom: string;
}

/** MsgCreateIgpResponse ... */
export interface MsgCreateIgpResponse {
  id: string;
}

/** MsgSetIgpOwner ... */
export interface MsgSetIgpOwner {
  /** owner is the message sender. */
  owner: string;
  /** igp_id */
  igp_id: string;
  /** new_owner */
  new_owner: string;
}

/** MsgCreateIgpResponse ... */
export interface MsgSetIgpOwnerResponse {}

/** MsgSetDestinationGasConfig ... */
export interface MsgSetDestinationGasConfig {
  /** owner ... */
  owner: string;
  /** igp_id ... */
  igp_id: string;
  /** destination_gas_config ... */
  destination_gas_config?: DestinationGasConfig | undefined;
}

/** MsgSetDestinationGasConfigResponse ... */
export interface MsgSetDestinationGasConfigResponse {}

/** MsgPayForGas ... */
export interface MsgPayForGas {
  /** sender ... */
  sender: string;
  /** igp_id ... */
  igp_id: string;
  /** message_id ... */
  message_id: string;
  /** destination_domain ... */
  destination_domain: number;
  /** gas_limit ... */
  gas_limit: string;
  /** amount ... */
  amount?: Coin | undefined;
}

/** MsgPayForGasResponse ... */
export interface MsgPayForGasResponse {}

/** MsgClaim ... */
export interface MsgClaim {
  /** sender ... */
  sender: string;
  /** igp_id ... */
  igp_id: string;
}

/** MsgClaimResponse ... */
export interface MsgClaimResponse {}

/** MsgMerkleTreeHook ... */
export interface MsgCreateMerkleTreeHook {
  /** sender ... */
  owner: string;
  mailbox_id: string;
}

/** MsgCreateMerkleTreeHookResponse ... */
export interface MsgCreateMerkleTreeHookResponse {
  id: string;
}

/** MsgMerkleTreeHook ... */
export interface MsgCreateNoopHook {
  /** sender ... */
  owner: string;
}

/** MsgCreateMerkleTreeHookResponse ... */
export interface MsgCreateNoopHookResponse {
  id: string;
}

function createBaseMsgCreateIgp(): MsgCreateIgp {
  return { owner: '', denom: '' };
}

export const MsgCreateIgp = {
  encode(
    message: MsgCreateIgp,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.denom !== '') {
      writer.uint32(18).string(message.denom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateIgp {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateIgp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateIgp {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      denom: isSet(object.denom) ? globalThis.String(object.denom) : '',
    };
  },

  toJSON(message: MsgCreateIgp): unknown {
    const obj: any = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.denom !== '') {
      obj.denom = message.denom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateIgp>, I>>(
    base?: I,
  ): MsgCreateIgp {
    return MsgCreateIgp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateIgp>, I>>(
    object: I,
  ): MsgCreateIgp {
    const message = createBaseMsgCreateIgp();
    message.owner = object.owner ?? '';
    message.denom = object.denom ?? '';
    return message;
  },
};

function createBaseMsgCreateIgpResponse(): MsgCreateIgpResponse {
  return { id: '' };
}

export const MsgCreateIgpResponse = {
  encode(
    message: MsgCreateIgpResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateIgpResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateIgpResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateIgpResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: MsgCreateIgpResponse): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateIgpResponse>, I>>(
    base?: I,
  ): MsgCreateIgpResponse {
    return MsgCreateIgpResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateIgpResponse>, I>>(
    object: I,
  ): MsgCreateIgpResponse {
    const message = createBaseMsgCreateIgpResponse();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseMsgSetIgpOwner(): MsgSetIgpOwner {
  return { owner: '', igp_id: '', new_owner: '' };
}

export const MsgSetIgpOwner = {
  encode(
    message: MsgSetIgpOwner,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.igp_id !== '') {
      writer.uint32(18).string(message.igp_id);
    }
    if (message.new_owner !== '') {
      writer.uint32(26).string(message.new_owner);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetIgpOwner {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetIgpOwner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.igp_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.new_owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetIgpOwner {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
      new_owner: isSet(object.new_owner)
        ? globalThis.String(object.new_owner)
        : '',
    };
  },

  toJSON(message: MsgSetIgpOwner): unknown {
    const obj: any = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    if (message.new_owner !== '') {
      obj.new_owner = message.new_owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetIgpOwner>, I>>(
    base?: I,
  ): MsgSetIgpOwner {
    return MsgSetIgpOwner.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetIgpOwner>, I>>(
    object: I,
  ): MsgSetIgpOwner {
    const message = createBaseMsgSetIgpOwner();
    message.owner = object.owner ?? '';
    message.igp_id = object.igp_id ?? '';
    message.new_owner = object.new_owner ?? '';
    return message;
  },
};

function createBaseMsgSetIgpOwnerResponse(): MsgSetIgpOwnerResponse {
  return {};
}

export const MsgSetIgpOwnerResponse = {
  encode(
    _: MsgSetIgpOwnerResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgSetIgpOwnerResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetIgpOwnerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetIgpOwnerResponse {
    return {};
  },

  toJSON(_: MsgSetIgpOwnerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetIgpOwnerResponse>, I>>(
    base?: I,
  ): MsgSetIgpOwnerResponse {
    return MsgSetIgpOwnerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetIgpOwnerResponse>, I>>(
    _: I,
  ): MsgSetIgpOwnerResponse {
    const message = createBaseMsgSetIgpOwnerResponse();
    return message;
  },
};

function createBaseMsgSetDestinationGasConfig(): MsgSetDestinationGasConfig {
  return { owner: '', igp_id: '', destination_gas_config: undefined };
}

export const MsgSetDestinationGasConfig = {
  encode(
    message: MsgSetDestinationGasConfig,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.igp_id !== '') {
      writer.uint32(18).string(message.igp_id);
    }
    if (message.destination_gas_config !== undefined) {
      DestinationGasConfig.encode(
        message.destination_gas_config,
        writer.uint32(26).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgSetDestinationGasConfig {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetDestinationGasConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.igp_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.destination_gas_config = DestinationGasConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetDestinationGasConfig {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
      destination_gas_config: isSet(object.destination_gas_config)
        ? DestinationGasConfig.fromJSON(object.destination_gas_config)
        : undefined,
    };
  },

  toJSON(message: MsgSetDestinationGasConfig): unknown {
    const obj: any = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    if (message.destination_gas_config !== undefined) {
      obj.destination_gas_config = DestinationGasConfig.toJSON(
        message.destination_gas_config,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetDestinationGasConfig>, I>>(
    base?: I,
  ): MsgSetDestinationGasConfig {
    return MsgSetDestinationGasConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetDestinationGasConfig>, I>>(
    object: I,
  ): MsgSetDestinationGasConfig {
    const message = createBaseMsgSetDestinationGasConfig();
    message.owner = object.owner ?? '';
    message.igp_id = object.igp_id ?? '';
    message.destination_gas_config =
      object.destination_gas_config !== undefined &&
      object.destination_gas_config !== null
        ? DestinationGasConfig.fromPartial(object.destination_gas_config)
        : undefined;
    return message;
  },
};

function createBaseMsgSetDestinationGasConfigResponse(): MsgSetDestinationGasConfigResponse {
  return {};
}

export const MsgSetDestinationGasConfigResponse = {
  encode(
    _: MsgSetDestinationGasConfigResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgSetDestinationGasConfigResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetDestinationGasConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetDestinationGasConfigResponse {
    return {};
  },

  toJSON(_: MsgSetDestinationGasConfigResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetDestinationGasConfigResponse>, I>>(
    base?: I,
  ): MsgSetDestinationGasConfigResponse {
    return MsgSetDestinationGasConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<MsgSetDestinationGasConfigResponse>, I>,
  >(_: I): MsgSetDestinationGasConfigResponse {
    const message = createBaseMsgSetDestinationGasConfigResponse();
    return message;
  },
};

function createBaseMsgPayForGas(): MsgPayForGas {
  return {
    sender: '',
    igp_id: '',
    message_id: '',
    destination_domain: 0,
    gas_limit: '',
    amount: undefined,
  };
}

export const MsgPayForGas = {
  encode(
    message: MsgPayForGas,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.sender !== '') {
      writer.uint32(10).string(message.sender);
    }
    if (message.igp_id !== '') {
      writer.uint32(18).string(message.igp_id);
    }
    if (message.message_id !== '') {
      writer.uint32(26).string(message.message_id);
    }
    if (message.destination_domain !== 0) {
      writer.uint32(32).uint32(message.destination_domain);
    }
    if (message.gas_limit !== '') {
      writer.uint32(42).string(message.gas_limit);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgPayForGas {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPayForGas();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.igp_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message_id = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.destination_domain = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.gas_limit = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgPayForGas {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
      message_id: isSet(object.message_id)
        ? globalThis.String(object.message_id)
        : '',
      destination_domain: isSet(object.destination_domain)
        ? globalThis.Number(object.destination_domain)
        : 0,
      gas_limit: isSet(object.gas_limit)
        ? globalThis.String(object.gas_limit)
        : '',
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: MsgPayForGas): unknown {
    const obj: any = {};
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    if (message.message_id !== '') {
      obj.message_id = message.message_id;
    }
    if (message.destination_domain !== 0) {
      obj.destination_domain = Math.round(message.destination_domain);
    }
    if (message.gas_limit !== '') {
      obj.gas_limit = message.gas_limit;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPayForGas>, I>>(
    base?: I,
  ): MsgPayForGas {
    return MsgPayForGas.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPayForGas>, I>>(
    object: I,
  ): MsgPayForGas {
    const message = createBaseMsgPayForGas();
    message.sender = object.sender ?? '';
    message.igp_id = object.igp_id ?? '';
    message.message_id = object.message_id ?? '';
    message.destination_domain = object.destination_domain ?? 0;
    message.gas_limit = object.gas_limit ?? '';
    message.amount =
      object.amount !== undefined && object.amount !== null
        ? Coin.fromPartial(object.amount)
        : undefined;
    return message;
  },
};

function createBaseMsgPayForGasResponse(): MsgPayForGasResponse {
  return {};
}

export const MsgPayForGasResponse = {
  encode(
    _: MsgPayForGasResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgPayForGasResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPayForGasResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgPayForGasResponse {
    return {};
  },

  toJSON(_: MsgPayForGasResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPayForGasResponse>, I>>(
    base?: I,
  ): MsgPayForGasResponse {
    return MsgPayForGasResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPayForGasResponse>, I>>(
    _: I,
  ): MsgPayForGasResponse {
    const message = createBaseMsgPayForGasResponse();
    return message;
  },
};

function createBaseMsgClaim(): MsgClaim {
  return { sender: '', igp_id: '' };
}

export const MsgClaim = {
  encode(
    message: MsgClaim,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.sender !== '') {
      writer.uint32(10).string(message.sender);
    }
    if (message.igp_id !== '') {
      writer.uint32(18).string(message.igp_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClaim {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaim();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.igp_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClaim {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
    };
  },

  toJSON(message: MsgClaim): unknown {
    const obj: any = {};
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.igp_id !== '') {
      obj.igp_id = message.igp_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaim>, I>>(base?: I): MsgClaim {
    return MsgClaim.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaim>, I>>(object: I): MsgClaim {
    const message = createBaseMsgClaim();
    message.sender = object.sender ?? '';
    message.igp_id = object.igp_id ?? '';
    return message;
  },
};

function createBaseMsgClaimResponse(): MsgClaimResponse {
  return {};
}

export const MsgClaimResponse = {
  encode(
    _: MsgClaimResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClaimResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgClaimResponse {
    return {};
  },

  toJSON(_: MsgClaimResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaimResponse>, I>>(
    base?: I,
  ): MsgClaimResponse {
    return MsgClaimResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaimResponse>, I>>(
    _: I,
  ): MsgClaimResponse {
    const message = createBaseMsgClaimResponse();
    return message;
  },
};

function createBaseMsgCreateMerkleTreeHook(): MsgCreateMerkleTreeHook {
  return { owner: '', mailbox_id: '' };
}

export const MsgCreateMerkleTreeHook = {
  encode(
    message: MsgCreateMerkleTreeHook,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    if (message.mailbox_id !== '') {
      writer.uint32(18).string(message.mailbox_id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateMerkleTreeHook {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMerkleTreeHook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mailbox_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateMerkleTreeHook {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
    };
  },

  toJSON(message: MsgCreateMerkleTreeHook): unknown {
    const obj: any = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateMerkleTreeHook>, I>>(
    base?: I,
  ): MsgCreateMerkleTreeHook {
    return MsgCreateMerkleTreeHook.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateMerkleTreeHook>, I>>(
    object: I,
  ): MsgCreateMerkleTreeHook {
    const message = createBaseMsgCreateMerkleTreeHook();
    message.owner = object.owner ?? '';
    message.mailbox_id = object.mailbox_id ?? '';
    return message;
  },
};

function createBaseMsgCreateMerkleTreeHookResponse(): MsgCreateMerkleTreeHookResponse {
  return { id: '' };
}

export const MsgCreateMerkleTreeHookResponse = {
  encode(
    message: MsgCreateMerkleTreeHookResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateMerkleTreeHookResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateMerkleTreeHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateMerkleTreeHookResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: MsgCreateMerkleTreeHookResponse): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateMerkleTreeHookResponse>, I>>(
    base?: I,
  ): MsgCreateMerkleTreeHookResponse {
    return MsgCreateMerkleTreeHookResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateMerkleTreeHookResponse>, I>>(
    object: I,
  ): MsgCreateMerkleTreeHookResponse {
    const message = createBaseMsgCreateMerkleTreeHookResponse();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseMsgCreateNoopHook(): MsgCreateNoopHook {
  return { owner: '' };
}

export const MsgCreateNoopHook = {
  encode(
    message: MsgCreateNoopHook,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.owner !== '') {
      writer.uint32(10).string(message.owner);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateNoopHook {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNoopHook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateNoopHook {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
    };
  },

  toJSON(message: MsgCreateNoopHook): unknown {
    const obj: any = {};
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateNoopHook>, I>>(
    base?: I,
  ): MsgCreateNoopHook {
    return MsgCreateNoopHook.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateNoopHook>, I>>(
    object: I,
  ): MsgCreateNoopHook {
    const message = createBaseMsgCreateNoopHook();
    message.owner = object.owner ?? '';
    return message;
  },
};

function createBaseMsgCreateNoopHookResponse(): MsgCreateNoopHookResponse {
  return { id: '' };
}

export const MsgCreateNoopHookResponse = {
  encode(
    message: MsgCreateNoopHookResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): MsgCreateNoopHookResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateNoopHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateNoopHookResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: MsgCreateNoopHookResponse): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateNoopHookResponse>, I>>(
    base?: I,
  ): MsgCreateNoopHookResponse {
    return MsgCreateNoopHookResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateNoopHookResponse>, I>>(
    object: I,
  ): MsgCreateNoopHookResponse {
    const message = createBaseMsgCreateNoopHookResponse();
    message.id = object.id ?? '';
    return message;
  },
};

/** Msg defines the module Msg service. */
export interface Msg {
  /** CreateIgp ... */
  CreateIgp(request: MsgCreateIgp): Promise<MsgCreateIgpResponse>;
  /** SetIgpOwner ... */
  SetIgpOwner(request: MsgSetIgpOwner): Promise<MsgSetIgpOwnerResponse>;
  /** SetDestinationGasConfig ... */
  SetDestinationGasConfig(
    request: MsgSetDestinationGasConfig,
  ): Promise<MsgSetDestinationGasConfigResponse>;
  /** PayForGas ... */
  PayForGas(request: MsgPayForGas): Promise<MsgPayForGasResponse>;
  /** Claim ... */
  Claim(request: MsgClaim): Promise<MsgClaimResponse>;
  /** CreateMerkleTreeHook ... */
  CreateMerkleTreeHook(
    request: MsgCreateMerkleTreeHook,
  ): Promise<MsgCreateMerkleTreeHookResponse>;
  /** CreateNoopHook ... */
  CreateNoopHook(
    request: MsgCreateNoopHook,
  ): Promise<MsgCreateNoopHookResponse>;
}

export const MsgServiceName = 'hyperlane.core.post_dispatch.v1.Msg';
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateIgp = this.CreateIgp.bind(this);
    this.SetIgpOwner = this.SetIgpOwner.bind(this);
    this.SetDestinationGasConfig = this.SetDestinationGasConfig.bind(this);
    this.PayForGas = this.PayForGas.bind(this);
    this.Claim = this.Claim.bind(this);
    this.CreateMerkleTreeHook = this.CreateMerkleTreeHook.bind(this);
    this.CreateNoopHook = this.CreateNoopHook.bind(this);
  }
  CreateIgp(request: MsgCreateIgp): Promise<MsgCreateIgpResponse> {
    const data = MsgCreateIgp.encode(request).finish();
    const promise = this.rpc.request(this.service, 'CreateIgp', data);
    return promise.then((data) =>
      MsgCreateIgpResponse.decode(_m0.Reader.create(data)),
    );
  }

  SetIgpOwner(request: MsgSetIgpOwner): Promise<MsgSetIgpOwnerResponse> {
    const data = MsgSetIgpOwner.encode(request).finish();
    const promise = this.rpc.request(this.service, 'SetIgpOwner', data);
    return promise.then((data) =>
      MsgSetIgpOwnerResponse.decode(_m0.Reader.create(data)),
    );
  }

  SetDestinationGasConfig(
    request: MsgSetDestinationGasConfig,
  ): Promise<MsgSetDestinationGasConfigResponse> {
    const data = MsgSetDestinationGasConfig.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'SetDestinationGasConfig',
      data,
    );
    return promise.then((data) =>
      MsgSetDestinationGasConfigResponse.decode(_m0.Reader.create(data)),
    );
  }

  PayForGas(request: MsgPayForGas): Promise<MsgPayForGasResponse> {
    const data = MsgPayForGas.encode(request).finish();
    const promise = this.rpc.request(this.service, 'PayForGas', data);
    return promise.then((data) =>
      MsgPayForGasResponse.decode(_m0.Reader.create(data)),
    );
  }

  Claim(request: MsgClaim): Promise<MsgClaimResponse> {
    const data = MsgClaim.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Claim', data);
    return promise.then((data) =>
      MsgClaimResponse.decode(_m0.Reader.create(data)),
    );
  }

  CreateMerkleTreeHook(
    request: MsgCreateMerkleTreeHook,
  ): Promise<MsgCreateMerkleTreeHookResponse> {
    const data = MsgCreateMerkleTreeHook.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      'CreateMerkleTreeHook',
      data,
    );
    return promise.then((data) =>
      MsgCreateMerkleTreeHookResponse.decode(_m0.Reader.create(data)),
    );
  }

  CreateNoopHook(
    request: MsgCreateNoopHook,
  ): Promise<MsgCreateNoopHookResponse> {
    const data = MsgCreateNoopHook.encode(request).finish();
    const promise = this.rpc.request(this.service, 'CreateNoopHook', data);
    return promise.then((data) =>
      MsgCreateNoopHookResponse.decode(_m0.Reader.create(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
