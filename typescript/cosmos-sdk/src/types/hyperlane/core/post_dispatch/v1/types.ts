// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/post_dispatch/v1/types.proto

/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

import { Coin } from '../../../../cosmos/base/v1beta1/coin.js';

export const protobufPackage = 'hyperlane.core.post_dispatch.v1';

/** InterchainGasPaymaster ... */
export interface InterchainGasPaymaster {
  /** id ... */
  id: string;
  /** owner ... */
  owner: string;
  /** denom ... */
  denom: string;
  /** claimable_fees ... */
  claimable_fees: Coin[];
}

/** DestinationGasConfig ... */
export interface DestinationGasConfig {
  /** remote_domain ... */
  remote_domain: number;
  /** gas_oracle ... */
  gas_oracle?: GasOracle | undefined;
  /** gas_overhead ... */
  gas_overhead: string;
}

/** GasOracle ... */
export interface GasOracle {
  /** token_exchange_rate ... */
  token_exchange_rate: string;
  /** gas_price ... */
  gas_price: string;
}

/** MerkleTreeHook ... */
export interface MerkleTreeHook {
  id: string;
  mailbox_id: string;
  /** owner ... */
  owner: string;
  /** tree ... */
  tree?: Tree | undefined;
}

/**
 * Tree represents an incremental merkle tree.
 * Contains current branch and the number of inserted leaves in the tree.
 */
export interface Tree {
  /** branch ... */
  branch: Uint8Array[];
  /** count ... */
  count: number;
}

/** NoopHook ... */
export interface NoopHook {
  /** id ... */
  id: string;
  /** owner ... */
  owner: string;
}

function createBaseInterchainGasPaymaster(): InterchainGasPaymaster {
  return { id: '', owner: '', denom: '', claimable_fees: [] };
}

export const InterchainGasPaymaster = {
  encode(
    message: InterchainGasPaymaster,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    if (message.denom !== '') {
      writer.uint32(26).string(message.denom);
    }
    for (const v of message.claimable_fees) {
      Coin.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): InterchainGasPaymaster {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterchainGasPaymaster();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.claimable_fees.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterchainGasPaymaster {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      denom: isSet(object.denom) ? globalThis.String(object.denom) : '',
      claimable_fees: globalThis.Array.isArray(object?.claimable_fees)
        ? object.claimable_fees.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InterchainGasPaymaster): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.denom !== '') {
      obj.denom = message.denom;
    }
    if (message.claimable_fees?.length) {
      obj.claimable_fees = message.claimable_fees.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InterchainGasPaymaster>, I>>(
    base?: I,
  ): InterchainGasPaymaster {
    return InterchainGasPaymaster.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InterchainGasPaymaster>, I>>(
    object: I,
  ): InterchainGasPaymaster {
    const message = createBaseInterchainGasPaymaster();
    message.id = object.id ?? '';
    message.owner = object.owner ?? '';
    message.denom = object.denom ?? '';
    message.claimable_fees =
      object.claimable_fees?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDestinationGasConfig(): DestinationGasConfig {
  return { remote_domain: 0, gas_oracle: undefined, gas_overhead: '' };
}

export const DestinationGasConfig = {
  encode(
    message: DestinationGasConfig,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.remote_domain !== 0) {
      writer.uint32(8).uint32(message.remote_domain);
    }
    if (message.gas_oracle !== undefined) {
      GasOracle.encode(message.gas_oracle, writer.uint32(18).fork()).ldelim();
    }
    if (message.gas_overhead !== '') {
      writer.uint32(26).string(message.gas_overhead);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): DestinationGasConfig {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestinationGasConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.remote_domain = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gas_oracle = GasOracle.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gas_overhead = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DestinationGasConfig {
    return {
      remote_domain: isSet(object.remote_domain)
        ? globalThis.Number(object.remote_domain)
        : 0,
      gas_oracle: isSet(object.gas_oracle)
        ? GasOracle.fromJSON(object.gas_oracle)
        : undefined,
      gas_overhead: isSet(object.gas_overhead)
        ? globalThis.String(object.gas_overhead)
        : '',
    };
  },

  toJSON(message: DestinationGasConfig): unknown {
    const obj: any = {};
    if (message.remote_domain !== 0) {
      obj.remote_domain = Math.round(message.remote_domain);
    }
    if (message.gas_oracle !== undefined) {
      obj.gas_oracle = GasOracle.toJSON(message.gas_oracle);
    }
    if (message.gas_overhead !== '') {
      obj.gas_overhead = message.gas_overhead;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DestinationGasConfig>, I>>(
    base?: I,
  ): DestinationGasConfig {
    return DestinationGasConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DestinationGasConfig>, I>>(
    object: I,
  ): DestinationGasConfig {
    const message = createBaseDestinationGasConfig();
    message.remote_domain = object.remote_domain ?? 0;
    message.gas_oracle =
      object.gas_oracle !== undefined && object.gas_oracle !== null
        ? GasOracle.fromPartial(object.gas_oracle)
        : undefined;
    message.gas_overhead = object.gas_overhead ?? '';
    return message;
  },
};

function createBaseGasOracle(): GasOracle {
  return { token_exchange_rate: '', gas_price: '' };
}

export const GasOracle = {
  encode(
    message: GasOracle,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.token_exchange_rate !== '') {
      writer.uint32(10).string(message.token_exchange_rate);
    }
    if (message.gas_price !== '') {
      writer.uint32(18).string(message.gas_price);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GasOracle {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGasOracle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token_exchange_rate = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gas_price = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GasOracle {
    return {
      token_exchange_rate: isSet(object.token_exchange_rate)
        ? globalThis.String(object.token_exchange_rate)
        : '',
      gas_price: isSet(object.gas_price)
        ? globalThis.String(object.gas_price)
        : '',
    };
  },

  toJSON(message: GasOracle): unknown {
    const obj: any = {};
    if (message.token_exchange_rate !== '') {
      obj.token_exchange_rate = message.token_exchange_rate;
    }
    if (message.gas_price !== '') {
      obj.gas_price = message.gas_price;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GasOracle>, I>>(base?: I): GasOracle {
    return GasOracle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GasOracle>, I>>(
    object: I,
  ): GasOracle {
    const message = createBaseGasOracle();
    message.token_exchange_rate = object.token_exchange_rate ?? '';
    message.gas_price = object.gas_price ?? '';
    return message;
  },
};

function createBaseMerkleTreeHook(): MerkleTreeHook {
  return { id: '', mailbox_id: '', owner: '', tree: undefined };
}

export const MerkleTreeHook = {
  encode(
    message: MerkleTreeHook,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.mailbox_id !== '') {
      writer.uint32(18).string(message.mailbox_id);
    }
    if (message.owner !== '') {
      writer.uint32(26).string(message.owner);
    }
    if (message.tree !== undefined) {
      Tree.encode(message.tree, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MerkleTreeHook {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMerkleTreeHook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mailbox_id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tree = Tree.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MerkleTreeHook {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
      tree: isSet(object.tree) ? Tree.fromJSON(object.tree) : undefined,
    };
  },

  toJSON(message: MerkleTreeHook): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.mailbox_id !== '') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    if (message.tree !== undefined) {
      obj.tree = Tree.toJSON(message.tree);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MerkleTreeHook>, I>>(
    base?: I,
  ): MerkleTreeHook {
    return MerkleTreeHook.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MerkleTreeHook>, I>>(
    object: I,
  ): MerkleTreeHook {
    const message = createBaseMerkleTreeHook();
    message.id = object.id ?? '';
    message.mailbox_id = object.mailbox_id ?? '';
    message.owner = object.owner ?? '';
    message.tree =
      object.tree !== undefined && object.tree !== null
        ? Tree.fromPartial(object.tree)
        : undefined;
    return message;
  },
};

function createBaseTree(): Tree {
  return { branch: [], count: 0 };
}

export const Tree = {
  encode(message: Tree, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.branch) {
      writer.uint32(10).bytes(v!);
    }
    if (message.count !== 0) {
      writer.uint32(16).uint32(message.count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Tree {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTree();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.branch.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.count = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tree {
    return {
      branch: globalThis.Array.isArray(object?.branch)
        ? object.branch.map((e: any) => bytesFromBase64(e))
        : [],
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
    };
  },

  toJSON(message: Tree): unknown {
    const obj: any = {};
    if (message.branch?.length) {
      obj.branch = message.branch.map((e) => base64FromBytes(e));
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Tree>, I>>(base?: I): Tree {
    return Tree.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Tree>, I>>(object: I): Tree {
    const message = createBaseTree();
    message.branch = object.branch?.map((e) => e) || [];
    message.count = object.count ?? 0;
    return message;
  },
};

function createBaseNoopHook(): NoopHook {
  return { id: '', owner: '' };
}

export const NoopHook = {
  encode(
    message: NoopHook,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== '') {
      writer.uint32(18).string(message.owner);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NoopHook {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoopHook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoopHook {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
    };
  },

  toJSON(message: NoopHook): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.owner !== '') {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoopHook>, I>>(base?: I): NoopHook {
    return NoopHook.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoopHook>, I>>(object: I): NoopHook {
    const message = createBaseNoopHook();
    message.id = object.id ?? '';
    message.owner = object.owner ?? '';
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString('base64');
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(''));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
