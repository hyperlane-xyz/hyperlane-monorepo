// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/v1/events.proto

/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

export const protobufPackage = 'hyperlane.core.v1';

/** Dispatch ... */
export interface Dispatch {
  /** origin_mailbox_id ... */
  origin_mailbox_id: string;
  /** sender ... */
  sender: string;
  /** destination ... */
  destination: number;
  /** recipient ... */
  recipient: string;
  /** message ... */
  message: string;
}

/** Process ... */
export interface Process {
  /** origin_mailbox_id ... */
  origin_mailbox_id: string;
  /** origin ... */
  origin: number;
  /** sender ... */
  sender: string;
  /** recipient ... */
  recipient: string;
  /** message_id ... */
  message_id: string;
  /** message ... */
  message: string;
}

function createBaseDispatch(): Dispatch {
  return {
    origin_mailbox_id: '',
    sender: '',
    destination: 0,
    recipient: '',
    message: '',
  };
}

export const Dispatch = {
  encode(
    message: Dispatch,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.origin_mailbox_id !== '') {
      writer.uint32(10).string(message.origin_mailbox_id);
    }
    if (message.sender !== '') {
      writer.uint32(18).string(message.sender);
    }
    if (message.destination !== 0) {
      writer.uint32(24).uint32(message.destination);
    }
    if (message.recipient !== '') {
      writer.uint32(34).string(message.recipient);
    }
    if (message.message !== '') {
      writer.uint32(42).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Dispatch {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDispatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.origin_mailbox_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.destination = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.recipient = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dispatch {
    return {
      origin_mailbox_id: isSet(object.origin_mailbox_id)
        ? globalThis.String(object.origin_mailbox_id)
        : '',
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      destination: isSet(object.destination)
        ? globalThis.Number(object.destination)
        : 0,
      recipient: isSet(object.recipient)
        ? globalThis.String(object.recipient)
        : '',
      message: isSet(object.message) ? globalThis.String(object.message) : '',
    };
  },

  toJSON(message: Dispatch): unknown {
    const obj: any = {};
    if (message.origin_mailbox_id !== '') {
      obj.origin_mailbox_id = message.origin_mailbox_id;
    }
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.destination !== 0) {
      obj.destination = Math.round(message.destination);
    }
    if (message.recipient !== '') {
      obj.recipient = message.recipient;
    }
    if (message.message !== '') {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Dispatch>, I>>(base?: I): Dispatch {
    return Dispatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Dispatch>, I>>(object: I): Dispatch {
    const message = createBaseDispatch();
    message.origin_mailbox_id = object.origin_mailbox_id ?? '';
    message.sender = object.sender ?? '';
    message.destination = object.destination ?? 0;
    message.recipient = object.recipient ?? '';
    message.message = object.message ?? '';
    return message;
  },
};

function createBaseProcess(): Process {
  return {
    origin_mailbox_id: '',
    origin: 0,
    sender: '',
    recipient: '',
    message_id: '',
    message: '',
  };
}

export const Process = {
  encode(
    message: Process,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.origin_mailbox_id !== '') {
      writer.uint32(10).string(message.origin_mailbox_id);
    }
    if (message.origin !== 0) {
      writer.uint32(16).uint32(message.origin);
    }
    if (message.sender !== '') {
      writer.uint32(26).string(message.sender);
    }
    if (message.recipient !== '') {
      writer.uint32(34).string(message.recipient);
    }
    if (message.message_id !== '') {
      writer.uint32(42).string(message.message_id);
    }
    if (message.message !== '') {
      writer.uint32(50).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Process {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.origin_mailbox_id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.origin = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.recipient = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.message_id = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Process {
    return {
      origin_mailbox_id: isSet(object.origin_mailbox_id)
        ? globalThis.String(object.origin_mailbox_id)
        : '',
      origin: isSet(object.origin) ? globalThis.Number(object.origin) : 0,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : '',
      recipient: isSet(object.recipient)
        ? globalThis.String(object.recipient)
        : '',
      message_id: isSet(object.message_id)
        ? globalThis.String(object.message_id)
        : '',
      message: isSet(object.message) ? globalThis.String(object.message) : '',
    };
  },

  toJSON(message: Process): unknown {
    const obj: any = {};
    if (message.origin_mailbox_id !== '') {
      obj.origin_mailbox_id = message.origin_mailbox_id;
    }
    if (message.origin !== 0) {
      obj.origin = Math.round(message.origin);
    }
    if (message.sender !== '') {
      obj.sender = message.sender;
    }
    if (message.recipient !== '') {
      obj.recipient = message.recipient;
    }
    if (message.message_id !== '') {
      obj.message_id = message.message_id;
    }
    if (message.message !== '') {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Process>, I>>(base?: I): Process {
    return Process.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Process>, I>>(object: I): Process {
    const message = createBaseProcess();
    message.origin_mailbox_id = object.origin_mailbox_id ?? '';
    message.origin = object.origin ?? 0;
    message.sender = object.sender ?? '';
    message.recipient = object.recipient ?? '';
    message.message_id = object.message_id ?? '';
    message.message = object.message ?? '';
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
