// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/v1/query.proto

/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';

import {
  PageRequest,
  PageResponse,
} from '../../../cosmos/base/query/v1beta1/pagination.js';

import { Mailbox } from './types.js';

export const protobufPackage = 'hyperlane.core.v1';

/** QueryMailboxesRequest ... */
export interface QueryMailboxesRequest {
  /** pagination defines an optional pagination for the request. */
  pagination?: PageRequest | undefined;
}

/** QueryMailboxesResponse ... */
export interface QueryMailboxesResponse {
  mailboxes: Mailbox[];
  /** pagination defines the pagination in the response. */
  pagination?: PageResponse | undefined;
}

/** QueryMailboxRequest ... */
export interface QueryMailboxRequest {
  id: string;
}

/** QueryMailboxResponse ... */
export interface QueryMailboxResponse {
  mailbox?: Mailbox | undefined;
}

/** QueryDeliveredRequest ... */
export interface QueryDeliveredRequest {
  id: string;
  message_id: string;
}

/** QueryDeliveredResponse ... */
export interface QueryDeliveredResponse {
  delivered: boolean;
}

/** QueryRecipientIsmRequest ... */
export interface QueryRecipientIsmRequest {
  recipient: string;
}

/** QueryRecipientIsmResponse ... */
export interface QueryRecipientIsmResponse {
  ism_id: string;
}

/** QueryVerifyDryRunRequest ... */
export interface QueryVerifyDryRunRequest {
  ism_id: string;
  message: string;
  metadata: string;
}

/** QueryVerifyDryRunResponse ... */
export interface QueryVerifyDryRunResponse {
  verified: boolean;
}

function createBaseQueryMailboxesRequest(): QueryMailboxesRequest {
  return { pagination: undefined };
}

export const QueryMailboxesRequest = {
  encode(
    message: QueryMailboxesRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryMailboxesRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMailboxesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMailboxesRequest {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryMailboxesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMailboxesRequest>, I>>(
    base?: I,
  ): QueryMailboxesRequest {
    return QueryMailboxesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMailboxesRequest>, I>>(
    object: I,
  ): QueryMailboxesRequest {
    const message = createBaseQueryMailboxesRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryMailboxesResponse(): QueryMailboxesResponse {
  return { mailboxes: [], pagination: undefined };
}

export const QueryMailboxesResponse = {
  encode(
    message: QueryMailboxesResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.mailboxes) {
      Mailbox.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(
        message.pagination,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryMailboxesResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMailboxesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mailboxes.push(Mailbox.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMailboxesResponse {
    return {
      mailboxes: globalThis.Array.isArray(object?.mailboxes)
        ? object.mailboxes.map((e: any) => Mailbox.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryMailboxesResponse): unknown {
    const obj: any = {};
    if (message.mailboxes?.length) {
      obj.mailboxes = message.mailboxes.map((e) => Mailbox.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMailboxesResponse>, I>>(
    base?: I,
  ): QueryMailboxesResponse {
    return QueryMailboxesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMailboxesResponse>, I>>(
    object: I,
  ): QueryMailboxesResponse {
    const message = createBaseQueryMailboxesResponse();
    message.mailboxes =
      object.mailboxes?.map((e) => Mailbox.fromPartial(e)) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryMailboxRequest(): QueryMailboxRequest {
  return { id: '' };
}

export const QueryMailboxRequest = {
  encode(
    message: QueryMailboxRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryMailboxRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMailboxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMailboxRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
  },

  toJSON(message: QueryMailboxRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMailboxRequest>, I>>(
    base?: I,
  ): QueryMailboxRequest {
    return QueryMailboxRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMailboxRequest>, I>>(
    object: I,
  ): QueryMailboxRequest {
    const message = createBaseQueryMailboxRequest();
    message.id = object.id ?? '';
    return message;
  },
};

function createBaseQueryMailboxResponse(): QueryMailboxResponse {
  return { mailbox: undefined };
}

export const QueryMailboxResponse = {
  encode(
    message: QueryMailboxResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.mailbox !== undefined) {
      Mailbox.encode(message.mailbox, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryMailboxResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMailboxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.mailbox = Mailbox.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMailboxResponse {
    return {
      mailbox: isSet(object.mailbox)
        ? Mailbox.fromJSON(object.mailbox)
        : undefined,
    };
  },

  toJSON(message: QueryMailboxResponse): unknown {
    const obj: any = {};
    if (message.mailbox !== undefined) {
      obj.mailbox = Mailbox.toJSON(message.mailbox);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMailboxResponse>, I>>(
    base?: I,
  ): QueryMailboxResponse {
    return QueryMailboxResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMailboxResponse>, I>>(
    object: I,
  ): QueryMailboxResponse {
    const message = createBaseQueryMailboxResponse();
    message.mailbox =
      object.mailbox !== undefined && object.mailbox !== null
        ? Mailbox.fromPartial(object.mailbox)
        : undefined;
    return message;
  },
};

function createBaseQueryDeliveredRequest(): QueryDeliveredRequest {
  return { id: '', message_id: '' };
}

export const QueryDeliveredRequest = {
  encode(
    message: QueryDeliveredRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.message_id !== '') {
      writer.uint32(18).string(message.message_id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryDeliveredRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeliveredRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDeliveredRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      message_id: isSet(object.message_id)
        ? globalThis.String(object.message_id)
        : '',
    };
  },

  toJSON(message: QueryDeliveredRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.message_id !== '') {
      obj.message_id = message.message_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDeliveredRequest>, I>>(
    base?: I,
  ): QueryDeliveredRequest {
    return QueryDeliveredRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryDeliveredRequest>, I>>(
    object: I,
  ): QueryDeliveredRequest {
    const message = createBaseQueryDeliveredRequest();
    message.id = object.id ?? '';
    message.message_id = object.message_id ?? '';
    return message;
  },
};

function createBaseQueryDeliveredResponse(): QueryDeliveredResponse {
  return { delivered: false };
}

export const QueryDeliveredResponse = {
  encode(
    message: QueryDeliveredResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.delivered !== false) {
      writer.uint32(8).bool(message.delivered);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryDeliveredResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeliveredResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.delivered = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDeliveredResponse {
    return {
      delivered: isSet(object.delivered)
        ? globalThis.Boolean(object.delivered)
        : false,
    };
  },

  toJSON(message: QueryDeliveredResponse): unknown {
    const obj: any = {};
    if (message.delivered !== false) {
      obj.delivered = message.delivered;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryDeliveredResponse>, I>>(
    base?: I,
  ): QueryDeliveredResponse {
    return QueryDeliveredResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryDeliveredResponse>, I>>(
    object: I,
  ): QueryDeliveredResponse {
    const message = createBaseQueryDeliveredResponse();
    message.delivered = object.delivered ?? false;
    return message;
  },
};

function createBaseQueryRecipientIsmRequest(): QueryRecipientIsmRequest {
  return { recipient: '' };
}

export const QueryRecipientIsmRequest = {
  encode(
    message: QueryRecipientIsmRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.recipient !== '') {
      writer.uint32(10).string(message.recipient);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryRecipientIsmRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRecipientIsmRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.recipient = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRecipientIsmRequest {
    return {
      recipient: isSet(object.recipient)
        ? globalThis.String(object.recipient)
        : '',
    };
  },

  toJSON(message: QueryRecipientIsmRequest): unknown {
    const obj: any = {};
    if (message.recipient !== '') {
      obj.recipient = message.recipient;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRecipientIsmRequest>, I>>(
    base?: I,
  ): QueryRecipientIsmRequest {
    return QueryRecipientIsmRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRecipientIsmRequest>, I>>(
    object: I,
  ): QueryRecipientIsmRequest {
    const message = createBaseQueryRecipientIsmRequest();
    message.recipient = object.recipient ?? '';
    return message;
  },
};

function createBaseQueryRecipientIsmResponse(): QueryRecipientIsmResponse {
  return { ism_id: '' };
}

export const QueryRecipientIsmResponse = {
  encode(
    message: QueryRecipientIsmResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.ism_id !== '') {
      writer.uint32(10).string(message.ism_id);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryRecipientIsmResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRecipientIsmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ism_id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRecipientIsmResponse {
    return {
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
    };
  },

  toJSON(message: QueryRecipientIsmResponse): unknown {
    const obj: any = {};
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRecipientIsmResponse>, I>>(
    base?: I,
  ): QueryRecipientIsmResponse {
    return QueryRecipientIsmResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRecipientIsmResponse>, I>>(
    object: I,
  ): QueryRecipientIsmResponse {
    const message = createBaseQueryRecipientIsmResponse();
    message.ism_id = object.ism_id ?? '';
    return message;
  },
};

function createBaseQueryVerifyDryRunRequest(): QueryVerifyDryRunRequest {
  return { ism_id: '', message: '', metadata: '' };
}

export const QueryVerifyDryRunRequest = {
  encode(
    message: QueryVerifyDryRunRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.ism_id !== '') {
      writer.uint32(10).string(message.ism_id);
    }
    if (message.message !== '') {
      writer.uint32(18).string(message.message);
    }
    if (message.metadata !== '') {
      writer.uint32(26).string(message.metadata);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryVerifyDryRunRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryVerifyDryRunRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ism_id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadata = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryVerifyDryRunRequest {
    return {
      ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
      message: isSet(object.message) ? globalThis.String(object.message) : '',
      metadata: isSet(object.metadata)
        ? globalThis.String(object.metadata)
        : '',
    };
  },

  toJSON(message: QueryVerifyDryRunRequest): unknown {
    const obj: any = {};
    if (message.ism_id !== '') {
      obj.ism_id = message.ism_id;
    }
    if (message.message !== '') {
      obj.message = message.message;
    }
    if (message.metadata !== '') {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryVerifyDryRunRequest>, I>>(
    base?: I,
  ): QueryVerifyDryRunRequest {
    return QueryVerifyDryRunRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryVerifyDryRunRequest>, I>>(
    object: I,
  ): QueryVerifyDryRunRequest {
    const message = createBaseQueryVerifyDryRunRequest();
    message.ism_id = object.ism_id ?? '';
    message.message = object.message ?? '';
    message.metadata = object.metadata ?? '';
    return message;
  },
};

function createBaseQueryVerifyDryRunResponse(): QueryVerifyDryRunResponse {
  return { verified: false };
}

export const QueryVerifyDryRunResponse = {
  encode(
    message: QueryVerifyDryRunResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.verified !== false) {
      writer.uint32(8).bool(message.verified);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): QueryVerifyDryRunResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryVerifyDryRunResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.verified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryVerifyDryRunResponse {
    return {
      verified: isSet(object.verified)
        ? globalThis.Boolean(object.verified)
        : false,
    };
  },

  toJSON(message: QueryVerifyDryRunResponse): unknown {
    const obj: any = {};
    if (message.verified !== false) {
      obj.verified = message.verified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryVerifyDryRunResponse>, I>>(
    base?: I,
  ): QueryVerifyDryRunResponse {
    return QueryVerifyDryRunResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryVerifyDryRunResponse>, I>>(
    object: I,
  ): QueryVerifyDryRunResponse {
    const message = createBaseQueryVerifyDryRunResponse();
    message.verified = object.verified ?? false;
    return message;
  },
};

/** Query defines the module Query service. */
export interface Query {
  /** Mailboxes ... */
  Mailboxes(request: QueryMailboxesRequest): Promise<QueryMailboxesResponse>;
  /** Mailbox ... */
  Mailbox(request: QueryMailboxRequest): Promise<QueryMailboxResponse>;
  /** Delivered ... */
  Delivered(request: QueryDeliveredRequest): Promise<QueryDeliveredResponse>;
  /**
   * RecipientIsm returns the recipient ISM ID for a registered application.
   *
   * The recipient is globally unique as every application ID registered on the
   * core module is unique. This means that one application cannot be registered
   * to two mailboxes, resulting in a mailbox-independent lookup.
   */
  RecipientIsm(
    request: QueryRecipientIsmRequest,
  ): Promise<QueryRecipientIsmResponse>;
  /** VerifyDryRun ... */
  VerifyDryRun(
    request: QueryVerifyDryRunRequest,
  ): Promise<QueryVerifyDryRunResponse>;
}

export const QueryServiceName = 'hyperlane.core.v1.Query';
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Mailboxes = this.Mailboxes.bind(this);
    this.Mailbox = this.Mailbox.bind(this);
    this.Delivered = this.Delivered.bind(this);
    this.RecipientIsm = this.RecipientIsm.bind(this);
    this.VerifyDryRun = this.VerifyDryRun.bind(this);
  }
  Mailboxes(request: QueryMailboxesRequest): Promise<QueryMailboxesResponse> {
    const data = QueryMailboxesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Mailboxes', data);
    return promise.then((data) =>
      QueryMailboxesResponse.decode(_m0.Reader.create(data)),
    );
  }

  Mailbox(request: QueryMailboxRequest): Promise<QueryMailboxResponse> {
    const data = QueryMailboxRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Mailbox', data);
    return promise.then((data) =>
      QueryMailboxResponse.decode(_m0.Reader.create(data)),
    );
  }

  Delivered(request: QueryDeliveredRequest): Promise<QueryDeliveredResponse> {
    const data = QueryDeliveredRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'Delivered', data);
    return promise.then((data) =>
      QueryDeliveredResponse.decode(_m0.Reader.create(data)),
    );
  }

  RecipientIsm(
    request: QueryRecipientIsmRequest,
  ): Promise<QueryRecipientIsmResponse> {
    const data = QueryRecipientIsmRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'RecipientIsm', data);
    return promise.then((data) =>
      QueryRecipientIsmResponse.decode(_m0.Reader.create(data)),
    );
  }

  VerifyDryRun(
    request: QueryVerifyDryRunRequest,
  ): Promise<QueryVerifyDryRunResponse> {
    const data = QueryVerifyDryRunRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, 'VerifyDryRun', data);
    return promise.then((data) =>
      QueryVerifyDryRunResponse.decode(_m0.Reader.create(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
