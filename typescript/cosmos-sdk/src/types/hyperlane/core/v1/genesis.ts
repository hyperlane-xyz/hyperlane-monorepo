// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/v1/genesis.proto

/* eslint-disable */
import Long from 'long';
import _m0 from 'protobufjs/minimal';

import { GenesisState as GenesisState1 } from '../interchain_security/v1/genesis';
import { GenesisState as GenesisState2 } from '../post_dispatch/v1/genesis';

import { Mailbox } from './types';

export const protobufPackage = 'hyperlane.core.v1';

/** GenesisState is the state that must be provided at genesis. */
export interface GenesisState {
  /** ism_genesis */
  ism_genesis?: GenesisState1 | undefined;
  /** post_dispatch_genesis */
  post_dispatch_genesis?: GenesisState2 | undefined;
  mailboxes: Mailbox[];
  messages: MailboxMessage[];
  ism_sequence: string;
  post_dispatch_sequence: string;
  app_sequence: string;
}

/** Mailbox message for genesis state */
export interface MailboxMessage {
  mailbox_id: string;
  message_id: Uint8Array;
}

function createBaseGenesisState(): GenesisState {
  return {
    ism_genesis: undefined,
    post_dispatch_genesis: undefined,
    mailboxes: [],
    messages: [],
    ism_sequence: '0',
    post_dispatch_sequence: '0',
    app_sequence: '0',
  };
}

export const GenesisState = {
  encode(
    message: GenesisState,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.ism_genesis !== undefined) {
      GenesisState1.encode(
        message.ism_genesis,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    if (message.post_dispatch_genesis !== undefined) {
      GenesisState2.encode(
        message.post_dispatch_genesis,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    for (const v of message.mailboxes) {
      Mailbox.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.messages) {
      MailboxMessage.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.ism_sequence !== '0') {
      writer.uint32(40).uint64(message.ism_sequence);
    }
    if (message.post_dispatch_sequence !== '0') {
      writer.uint32(48).uint64(message.post_dispatch_sequence);
    }
    if (message.app_sequence !== '0') {
      writer.uint32(56).uint64(message.app_sequence);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ism_genesis = GenesisState1.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.post_dispatch_genesis = GenesisState2.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mailboxes.push(Mailbox.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.messages.push(MailboxMessage.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ism_sequence = longToString(reader.uint64() as Long);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.post_dispatch_sequence = longToString(
            reader.uint64() as Long,
          );
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.app_sequence = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      ism_genesis: isSet(object.ism_genesis)
        ? GenesisState1.fromJSON(object.ism_genesis)
        : undefined,
      post_dispatch_genesis: isSet(object.post_dispatch_genesis)
        ? GenesisState2.fromJSON(object.post_dispatch_genesis)
        : undefined,
      mailboxes: globalThis.Array.isArray(object?.mailboxes)
        ? object.mailboxes.map((e: any) => Mailbox.fromJSON(e))
        : [],
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => MailboxMessage.fromJSON(e))
        : [],
      ism_sequence: isSet(object.ism_sequence)
        ? globalThis.String(object.ism_sequence)
        : '0',
      post_dispatch_sequence: isSet(object.post_dispatch_sequence)
        ? globalThis.String(object.post_dispatch_sequence)
        : '0',
      app_sequence: isSet(object.app_sequence)
        ? globalThis.String(object.app_sequence)
        : '0',
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.ism_genesis !== undefined) {
      obj.ism_genesis = GenesisState1.toJSON(message.ism_genesis);
    }
    if (message.post_dispatch_genesis !== undefined) {
      obj.post_dispatch_genesis = GenesisState2.toJSON(
        message.post_dispatch_genesis,
      );
    }
    if (message.mailboxes?.length) {
      obj.mailboxes = message.mailboxes.map((e) => Mailbox.toJSON(e));
    }
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => MailboxMessage.toJSON(e));
    }
    if (message.ism_sequence !== '0') {
      obj.ism_sequence = message.ism_sequence;
    }
    if (message.post_dispatch_sequence !== '0') {
      obj.post_dispatch_sequence = message.post_dispatch_sequence;
    }
    if (message.app_sequence !== '0') {
      obj.app_sequence = message.app_sequence;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(
    base?: I,
  ): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(
    object: I,
  ): GenesisState {
    const message = createBaseGenesisState();
    message.ism_genesis =
      object.ism_genesis !== undefined && object.ism_genesis !== null
        ? GenesisState1.fromPartial(object.ism_genesis)
        : undefined;
    message.post_dispatch_genesis =
      object.post_dispatch_genesis !== undefined &&
      object.post_dispatch_genesis !== null
        ? GenesisState2.fromPartial(object.post_dispatch_genesis)
        : undefined;
    message.mailboxes =
      object.mailboxes?.map((e) => Mailbox.fromPartial(e)) || [];
    message.messages =
      object.messages?.map((e) => MailboxMessage.fromPartial(e)) || [];
    message.ism_sequence = object.ism_sequence ?? '0';
    message.post_dispatch_sequence = object.post_dispatch_sequence ?? '0';
    message.app_sequence = object.app_sequence ?? '0';
    return message;
  },
};

function createBaseMailboxMessage(): MailboxMessage {
  return { mailbox_id: '0', message_id: new Uint8Array(0) };
}

export const MailboxMessage = {
  encode(
    message: MailboxMessage,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.mailbox_id !== '0') {
      writer.uint32(8).uint64(message.mailbox_id);
    }
    if (message.message_id.length !== 0) {
      writer.uint32(18).bytes(message.message_id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MailboxMessage {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMailboxMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.mailbox_id = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message_id = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MailboxMessage {
    return {
      mailbox_id: isSet(object.mailbox_id)
        ? globalThis.String(object.mailbox_id)
        : '0',
      message_id: isSet(object.message_id)
        ? bytesFromBase64(object.message_id)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MailboxMessage): unknown {
    const obj: any = {};
    if (message.mailbox_id !== '0') {
      obj.mailbox_id = message.mailbox_id;
    }
    if (message.message_id.length !== 0) {
      obj.message_id = base64FromBytes(message.message_id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MailboxMessage>, I>>(
    base?: I,
  ): MailboxMessage {
    return MailboxMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MailboxMessage>, I>>(
    object: I,
  ): MailboxMessage {
    const message = createBaseMailboxMessage();
    message.mailbox_id = object.mailbox_id ?? '0';
    message.message_id = object.message_id ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString('base64');
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(''));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
