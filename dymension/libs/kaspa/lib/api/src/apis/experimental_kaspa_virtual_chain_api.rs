/*
 * Kaspa REST-API server
 *
 * This server is to communicate with kaspa network via REST-API
 *
 * The version of the OpenAPI document: a6a9569
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`get_virtual_chain_transactions_virtual_chain_get`]
#[derive(Clone, Debug)]
pub struct GetVirtualChainTransactionsVirtualChainGetParams {
    /// Divisible by limit
    pub blue_score_gte: i64,
    pub limit: Option<i64>,
    pub resolve_inputs: Option<bool>,
    pub include_coinbase: Option<bool>
}


/// struct for typed errors of method [`get_virtual_chain_transactions_virtual_chain_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVirtualChainTransactionsVirtualChainGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// EXPERIMENTAL - EXPECT BREAKING CHANGES: Get virtual chain transactions by blue score.
pub async fn get_virtual_chain_transactions_virtual_chain_get(configuration: &configuration::Configuration, params: GetVirtualChainTransactionsVirtualChainGetParams) -> Result<Vec<models::VcBlockModel>, Error<GetVirtualChainTransactionsVirtualChainGetError>> {

    let uri_str = format!("{}/virtual-chain", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("blueScoreGte", &params.blue_score_gte.to_string())]);
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.resolve_inputs {
        req_builder = req_builder.query(&[("resolveInputs", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.include_coinbase {
        req_builder = req_builder.query(&[("includeCoinbase", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::VcBlockModel&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::VcBlockModel&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetVirtualChainTransactionsVirtualChainGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

