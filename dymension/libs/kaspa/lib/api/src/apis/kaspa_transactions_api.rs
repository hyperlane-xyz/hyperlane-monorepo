/*
 * Kaspa REST-API server
 *
 * This server is to communicate with kaspa network via REST-API
 *
 * The version of the OpenAPI document: a6a9569
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`calculate_transaction_mass_transactions_mass_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CalculateTransactionMassTransactionsMassPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_transaction_acceptance_transactions_acceptance_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionAcceptanceTransactionsAcceptancePostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_transaction_transactions_transaction_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionTransactionsTransactionIdGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_for_transactions_transactions_search_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchForTransactionsTransactionsSearchPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`submit_a_new_transaction_transactions_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubmitANewTransactionTransactionsPostError {
    Status400(models::SubmitTransactionResponse),
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// This function calculates and returns the mass of a transaction, which is essential for determining the minimum fee. The mass calculation takes into account the storage mass as defined in KIP-0009.  Note: Be aware that if the transaction has a very low output amount or a high number of outputs, the mass can become significantly large.
pub async fn calculate_transaction_mass_transactions_mass_post(configuration: &configuration::Configuration, submit_tx_model: models::SubmitTxModel) -> Result<models::TxMass, Error<CalculateTransactionMassTransactionsMassPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_submit_tx_model = submit_tx_model;

    let uri_str = format!("{}/transactions/mass", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_submit_tx_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TxMass`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TxMass`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CalculateTransactionMassTransactionsMassPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Given a list of transaction_ids, return whether each one is accepted
pub async fn get_transaction_acceptance_transactions_acceptance_post(configuration: &configuration::Configuration, tx_acceptance_request: models::TxAcceptanceRequest) -> Result<Vec<models::TxAcceptanceResponse>, Error<GetTransactionAcceptanceTransactionsAcceptancePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tx_acceptance_request = tx_acceptance_request;

    let uri_str = format!("{}/transactions/acceptance", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_tx_acceptance_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TxAcceptanceResponse&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TxAcceptanceResponse&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetTransactionAcceptanceTransactionsAcceptancePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get details for a given transaction id
pub async fn get_transaction_transactions_transaction_id_get(configuration: &configuration::Configuration, transaction_id: &str, block_hash: Option<&str>, inputs: Option<bool>, outputs: Option<bool>, resolve_previous_outpoints: Option<&str>) -> Result<models::TxModel, Error<GetTransactionTransactionsTransactionIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_transaction_id = transaction_id;
    let p_block_hash = block_hash;
    let p_inputs = inputs;
    let p_outputs = outputs;
    let p_resolve_previous_outpoints = resolve_previous_outpoints;

    let uri_str = format!("{}/transactions/{transactionId}", configuration.base_path, transactionId=crate::apis::urlencode(p_transaction_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_block_hash {
        req_builder = req_builder.query(&[("blockHash", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_inputs {
        req_builder = req_builder.query(&[("inputs", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_outputs {
        req_builder = req_builder.query(&[("outputs", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_resolve_previous_outpoints {
        req_builder = req_builder.query(&[("resolve_previous_outpoints", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TxModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TxModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetTransactionTransactionsTransactionIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Search for transactions by transaction_ids or blue_score
pub async fn search_for_transactions_transactions_search_post(configuration: &configuration::Configuration, tx_search: models::TxSearch, fields: Option<&str>, resolve_previous_outpoints: Option<models::PreviousOutpointLookupMode>, acceptance: Option<models::AcceptanceMode>) -> Result<Vec<models::TxModel>, Error<SearchForTransactionsTransactionsSearchPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_tx_search = tx_search;
    let p_fields = fields;
    let p_resolve_previous_outpoints = resolve_previous_outpoints;
    let p_acceptance = acceptance;

    let uri_str = format!("{}/transactions/search", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_fields {
        req_builder = req_builder.query(&[("fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_resolve_previous_outpoints {
        req_builder = req_builder.query(&[("resolve_previous_outpoints", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_acceptance {
        req_builder = req_builder.query(&[("acceptance", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_tx_search);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TxModel&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TxModel&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchForTransactionsTransactionsSearchPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn submit_a_new_transaction_transactions_post(configuration: &configuration::Configuration, submit_transaction_request: models::SubmitTransactionRequest, replace_by_fee: Option<bool>) -> Result<models::SubmitTransactionResponse, Error<SubmitANewTransactionTransactionsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_submit_transaction_request = submit_transaction_request;
    let p_replace_by_fee = replace_by_fee;

    let uri_str = format!("{}/transactions", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_replace_by_fee {
        req_builder = req_builder.query(&[("replaceByFee", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_submit_transaction_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SubmitTransactionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SubmitTransactionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SubmitANewTransactionTransactionsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

