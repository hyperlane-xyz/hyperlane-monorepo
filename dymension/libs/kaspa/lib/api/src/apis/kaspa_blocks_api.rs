/*
 * Kaspa REST-API server
 *
 * This server is to communicate with kaspa network via REST-API
 *
 * The version of the OpenAPI document: a6a9569
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`get_block_blocks_block_id_get`]
#[derive(Clone, Debug)]
pub struct GetBlockBlocksBlockIdGetParams {
    pub block_id: String,
    pub include_transactions: Option<bool>,
    pub include_color: Option<bool>,
}

/// struct for passing parameters to the method [`get_blocks_blocks_get`]
#[derive(Clone, Debug)]
pub struct GetBlocksBlocksGetParams {
    pub low_hash: String,
    pub include_blocks: Option<bool>,
    pub include_transactions: Option<bool>,
}

/// struct for passing parameters to the method [`get_blocks_from_bluescore_blocks_from_bluescore_get`]
#[derive(Clone, Debug)]
pub struct GetBlocksFromBluescoreBlocksFromBluescoreGetParams {
    pub blue_score: Option<i64>,
    pub include_transactions: Option<bool>,
}

/// struct for typed errors of method [`get_block_blocks_block_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockBlocksBlockIdGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_blocks_blocks_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlocksBlocksGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_blocks_from_bluescore_blocks_from_bluescore_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlocksFromBluescoreBlocksFromBluescoreGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// Get block information for a given block id
pub async fn get_block_blocks_block_id_get(
    configuration: &configuration::Configuration,
    params: GetBlockBlocksBlockIdGetParams,
) -> Result<models::BlockModel, Error<GetBlockBlocksBlockIdGetError>> {
    let uri_str = format!(
        "{}/blocks/{blockId}",
        configuration.base_path,
        blockId = crate::apis::urlencode(params.block_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.include_transactions {
        req_builder = req_builder.query(&[("includeTransactions", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.include_color {
        req_builder = req_builder.query(&[("includeColor", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BlockModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BlockModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetBlockBlocksBlockIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Lists block beginning from a low hash (block id).
pub async fn get_blocks_blocks_get(
    configuration: &configuration::Configuration,
    params: GetBlocksBlocksGetParams,
) -> Result<models::BlockResponse, Error<GetBlocksBlocksGetError>> {
    let uri_str = format!("{}/blocks", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("lowHash", &params.low_hash.to_string())]);
    if let Some(ref param_value) = params.include_blocks {
        req_builder = req_builder.query(&[("includeBlocks", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.include_transactions {
        req_builder = req_builder.query(&[("includeTransactions", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BlockResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BlockResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetBlocksBlocksGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Lists blocks of a given blueScore
pub async fn get_blocks_from_bluescore_blocks_from_bluescore_get(
    configuration: &configuration::Configuration,
    params: GetBlocksFromBluescoreBlocksFromBluescoreGetParams,
) -> Result<Vec<models::BlockModel>, Error<GetBlocksFromBluescoreBlocksFromBluescoreGetError>> {
    let uri_str = format!("{}/blocks-from-bluescore", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.blue_score {
        req_builder = req_builder.query(&[("blueScore", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.include_transactions {
        req_builder = req_builder.query(&[("includeTransactions", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::BlockModel&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::BlockModel&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetBlocksFromBluescoreBlocksFromBluescoreGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
