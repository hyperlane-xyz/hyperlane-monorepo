/*
 * Kaspa REST-API server
 *
 * This server is to communicate with kaspa network via REST-API
 *
 * The version of the OpenAPI document: a6a9569
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockTxModel {
    #[serde(rename = "inputs", skip_serializing_if = "Option::is_none")]
    pub inputs: Option<Vec<models::BlockTxInputModel>>,
    #[serde(rename = "outputs", skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<models::BlockTxOutputModel>>,
    #[serde(rename = "subnetworkId", skip_serializing_if = "Option::is_none")]
    pub subnetwork_id: Option<String>,
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    #[serde(rename = "verboseData")]
    pub verbose_data: Box<models::BlockTxVerboseDataModel>,
    #[serde(rename = "lockTime", skip_serializing_if = "Option::is_none")]
    pub lock_time: Option<i32>,
    #[serde(rename = "gas", skip_serializing_if = "Option::is_none")]
    pub gas: Option<i32>,
    #[serde(rename = "mass", skip_serializing_if = "Option::is_none")]
    pub mass: Option<i32>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}

impl BlockTxModel {
    pub fn new(verbose_data: models::BlockTxVerboseDataModel) -> BlockTxModel {
        BlockTxModel {
            inputs: None,
            outputs: None,
            subnetwork_id: None,
            payload: None,
            verbose_data: Box::new(verbose_data),
            lock_time: None,
            gas: None,
            mass: None,
            version: None,
        }
    }
}

