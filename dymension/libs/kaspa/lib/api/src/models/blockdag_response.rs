/*
 * Kaspa REST-API server
 *
 * This server is to communicate with kaspa network via REST-API
 *
 * The version of the OpenAPI document: a6a9569
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockdagResponse {
    #[serde(rename = "networkName")]
    pub network_name: String,
    #[serde(rename = "blockCount")]
    pub block_count: String,
    #[serde(rename = "headerCount")]
    pub header_count: String,
    #[serde(rename = "tipHashes")]
    pub tip_hashes: Vec<String>,
    #[serde(rename = "difficulty")]
    pub difficulty: f64,
    #[serde(rename = "pastMedianTime")]
    pub past_median_time: String,
    #[serde(rename = "virtualParentHashes")]
    pub virtual_parent_hashes: Vec<String>,
    #[serde(rename = "pruningPointHash")]
    pub pruning_point_hash: String,
    #[serde(rename = "virtualDaaScore")]
    pub virtual_daa_score: String,
    #[serde(rename = "sink")]
    pub sink: String,
}

impl BlockdagResponse {
    pub fn new(
        network_name: String,
        block_count: String,
        header_count: String,
        tip_hashes: Vec<String>,
        difficulty: f64,
        past_median_time: String,
        virtual_parent_hashes: Vec<String>,
        pruning_point_hash: String,
        virtual_daa_score: String,
        sink: String,
    ) -> BlockdagResponse {
        BlockdagResponse {
            network_name,
            block_count,
            header_count,
            tip_hashes,
            difficulty,
            past_median_time,
            virtual_parent_hashes,
            pruning_point_hash,
            virtual_daa_score,
            sink,
        }
    }
}
